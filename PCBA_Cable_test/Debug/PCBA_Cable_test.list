
PCBA_Cable_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005870  08005870  00006870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005910  08005910  00007098  2**0
                  CONTENTS
  4 .ARM          00000000  08005910  08005910  00007098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005910  08005910  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005910  08005910  00006910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005914  08005914  00006914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08005918  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000098  080059b0  00007098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080059b0  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af75  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2c  00000000  00000000  00012035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00013c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094e  00000000  00000000  00014848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f421  00000000  00000000  00015196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e870  00000000  00000000  000245b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e4cb  00000000  00000000  00032e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000912f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  00091338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000943c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005858 	.word	0x08005858

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08005858 	.word	0x08005858

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 ff69 	bl	8001108 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fea9 	bl	8000f98 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff5b 	bl	8001108 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 ff51 	bl	8001108 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fed3 	bl	8001020 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fec9 	bl	8001020 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_dadd>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	4657      	mov	r7, sl
 80002a0:	464e      	mov	r6, r9
 80002a2:	4645      	mov	r5, r8
 80002a4:	46de      	mov	lr, fp
 80002a6:	b5e0      	push	{r5, r6, r7, lr}
 80002a8:	b083      	sub	sp, #12
 80002aa:	9000      	str	r0, [sp, #0]
 80002ac:	9101      	str	r1, [sp, #4]
 80002ae:	030c      	lsls	r4, r1, #12
 80002b0:	004f      	lsls	r7, r1, #1
 80002b2:	0fce      	lsrs	r6, r1, #31
 80002b4:	0a61      	lsrs	r1, r4, #9
 80002b6:	9c00      	ldr	r4, [sp, #0]
 80002b8:	031d      	lsls	r5, r3, #12
 80002ba:	0f64      	lsrs	r4, r4, #29
 80002bc:	430c      	orrs	r4, r1
 80002be:	9900      	ldr	r1, [sp, #0]
 80002c0:	9200      	str	r2, [sp, #0]
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	00c8      	lsls	r0, r1, #3
 80002c6:	0059      	lsls	r1, r3, #1
 80002c8:	0d4b      	lsrs	r3, r1, #21
 80002ca:	4699      	mov	r9, r3
 80002cc:	9a00      	ldr	r2, [sp, #0]
 80002ce:	9b01      	ldr	r3, [sp, #4]
 80002d0:	0a6d      	lsrs	r5, r5, #9
 80002d2:	0fd9      	lsrs	r1, r3, #31
 80002d4:	0f53      	lsrs	r3, r2, #29
 80002d6:	432b      	orrs	r3, r5
 80002d8:	469a      	mov	sl, r3
 80002da:	9b00      	ldr	r3, [sp, #0]
 80002dc:	0d7f      	lsrs	r7, r7, #21
 80002de:	00da      	lsls	r2, r3, #3
 80002e0:	4694      	mov	ip, r2
 80002e2:	464a      	mov	r2, r9
 80002e4:	46b0      	mov	r8, r6
 80002e6:	1aba      	subs	r2, r7, r2
 80002e8:	428e      	cmp	r6, r1
 80002ea:	d100      	bne.n	80002ee <__aeabi_dadd+0x52>
 80002ec:	e0b0      	b.n	8000450 <__aeabi_dadd+0x1b4>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	dc00      	bgt.n	80002f4 <__aeabi_dadd+0x58>
 80002f2:	e078      	b.n	80003e6 <__aeabi_dadd+0x14a>
 80002f4:	4649      	mov	r1, r9
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d100      	bne.n	80002fc <__aeabi_dadd+0x60>
 80002fa:	e0e9      	b.n	80004d0 <__aeabi_dadd+0x234>
 80002fc:	49c9      	ldr	r1, [pc, #804]	@ (8000624 <__aeabi_dadd+0x388>)
 80002fe:	428f      	cmp	r7, r1
 8000300:	d100      	bne.n	8000304 <__aeabi_dadd+0x68>
 8000302:	e195      	b.n	8000630 <__aeabi_dadd+0x394>
 8000304:	2501      	movs	r5, #1
 8000306:	2a38      	cmp	r2, #56	@ 0x38
 8000308:	dc16      	bgt.n	8000338 <__aeabi_dadd+0x9c>
 800030a:	2180      	movs	r1, #128	@ 0x80
 800030c:	4653      	mov	r3, sl
 800030e:	0409      	lsls	r1, r1, #16
 8000310:	430b      	orrs	r3, r1
 8000312:	469a      	mov	sl, r3
 8000314:	2a1f      	cmp	r2, #31
 8000316:	dd00      	ble.n	800031a <__aeabi_dadd+0x7e>
 8000318:	e1e7      	b.n	80006ea <__aeabi_dadd+0x44e>
 800031a:	2120      	movs	r1, #32
 800031c:	4655      	mov	r5, sl
 800031e:	1a8b      	subs	r3, r1, r2
 8000320:	4661      	mov	r1, ip
 8000322:	409d      	lsls	r5, r3
 8000324:	40d1      	lsrs	r1, r2
 8000326:	430d      	orrs	r5, r1
 8000328:	4661      	mov	r1, ip
 800032a:	4099      	lsls	r1, r3
 800032c:	1e4b      	subs	r3, r1, #1
 800032e:	4199      	sbcs	r1, r3
 8000330:	4653      	mov	r3, sl
 8000332:	40d3      	lsrs	r3, r2
 8000334:	430d      	orrs	r5, r1
 8000336:	1ae4      	subs	r4, r4, r3
 8000338:	1b45      	subs	r5, r0, r5
 800033a:	42a8      	cmp	r0, r5
 800033c:	4180      	sbcs	r0, r0
 800033e:	4240      	negs	r0, r0
 8000340:	1a24      	subs	r4, r4, r0
 8000342:	0223      	lsls	r3, r4, #8
 8000344:	d400      	bmi.n	8000348 <__aeabi_dadd+0xac>
 8000346:	e10f      	b.n	8000568 <__aeabi_dadd+0x2cc>
 8000348:	0264      	lsls	r4, r4, #9
 800034a:	0a64      	lsrs	r4, r4, #9
 800034c:	2c00      	cmp	r4, #0
 800034e:	d100      	bne.n	8000352 <__aeabi_dadd+0xb6>
 8000350:	e139      	b.n	80005c6 <__aeabi_dadd+0x32a>
 8000352:	0020      	movs	r0, r4
 8000354:	f001 fe3a 	bl	8001fcc <__clzsi2>
 8000358:	0003      	movs	r3, r0
 800035a:	3b08      	subs	r3, #8
 800035c:	2120      	movs	r1, #32
 800035e:	0028      	movs	r0, r5
 8000360:	1aca      	subs	r2, r1, r3
 8000362:	40d0      	lsrs	r0, r2
 8000364:	409c      	lsls	r4, r3
 8000366:	0002      	movs	r2, r0
 8000368:	409d      	lsls	r5, r3
 800036a:	4322      	orrs	r2, r4
 800036c:	429f      	cmp	r7, r3
 800036e:	dd00      	ble.n	8000372 <__aeabi_dadd+0xd6>
 8000370:	e173      	b.n	800065a <__aeabi_dadd+0x3be>
 8000372:	1bd8      	subs	r0, r3, r7
 8000374:	3001      	adds	r0, #1
 8000376:	1a09      	subs	r1, r1, r0
 8000378:	002c      	movs	r4, r5
 800037a:	408d      	lsls	r5, r1
 800037c:	40c4      	lsrs	r4, r0
 800037e:	1e6b      	subs	r3, r5, #1
 8000380:	419d      	sbcs	r5, r3
 8000382:	0013      	movs	r3, r2
 8000384:	40c2      	lsrs	r2, r0
 8000386:	408b      	lsls	r3, r1
 8000388:	4325      	orrs	r5, r4
 800038a:	2700      	movs	r7, #0
 800038c:	0014      	movs	r4, r2
 800038e:	431d      	orrs	r5, r3
 8000390:	076b      	lsls	r3, r5, #29
 8000392:	d009      	beq.n	80003a8 <__aeabi_dadd+0x10c>
 8000394:	230f      	movs	r3, #15
 8000396:	402b      	ands	r3, r5
 8000398:	2b04      	cmp	r3, #4
 800039a:	d005      	beq.n	80003a8 <__aeabi_dadd+0x10c>
 800039c:	1d2b      	adds	r3, r5, #4
 800039e:	42ab      	cmp	r3, r5
 80003a0:	41ad      	sbcs	r5, r5
 80003a2:	426d      	negs	r5, r5
 80003a4:	1964      	adds	r4, r4, r5
 80003a6:	001d      	movs	r5, r3
 80003a8:	0223      	lsls	r3, r4, #8
 80003aa:	d400      	bmi.n	80003ae <__aeabi_dadd+0x112>
 80003ac:	e12d      	b.n	800060a <__aeabi_dadd+0x36e>
 80003ae:	4a9d      	ldr	r2, [pc, #628]	@ (8000624 <__aeabi_dadd+0x388>)
 80003b0:	3701      	adds	r7, #1
 80003b2:	4297      	cmp	r7, r2
 80003b4:	d100      	bne.n	80003b8 <__aeabi_dadd+0x11c>
 80003b6:	e0d3      	b.n	8000560 <__aeabi_dadd+0x2c4>
 80003b8:	4646      	mov	r6, r8
 80003ba:	499b      	ldr	r1, [pc, #620]	@ (8000628 <__aeabi_dadd+0x38c>)
 80003bc:	08ed      	lsrs	r5, r5, #3
 80003be:	4021      	ands	r1, r4
 80003c0:	074a      	lsls	r2, r1, #29
 80003c2:	432a      	orrs	r2, r5
 80003c4:	057c      	lsls	r4, r7, #21
 80003c6:	024d      	lsls	r5, r1, #9
 80003c8:	0b2d      	lsrs	r5, r5, #12
 80003ca:	0d64      	lsrs	r4, r4, #21
 80003cc:	0524      	lsls	r4, r4, #20
 80003ce:	432c      	orrs	r4, r5
 80003d0:	07f6      	lsls	r6, r6, #31
 80003d2:	4334      	orrs	r4, r6
 80003d4:	0010      	movs	r0, r2
 80003d6:	0021      	movs	r1, r4
 80003d8:	b003      	add	sp, #12
 80003da:	bcf0      	pop	{r4, r5, r6, r7}
 80003dc:	46bb      	mov	fp, r7
 80003de:	46b2      	mov	sl, r6
 80003e0:	46a9      	mov	r9, r5
 80003e2:	46a0      	mov	r8, r4
 80003e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_dadd+0x150>
 80003ea:	e084      	b.n	80004f6 <__aeabi_dadd+0x25a>
 80003ec:	464a      	mov	r2, r9
 80003ee:	1bd2      	subs	r2, r2, r7
 80003f0:	2f00      	cmp	r7, #0
 80003f2:	d000      	beq.n	80003f6 <__aeabi_dadd+0x15a>
 80003f4:	e16d      	b.n	80006d2 <__aeabi_dadd+0x436>
 80003f6:	0025      	movs	r5, r4
 80003f8:	4305      	orrs	r5, r0
 80003fa:	d100      	bne.n	80003fe <__aeabi_dadd+0x162>
 80003fc:	e127      	b.n	800064e <__aeabi_dadd+0x3b2>
 80003fe:	1e56      	subs	r6, r2, #1
 8000400:	2a01      	cmp	r2, #1
 8000402:	d100      	bne.n	8000406 <__aeabi_dadd+0x16a>
 8000404:	e23b      	b.n	800087e <__aeabi_dadd+0x5e2>
 8000406:	4d87      	ldr	r5, [pc, #540]	@ (8000624 <__aeabi_dadd+0x388>)
 8000408:	42aa      	cmp	r2, r5
 800040a:	d100      	bne.n	800040e <__aeabi_dadd+0x172>
 800040c:	e26a      	b.n	80008e4 <__aeabi_dadd+0x648>
 800040e:	2501      	movs	r5, #1
 8000410:	2e38      	cmp	r6, #56	@ 0x38
 8000412:	dc12      	bgt.n	800043a <__aeabi_dadd+0x19e>
 8000414:	0032      	movs	r2, r6
 8000416:	2a1f      	cmp	r2, #31
 8000418:	dd00      	ble.n	800041c <__aeabi_dadd+0x180>
 800041a:	e1f8      	b.n	800080e <__aeabi_dadd+0x572>
 800041c:	2620      	movs	r6, #32
 800041e:	0025      	movs	r5, r4
 8000420:	1ab6      	subs	r6, r6, r2
 8000422:	0007      	movs	r7, r0
 8000424:	4653      	mov	r3, sl
 8000426:	40b0      	lsls	r0, r6
 8000428:	40d4      	lsrs	r4, r2
 800042a:	40b5      	lsls	r5, r6
 800042c:	40d7      	lsrs	r7, r2
 800042e:	1e46      	subs	r6, r0, #1
 8000430:	41b0      	sbcs	r0, r6
 8000432:	1b1b      	subs	r3, r3, r4
 8000434:	469a      	mov	sl, r3
 8000436:	433d      	orrs	r5, r7
 8000438:	4305      	orrs	r5, r0
 800043a:	4662      	mov	r2, ip
 800043c:	1b55      	subs	r5, r2, r5
 800043e:	45ac      	cmp	ip, r5
 8000440:	4192      	sbcs	r2, r2
 8000442:	4653      	mov	r3, sl
 8000444:	4252      	negs	r2, r2
 8000446:	000e      	movs	r6, r1
 8000448:	464f      	mov	r7, r9
 800044a:	4688      	mov	r8, r1
 800044c:	1a9c      	subs	r4, r3, r2
 800044e:	e778      	b.n	8000342 <__aeabi_dadd+0xa6>
 8000450:	2a00      	cmp	r2, #0
 8000452:	dc00      	bgt.n	8000456 <__aeabi_dadd+0x1ba>
 8000454:	e08e      	b.n	8000574 <__aeabi_dadd+0x2d8>
 8000456:	4649      	mov	r1, r9
 8000458:	2900      	cmp	r1, #0
 800045a:	d175      	bne.n	8000548 <__aeabi_dadd+0x2ac>
 800045c:	4661      	mov	r1, ip
 800045e:	4653      	mov	r3, sl
 8000460:	4319      	orrs	r1, r3
 8000462:	d100      	bne.n	8000466 <__aeabi_dadd+0x1ca>
 8000464:	e0f6      	b.n	8000654 <__aeabi_dadd+0x3b8>
 8000466:	1e51      	subs	r1, r2, #1
 8000468:	2a01      	cmp	r2, #1
 800046a:	d100      	bne.n	800046e <__aeabi_dadd+0x1d2>
 800046c:	e191      	b.n	8000792 <__aeabi_dadd+0x4f6>
 800046e:	4d6d      	ldr	r5, [pc, #436]	@ (8000624 <__aeabi_dadd+0x388>)
 8000470:	42aa      	cmp	r2, r5
 8000472:	d100      	bne.n	8000476 <__aeabi_dadd+0x1da>
 8000474:	e0dc      	b.n	8000630 <__aeabi_dadd+0x394>
 8000476:	2501      	movs	r5, #1
 8000478:	2938      	cmp	r1, #56	@ 0x38
 800047a:	dc14      	bgt.n	80004a6 <__aeabi_dadd+0x20a>
 800047c:	000a      	movs	r2, r1
 800047e:	2a1f      	cmp	r2, #31
 8000480:	dd00      	ble.n	8000484 <__aeabi_dadd+0x1e8>
 8000482:	e1a2      	b.n	80007ca <__aeabi_dadd+0x52e>
 8000484:	2120      	movs	r1, #32
 8000486:	4653      	mov	r3, sl
 8000488:	1a89      	subs	r1, r1, r2
 800048a:	408b      	lsls	r3, r1
 800048c:	001d      	movs	r5, r3
 800048e:	4663      	mov	r3, ip
 8000490:	40d3      	lsrs	r3, r2
 8000492:	431d      	orrs	r5, r3
 8000494:	4663      	mov	r3, ip
 8000496:	408b      	lsls	r3, r1
 8000498:	0019      	movs	r1, r3
 800049a:	1e4b      	subs	r3, r1, #1
 800049c:	4199      	sbcs	r1, r3
 800049e:	4653      	mov	r3, sl
 80004a0:	40d3      	lsrs	r3, r2
 80004a2:	430d      	orrs	r5, r1
 80004a4:	18e4      	adds	r4, r4, r3
 80004a6:	182d      	adds	r5, r5, r0
 80004a8:	4285      	cmp	r5, r0
 80004aa:	4180      	sbcs	r0, r0
 80004ac:	4240      	negs	r0, r0
 80004ae:	1824      	adds	r4, r4, r0
 80004b0:	0223      	lsls	r3, r4, #8
 80004b2:	d559      	bpl.n	8000568 <__aeabi_dadd+0x2cc>
 80004b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000624 <__aeabi_dadd+0x388>)
 80004b6:	3701      	adds	r7, #1
 80004b8:	429f      	cmp	r7, r3
 80004ba:	d051      	beq.n	8000560 <__aeabi_dadd+0x2c4>
 80004bc:	2101      	movs	r1, #1
 80004be:	4b5a      	ldr	r3, [pc, #360]	@ (8000628 <__aeabi_dadd+0x38c>)
 80004c0:	086a      	lsrs	r2, r5, #1
 80004c2:	401c      	ands	r4, r3
 80004c4:	4029      	ands	r1, r5
 80004c6:	430a      	orrs	r2, r1
 80004c8:	07e5      	lsls	r5, r4, #31
 80004ca:	4315      	orrs	r5, r2
 80004cc:	0864      	lsrs	r4, r4, #1
 80004ce:	e75f      	b.n	8000390 <__aeabi_dadd+0xf4>
 80004d0:	4661      	mov	r1, ip
 80004d2:	4653      	mov	r3, sl
 80004d4:	4319      	orrs	r1, r3
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0x23e>
 80004d8:	e0bc      	b.n	8000654 <__aeabi_dadd+0x3b8>
 80004da:	1e51      	subs	r1, r2, #1
 80004dc:	2a01      	cmp	r2, #1
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x246>
 80004e0:	e164      	b.n	80007ac <__aeabi_dadd+0x510>
 80004e2:	4d50      	ldr	r5, [pc, #320]	@ (8000624 <__aeabi_dadd+0x388>)
 80004e4:	42aa      	cmp	r2, r5
 80004e6:	d100      	bne.n	80004ea <__aeabi_dadd+0x24e>
 80004e8:	e16a      	b.n	80007c0 <__aeabi_dadd+0x524>
 80004ea:	2501      	movs	r5, #1
 80004ec:	2938      	cmp	r1, #56	@ 0x38
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x256>
 80004f0:	e722      	b.n	8000338 <__aeabi_dadd+0x9c>
 80004f2:	000a      	movs	r2, r1
 80004f4:	e70e      	b.n	8000314 <__aeabi_dadd+0x78>
 80004f6:	4a4d      	ldr	r2, [pc, #308]	@ (800062c <__aeabi_dadd+0x390>)
 80004f8:	1c7d      	adds	r5, r7, #1
 80004fa:	4215      	tst	r5, r2
 80004fc:	d000      	beq.n	8000500 <__aeabi_dadd+0x264>
 80004fe:	e0d0      	b.n	80006a2 <__aeabi_dadd+0x406>
 8000500:	0025      	movs	r5, r4
 8000502:	4662      	mov	r2, ip
 8000504:	4653      	mov	r3, sl
 8000506:	4305      	orrs	r5, r0
 8000508:	431a      	orrs	r2, r3
 800050a:	2f00      	cmp	r7, #0
 800050c:	d000      	beq.n	8000510 <__aeabi_dadd+0x274>
 800050e:	e137      	b.n	8000780 <__aeabi_dadd+0x4e4>
 8000510:	2d00      	cmp	r5, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x27a>
 8000514:	e1a8      	b.n	8000868 <__aeabi_dadd+0x5cc>
 8000516:	2a00      	cmp	r2, #0
 8000518:	d100      	bne.n	800051c <__aeabi_dadd+0x280>
 800051a:	e16a      	b.n	80007f2 <__aeabi_dadd+0x556>
 800051c:	4663      	mov	r3, ip
 800051e:	1ac5      	subs	r5, r0, r3
 8000520:	4653      	mov	r3, sl
 8000522:	1ae2      	subs	r2, r4, r3
 8000524:	42a8      	cmp	r0, r5
 8000526:	419b      	sbcs	r3, r3
 8000528:	425b      	negs	r3, r3
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	021a      	lsls	r2, r3, #8
 800052e:	d400      	bmi.n	8000532 <__aeabi_dadd+0x296>
 8000530:	e203      	b.n	800093a <__aeabi_dadd+0x69e>
 8000532:	4663      	mov	r3, ip
 8000534:	1a1d      	subs	r5, r3, r0
 8000536:	45ac      	cmp	ip, r5
 8000538:	4192      	sbcs	r2, r2
 800053a:	4653      	mov	r3, sl
 800053c:	4252      	negs	r2, r2
 800053e:	1b1c      	subs	r4, r3, r4
 8000540:	000e      	movs	r6, r1
 8000542:	4688      	mov	r8, r1
 8000544:	1aa4      	subs	r4, r4, r2
 8000546:	e723      	b.n	8000390 <__aeabi_dadd+0xf4>
 8000548:	4936      	ldr	r1, [pc, #216]	@ (8000624 <__aeabi_dadd+0x388>)
 800054a:	428f      	cmp	r7, r1
 800054c:	d070      	beq.n	8000630 <__aeabi_dadd+0x394>
 800054e:	2501      	movs	r5, #1
 8000550:	2a38      	cmp	r2, #56	@ 0x38
 8000552:	dca8      	bgt.n	80004a6 <__aeabi_dadd+0x20a>
 8000554:	2180      	movs	r1, #128	@ 0x80
 8000556:	4653      	mov	r3, sl
 8000558:	0409      	lsls	r1, r1, #16
 800055a:	430b      	orrs	r3, r1
 800055c:	469a      	mov	sl, r3
 800055e:	e78e      	b.n	800047e <__aeabi_dadd+0x1e2>
 8000560:	003c      	movs	r4, r7
 8000562:	2500      	movs	r5, #0
 8000564:	2200      	movs	r2, #0
 8000566:	e731      	b.n	80003cc <__aeabi_dadd+0x130>
 8000568:	2307      	movs	r3, #7
 800056a:	402b      	ands	r3, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_dadd+0x2d6>
 8000570:	e710      	b.n	8000394 <__aeabi_dadd+0xf8>
 8000572:	e093      	b.n	800069c <__aeabi_dadd+0x400>
 8000574:	2a00      	cmp	r2, #0
 8000576:	d074      	beq.n	8000662 <__aeabi_dadd+0x3c6>
 8000578:	464a      	mov	r2, r9
 800057a:	1bd2      	subs	r2, r2, r7
 800057c:	2f00      	cmp	r7, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_dadd+0x2e6>
 8000580:	e0c7      	b.n	8000712 <__aeabi_dadd+0x476>
 8000582:	4928      	ldr	r1, [pc, #160]	@ (8000624 <__aeabi_dadd+0x388>)
 8000584:	4589      	cmp	r9, r1
 8000586:	d100      	bne.n	800058a <__aeabi_dadd+0x2ee>
 8000588:	e185      	b.n	8000896 <__aeabi_dadd+0x5fa>
 800058a:	2501      	movs	r5, #1
 800058c:	2a38      	cmp	r2, #56	@ 0x38
 800058e:	dc12      	bgt.n	80005b6 <__aeabi_dadd+0x31a>
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	0409      	lsls	r1, r1, #16
 8000594:	430c      	orrs	r4, r1
 8000596:	2a1f      	cmp	r2, #31
 8000598:	dd00      	ble.n	800059c <__aeabi_dadd+0x300>
 800059a:	e1ab      	b.n	80008f4 <__aeabi_dadd+0x658>
 800059c:	2120      	movs	r1, #32
 800059e:	0025      	movs	r5, r4
 80005a0:	1a89      	subs	r1, r1, r2
 80005a2:	0007      	movs	r7, r0
 80005a4:	4088      	lsls	r0, r1
 80005a6:	408d      	lsls	r5, r1
 80005a8:	40d7      	lsrs	r7, r2
 80005aa:	1e41      	subs	r1, r0, #1
 80005ac:	4188      	sbcs	r0, r1
 80005ae:	40d4      	lsrs	r4, r2
 80005b0:	433d      	orrs	r5, r7
 80005b2:	4305      	orrs	r5, r0
 80005b4:	44a2      	add	sl, r4
 80005b6:	4465      	add	r5, ip
 80005b8:	4565      	cmp	r5, ip
 80005ba:	4192      	sbcs	r2, r2
 80005bc:	4252      	negs	r2, r2
 80005be:	4452      	add	r2, sl
 80005c0:	0014      	movs	r4, r2
 80005c2:	464f      	mov	r7, r9
 80005c4:	e774      	b.n	80004b0 <__aeabi_dadd+0x214>
 80005c6:	0028      	movs	r0, r5
 80005c8:	f001 fd00 	bl	8001fcc <__clzsi2>
 80005cc:	0003      	movs	r3, r0
 80005ce:	3318      	adds	r3, #24
 80005d0:	2b1f      	cmp	r3, #31
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_dadd+0x33a>
 80005d4:	e6c2      	b.n	800035c <__aeabi_dadd+0xc0>
 80005d6:	002a      	movs	r2, r5
 80005d8:	3808      	subs	r0, #8
 80005da:	4082      	lsls	r2, r0
 80005dc:	429f      	cmp	r7, r3
 80005de:	dd00      	ble.n	80005e2 <__aeabi_dadd+0x346>
 80005e0:	e0a9      	b.n	8000736 <__aeabi_dadd+0x49a>
 80005e2:	1bdb      	subs	r3, r3, r7
 80005e4:	1c58      	adds	r0, r3, #1
 80005e6:	281f      	cmp	r0, #31
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_dadd+0x350>
 80005ea:	e1ac      	b.n	8000946 <__aeabi_dadd+0x6aa>
 80005ec:	0015      	movs	r5, r2
 80005ee:	3b1f      	subs	r3, #31
 80005f0:	40dd      	lsrs	r5, r3
 80005f2:	2820      	cmp	r0, #32
 80005f4:	d005      	beq.n	8000602 <__aeabi_dadd+0x366>
 80005f6:	2340      	movs	r3, #64	@ 0x40
 80005f8:	1a1b      	subs	r3, r3, r0
 80005fa:	409a      	lsls	r2, r3
 80005fc:	1e53      	subs	r3, r2, #1
 80005fe:	419a      	sbcs	r2, r3
 8000600:	4315      	orrs	r5, r2
 8000602:	2307      	movs	r3, #7
 8000604:	2700      	movs	r7, #0
 8000606:	402b      	ands	r3, r5
 8000608:	e7b0      	b.n	800056c <__aeabi_dadd+0x2d0>
 800060a:	08ed      	lsrs	r5, r5, #3
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <__aeabi_dadd+0x388>)
 800060e:	0762      	lsls	r2, r4, #29
 8000610:	432a      	orrs	r2, r5
 8000612:	08e4      	lsrs	r4, r4, #3
 8000614:	429f      	cmp	r7, r3
 8000616:	d00f      	beq.n	8000638 <__aeabi_dadd+0x39c>
 8000618:	0324      	lsls	r4, r4, #12
 800061a:	0b25      	lsrs	r5, r4, #12
 800061c:	057c      	lsls	r4, r7, #21
 800061e:	0d64      	lsrs	r4, r4, #21
 8000620:	e6d4      	b.n	80003cc <__aeabi_dadd+0x130>
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	000007ff 	.word	0x000007ff
 8000628:	ff7fffff 	.word	0xff7fffff
 800062c:	000007fe 	.word	0x000007fe
 8000630:	08c0      	lsrs	r0, r0, #3
 8000632:	0762      	lsls	r2, r4, #29
 8000634:	4302      	orrs	r2, r0
 8000636:	08e4      	lsrs	r4, r4, #3
 8000638:	0013      	movs	r3, r2
 800063a:	4323      	orrs	r3, r4
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x3a4>
 800063e:	e186      	b.n	800094e <__aeabi_dadd+0x6b2>
 8000640:	2580      	movs	r5, #128	@ 0x80
 8000642:	032d      	lsls	r5, r5, #12
 8000644:	4325      	orrs	r5, r4
 8000646:	032d      	lsls	r5, r5, #12
 8000648:	4cc3      	ldr	r4, [pc, #780]	@ (8000958 <__aeabi_dadd+0x6bc>)
 800064a:	0b2d      	lsrs	r5, r5, #12
 800064c:	e6be      	b.n	80003cc <__aeabi_dadd+0x130>
 800064e:	4660      	mov	r0, ip
 8000650:	4654      	mov	r4, sl
 8000652:	000e      	movs	r6, r1
 8000654:	0017      	movs	r7, r2
 8000656:	08c5      	lsrs	r5, r0, #3
 8000658:	e7d8      	b.n	800060c <__aeabi_dadd+0x370>
 800065a:	4cc0      	ldr	r4, [pc, #768]	@ (800095c <__aeabi_dadd+0x6c0>)
 800065c:	1aff      	subs	r7, r7, r3
 800065e:	4014      	ands	r4, r2
 8000660:	e696      	b.n	8000390 <__aeabi_dadd+0xf4>
 8000662:	4abf      	ldr	r2, [pc, #764]	@ (8000960 <__aeabi_dadd+0x6c4>)
 8000664:	1c79      	adds	r1, r7, #1
 8000666:	4211      	tst	r1, r2
 8000668:	d16b      	bne.n	8000742 <__aeabi_dadd+0x4a6>
 800066a:	0022      	movs	r2, r4
 800066c:	4302      	orrs	r2, r0
 800066e:	2f00      	cmp	r7, #0
 8000670:	d000      	beq.n	8000674 <__aeabi_dadd+0x3d8>
 8000672:	e0db      	b.n	800082c <__aeabi_dadd+0x590>
 8000674:	2a00      	cmp	r2, #0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x3de>
 8000678:	e12d      	b.n	80008d6 <__aeabi_dadd+0x63a>
 800067a:	4662      	mov	r2, ip
 800067c:	4653      	mov	r3, sl
 800067e:	431a      	orrs	r2, r3
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x3e8>
 8000682:	e0b6      	b.n	80007f2 <__aeabi_dadd+0x556>
 8000684:	4663      	mov	r3, ip
 8000686:	18c5      	adds	r5, r0, r3
 8000688:	4285      	cmp	r5, r0
 800068a:	4180      	sbcs	r0, r0
 800068c:	4454      	add	r4, sl
 800068e:	4240      	negs	r0, r0
 8000690:	1824      	adds	r4, r4, r0
 8000692:	0223      	lsls	r3, r4, #8
 8000694:	d502      	bpl.n	800069c <__aeabi_dadd+0x400>
 8000696:	000f      	movs	r7, r1
 8000698:	4bb0      	ldr	r3, [pc, #704]	@ (800095c <__aeabi_dadd+0x6c0>)
 800069a:	401c      	ands	r4, r3
 800069c:	003a      	movs	r2, r7
 800069e:	0028      	movs	r0, r5
 80006a0:	e7d8      	b.n	8000654 <__aeabi_dadd+0x3b8>
 80006a2:	4662      	mov	r2, ip
 80006a4:	1a85      	subs	r5, r0, r2
 80006a6:	42a8      	cmp	r0, r5
 80006a8:	4192      	sbcs	r2, r2
 80006aa:	4653      	mov	r3, sl
 80006ac:	4252      	negs	r2, r2
 80006ae:	4691      	mov	r9, r2
 80006b0:	1ae3      	subs	r3, r4, r3
 80006b2:	001a      	movs	r2, r3
 80006b4:	464b      	mov	r3, r9
 80006b6:	1ad2      	subs	r2, r2, r3
 80006b8:	0013      	movs	r3, r2
 80006ba:	4691      	mov	r9, r2
 80006bc:	021a      	lsls	r2, r3, #8
 80006be:	d454      	bmi.n	800076a <__aeabi_dadd+0x4ce>
 80006c0:	464a      	mov	r2, r9
 80006c2:	464c      	mov	r4, r9
 80006c4:	432a      	orrs	r2, r5
 80006c6:	d000      	beq.n	80006ca <__aeabi_dadd+0x42e>
 80006c8:	e640      	b.n	800034c <__aeabi_dadd+0xb0>
 80006ca:	2600      	movs	r6, #0
 80006cc:	2400      	movs	r4, #0
 80006ce:	2500      	movs	r5, #0
 80006d0:	e67c      	b.n	80003cc <__aeabi_dadd+0x130>
 80006d2:	4da1      	ldr	r5, [pc, #644]	@ (8000958 <__aeabi_dadd+0x6bc>)
 80006d4:	45a9      	cmp	r9, r5
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x43e>
 80006d8:	e090      	b.n	80007fc <__aeabi_dadd+0x560>
 80006da:	2501      	movs	r5, #1
 80006dc:	2a38      	cmp	r2, #56	@ 0x38
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dadd+0x446>
 80006e0:	e6ab      	b.n	800043a <__aeabi_dadd+0x19e>
 80006e2:	2580      	movs	r5, #128	@ 0x80
 80006e4:	042d      	lsls	r5, r5, #16
 80006e6:	432c      	orrs	r4, r5
 80006e8:	e695      	b.n	8000416 <__aeabi_dadd+0x17a>
 80006ea:	0011      	movs	r1, r2
 80006ec:	4655      	mov	r5, sl
 80006ee:	3920      	subs	r1, #32
 80006f0:	40cd      	lsrs	r5, r1
 80006f2:	46a9      	mov	r9, r5
 80006f4:	2a20      	cmp	r2, #32
 80006f6:	d006      	beq.n	8000706 <__aeabi_dadd+0x46a>
 80006f8:	2140      	movs	r1, #64	@ 0x40
 80006fa:	4653      	mov	r3, sl
 80006fc:	1a8a      	subs	r2, r1, r2
 80006fe:	4093      	lsls	r3, r2
 8000700:	4662      	mov	r2, ip
 8000702:	431a      	orrs	r2, r3
 8000704:	4694      	mov	ip, r2
 8000706:	4665      	mov	r5, ip
 8000708:	1e6b      	subs	r3, r5, #1
 800070a:	419d      	sbcs	r5, r3
 800070c:	464b      	mov	r3, r9
 800070e:	431d      	orrs	r5, r3
 8000710:	e612      	b.n	8000338 <__aeabi_dadd+0x9c>
 8000712:	0021      	movs	r1, r4
 8000714:	4301      	orrs	r1, r0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x47e>
 8000718:	e0c4      	b.n	80008a4 <__aeabi_dadd+0x608>
 800071a:	1e51      	subs	r1, r2, #1
 800071c:	2a01      	cmp	r2, #1
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x486>
 8000720:	e0fb      	b.n	800091a <__aeabi_dadd+0x67e>
 8000722:	4d8d      	ldr	r5, [pc, #564]	@ (8000958 <__aeabi_dadd+0x6bc>)
 8000724:	42aa      	cmp	r2, r5
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x48e>
 8000728:	e0b5      	b.n	8000896 <__aeabi_dadd+0x5fa>
 800072a:	2501      	movs	r5, #1
 800072c:	2938      	cmp	r1, #56	@ 0x38
 800072e:	dd00      	ble.n	8000732 <__aeabi_dadd+0x496>
 8000730:	e741      	b.n	80005b6 <__aeabi_dadd+0x31a>
 8000732:	000a      	movs	r2, r1
 8000734:	e72f      	b.n	8000596 <__aeabi_dadd+0x2fa>
 8000736:	4c89      	ldr	r4, [pc, #548]	@ (800095c <__aeabi_dadd+0x6c0>)
 8000738:	1aff      	subs	r7, r7, r3
 800073a:	4014      	ands	r4, r2
 800073c:	0762      	lsls	r2, r4, #29
 800073e:	08e4      	lsrs	r4, r4, #3
 8000740:	e76a      	b.n	8000618 <__aeabi_dadd+0x37c>
 8000742:	4a85      	ldr	r2, [pc, #532]	@ (8000958 <__aeabi_dadd+0x6bc>)
 8000744:	4291      	cmp	r1, r2
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x4ae>
 8000748:	e0e3      	b.n	8000912 <__aeabi_dadd+0x676>
 800074a:	4663      	mov	r3, ip
 800074c:	18c2      	adds	r2, r0, r3
 800074e:	4282      	cmp	r2, r0
 8000750:	4180      	sbcs	r0, r0
 8000752:	0023      	movs	r3, r4
 8000754:	4240      	negs	r0, r0
 8000756:	4453      	add	r3, sl
 8000758:	181b      	adds	r3, r3, r0
 800075a:	07dd      	lsls	r5, r3, #31
 800075c:	085c      	lsrs	r4, r3, #1
 800075e:	2307      	movs	r3, #7
 8000760:	0852      	lsrs	r2, r2, #1
 8000762:	4315      	orrs	r5, r2
 8000764:	000f      	movs	r7, r1
 8000766:	402b      	ands	r3, r5
 8000768:	e700      	b.n	800056c <__aeabi_dadd+0x2d0>
 800076a:	4663      	mov	r3, ip
 800076c:	1a1d      	subs	r5, r3, r0
 800076e:	45ac      	cmp	ip, r5
 8000770:	4192      	sbcs	r2, r2
 8000772:	4653      	mov	r3, sl
 8000774:	4252      	negs	r2, r2
 8000776:	1b1c      	subs	r4, r3, r4
 8000778:	000e      	movs	r6, r1
 800077a:	4688      	mov	r8, r1
 800077c:	1aa4      	subs	r4, r4, r2
 800077e:	e5e5      	b.n	800034c <__aeabi_dadd+0xb0>
 8000780:	2d00      	cmp	r5, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_dadd+0x4ea>
 8000784:	e091      	b.n	80008aa <__aeabi_dadd+0x60e>
 8000786:	2a00      	cmp	r2, #0
 8000788:	d138      	bne.n	80007fc <__aeabi_dadd+0x560>
 800078a:	2480      	movs	r4, #128	@ 0x80
 800078c:	2600      	movs	r6, #0
 800078e:	0324      	lsls	r4, r4, #12
 8000790:	e756      	b.n	8000640 <__aeabi_dadd+0x3a4>
 8000792:	4663      	mov	r3, ip
 8000794:	18c5      	adds	r5, r0, r3
 8000796:	4285      	cmp	r5, r0
 8000798:	4180      	sbcs	r0, r0
 800079a:	4454      	add	r4, sl
 800079c:	4240      	negs	r0, r0
 800079e:	1824      	adds	r4, r4, r0
 80007a0:	2701      	movs	r7, #1
 80007a2:	0223      	lsls	r3, r4, #8
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_dadd+0x50c>
 80007a6:	e6df      	b.n	8000568 <__aeabi_dadd+0x2cc>
 80007a8:	2702      	movs	r7, #2
 80007aa:	e687      	b.n	80004bc <__aeabi_dadd+0x220>
 80007ac:	4663      	mov	r3, ip
 80007ae:	1ac5      	subs	r5, r0, r3
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	4180      	sbcs	r0, r0
 80007b4:	4653      	mov	r3, sl
 80007b6:	4240      	negs	r0, r0
 80007b8:	1ae4      	subs	r4, r4, r3
 80007ba:	2701      	movs	r7, #1
 80007bc:	1a24      	subs	r4, r4, r0
 80007be:	e5c0      	b.n	8000342 <__aeabi_dadd+0xa6>
 80007c0:	0762      	lsls	r2, r4, #29
 80007c2:	08c0      	lsrs	r0, r0, #3
 80007c4:	4302      	orrs	r2, r0
 80007c6:	08e4      	lsrs	r4, r4, #3
 80007c8:	e736      	b.n	8000638 <__aeabi_dadd+0x39c>
 80007ca:	0011      	movs	r1, r2
 80007cc:	4653      	mov	r3, sl
 80007ce:	3920      	subs	r1, #32
 80007d0:	40cb      	lsrs	r3, r1
 80007d2:	4699      	mov	r9, r3
 80007d4:	2a20      	cmp	r2, #32
 80007d6:	d006      	beq.n	80007e6 <__aeabi_dadd+0x54a>
 80007d8:	2140      	movs	r1, #64	@ 0x40
 80007da:	4653      	mov	r3, sl
 80007dc:	1a8a      	subs	r2, r1, r2
 80007de:	4093      	lsls	r3, r2
 80007e0:	4662      	mov	r2, ip
 80007e2:	431a      	orrs	r2, r3
 80007e4:	4694      	mov	ip, r2
 80007e6:	4665      	mov	r5, ip
 80007e8:	1e6b      	subs	r3, r5, #1
 80007ea:	419d      	sbcs	r5, r3
 80007ec:	464b      	mov	r3, r9
 80007ee:	431d      	orrs	r5, r3
 80007f0:	e659      	b.n	80004a6 <__aeabi_dadd+0x20a>
 80007f2:	0762      	lsls	r2, r4, #29
 80007f4:	08c0      	lsrs	r0, r0, #3
 80007f6:	4302      	orrs	r2, r0
 80007f8:	08e4      	lsrs	r4, r4, #3
 80007fa:	e70d      	b.n	8000618 <__aeabi_dadd+0x37c>
 80007fc:	4653      	mov	r3, sl
 80007fe:	075a      	lsls	r2, r3, #29
 8000800:	4663      	mov	r3, ip
 8000802:	08d8      	lsrs	r0, r3, #3
 8000804:	4653      	mov	r3, sl
 8000806:	000e      	movs	r6, r1
 8000808:	4302      	orrs	r2, r0
 800080a:	08dc      	lsrs	r4, r3, #3
 800080c:	e714      	b.n	8000638 <__aeabi_dadd+0x39c>
 800080e:	0015      	movs	r5, r2
 8000810:	0026      	movs	r6, r4
 8000812:	3d20      	subs	r5, #32
 8000814:	40ee      	lsrs	r6, r5
 8000816:	2a20      	cmp	r2, #32
 8000818:	d003      	beq.n	8000822 <__aeabi_dadd+0x586>
 800081a:	2540      	movs	r5, #64	@ 0x40
 800081c:	1aaa      	subs	r2, r5, r2
 800081e:	4094      	lsls	r4, r2
 8000820:	4320      	orrs	r0, r4
 8000822:	1e42      	subs	r2, r0, #1
 8000824:	4190      	sbcs	r0, r2
 8000826:	0005      	movs	r5, r0
 8000828:	4335      	orrs	r5, r6
 800082a:	e606      	b.n	800043a <__aeabi_dadd+0x19e>
 800082c:	2a00      	cmp	r2, #0
 800082e:	d07c      	beq.n	800092a <__aeabi_dadd+0x68e>
 8000830:	4662      	mov	r2, ip
 8000832:	4653      	mov	r3, sl
 8000834:	08c0      	lsrs	r0, r0, #3
 8000836:	431a      	orrs	r2, r3
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0x5a0>
 800083a:	e6fa      	b.n	8000632 <__aeabi_dadd+0x396>
 800083c:	0762      	lsls	r2, r4, #29
 800083e:	4310      	orrs	r0, r2
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0312      	lsls	r2, r2, #12
 8000846:	4214      	tst	r4, r2
 8000848:	d008      	beq.n	800085c <__aeabi_dadd+0x5c0>
 800084a:	08d9      	lsrs	r1, r3, #3
 800084c:	4211      	tst	r1, r2
 800084e:	d105      	bne.n	800085c <__aeabi_dadd+0x5c0>
 8000850:	4663      	mov	r3, ip
 8000852:	08d8      	lsrs	r0, r3, #3
 8000854:	4653      	mov	r3, sl
 8000856:	000c      	movs	r4, r1
 8000858:	075b      	lsls	r3, r3, #29
 800085a:	4318      	orrs	r0, r3
 800085c:	0f42      	lsrs	r2, r0, #29
 800085e:	00c0      	lsls	r0, r0, #3
 8000860:	08c0      	lsrs	r0, r0, #3
 8000862:	0752      	lsls	r2, r2, #29
 8000864:	4302      	orrs	r2, r0
 8000866:	e6e7      	b.n	8000638 <__aeabi_dadd+0x39c>
 8000868:	2a00      	cmp	r2, #0
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x5d2>
 800086c:	e72d      	b.n	80006ca <__aeabi_dadd+0x42e>
 800086e:	4663      	mov	r3, ip
 8000870:	08d8      	lsrs	r0, r3, #3
 8000872:	4653      	mov	r3, sl
 8000874:	075a      	lsls	r2, r3, #29
 8000876:	000e      	movs	r6, r1
 8000878:	4302      	orrs	r2, r0
 800087a:	08dc      	lsrs	r4, r3, #3
 800087c:	e6cc      	b.n	8000618 <__aeabi_dadd+0x37c>
 800087e:	4663      	mov	r3, ip
 8000880:	1a1d      	subs	r5, r3, r0
 8000882:	45ac      	cmp	ip, r5
 8000884:	4192      	sbcs	r2, r2
 8000886:	4653      	mov	r3, sl
 8000888:	4252      	negs	r2, r2
 800088a:	1b1c      	subs	r4, r3, r4
 800088c:	000e      	movs	r6, r1
 800088e:	4688      	mov	r8, r1
 8000890:	1aa4      	subs	r4, r4, r2
 8000892:	3701      	adds	r7, #1
 8000894:	e555      	b.n	8000342 <__aeabi_dadd+0xa6>
 8000896:	4663      	mov	r3, ip
 8000898:	08d9      	lsrs	r1, r3, #3
 800089a:	4653      	mov	r3, sl
 800089c:	075a      	lsls	r2, r3, #29
 800089e:	430a      	orrs	r2, r1
 80008a0:	08dc      	lsrs	r4, r3, #3
 80008a2:	e6c9      	b.n	8000638 <__aeabi_dadd+0x39c>
 80008a4:	4660      	mov	r0, ip
 80008a6:	4654      	mov	r4, sl
 80008a8:	e6d4      	b.n	8000654 <__aeabi_dadd+0x3b8>
 80008aa:	08c0      	lsrs	r0, r0, #3
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x616>
 80008b0:	e6bf      	b.n	8000632 <__aeabi_dadd+0x396>
 80008b2:	0762      	lsls	r2, r4, #29
 80008b4:	4310      	orrs	r0, r2
 80008b6:	2280      	movs	r2, #128	@ 0x80
 80008b8:	08e4      	lsrs	r4, r4, #3
 80008ba:	0312      	lsls	r2, r2, #12
 80008bc:	4214      	tst	r4, r2
 80008be:	d0cd      	beq.n	800085c <__aeabi_dadd+0x5c0>
 80008c0:	08dd      	lsrs	r5, r3, #3
 80008c2:	4215      	tst	r5, r2
 80008c4:	d1ca      	bne.n	800085c <__aeabi_dadd+0x5c0>
 80008c6:	4663      	mov	r3, ip
 80008c8:	08d8      	lsrs	r0, r3, #3
 80008ca:	4653      	mov	r3, sl
 80008cc:	075b      	lsls	r3, r3, #29
 80008ce:	000e      	movs	r6, r1
 80008d0:	002c      	movs	r4, r5
 80008d2:	4318      	orrs	r0, r3
 80008d4:	e7c2      	b.n	800085c <__aeabi_dadd+0x5c0>
 80008d6:	4663      	mov	r3, ip
 80008d8:	08d9      	lsrs	r1, r3, #3
 80008da:	4653      	mov	r3, sl
 80008dc:	075a      	lsls	r2, r3, #29
 80008de:	430a      	orrs	r2, r1
 80008e0:	08dc      	lsrs	r4, r3, #3
 80008e2:	e699      	b.n	8000618 <__aeabi_dadd+0x37c>
 80008e4:	4663      	mov	r3, ip
 80008e6:	08d8      	lsrs	r0, r3, #3
 80008e8:	4653      	mov	r3, sl
 80008ea:	075a      	lsls	r2, r3, #29
 80008ec:	000e      	movs	r6, r1
 80008ee:	4302      	orrs	r2, r0
 80008f0:	08dc      	lsrs	r4, r3, #3
 80008f2:	e6a1      	b.n	8000638 <__aeabi_dadd+0x39c>
 80008f4:	0011      	movs	r1, r2
 80008f6:	0027      	movs	r7, r4
 80008f8:	3920      	subs	r1, #32
 80008fa:	40cf      	lsrs	r7, r1
 80008fc:	2a20      	cmp	r2, #32
 80008fe:	d003      	beq.n	8000908 <__aeabi_dadd+0x66c>
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	1a8a      	subs	r2, r1, r2
 8000904:	4094      	lsls	r4, r2
 8000906:	4320      	orrs	r0, r4
 8000908:	1e42      	subs	r2, r0, #1
 800090a:	4190      	sbcs	r0, r2
 800090c:	0005      	movs	r5, r0
 800090e:	433d      	orrs	r5, r7
 8000910:	e651      	b.n	80005b6 <__aeabi_dadd+0x31a>
 8000912:	000c      	movs	r4, r1
 8000914:	2500      	movs	r5, #0
 8000916:	2200      	movs	r2, #0
 8000918:	e558      	b.n	80003cc <__aeabi_dadd+0x130>
 800091a:	4460      	add	r0, ip
 800091c:	4560      	cmp	r0, ip
 800091e:	4192      	sbcs	r2, r2
 8000920:	4454      	add	r4, sl
 8000922:	4252      	negs	r2, r2
 8000924:	0005      	movs	r5, r0
 8000926:	18a4      	adds	r4, r4, r2
 8000928:	e73a      	b.n	80007a0 <__aeabi_dadd+0x504>
 800092a:	4653      	mov	r3, sl
 800092c:	075a      	lsls	r2, r3, #29
 800092e:	4663      	mov	r3, ip
 8000930:	08d9      	lsrs	r1, r3, #3
 8000932:	4653      	mov	r3, sl
 8000934:	430a      	orrs	r2, r1
 8000936:	08dc      	lsrs	r4, r3, #3
 8000938:	e67e      	b.n	8000638 <__aeabi_dadd+0x39c>
 800093a:	001a      	movs	r2, r3
 800093c:	001c      	movs	r4, r3
 800093e:	432a      	orrs	r2, r5
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x6a8>
 8000942:	e6ab      	b.n	800069c <__aeabi_dadd+0x400>
 8000944:	e6c1      	b.n	80006ca <__aeabi_dadd+0x42e>
 8000946:	2120      	movs	r1, #32
 8000948:	2500      	movs	r5, #0
 800094a:	1a09      	subs	r1, r1, r0
 800094c:	e519      	b.n	8000382 <__aeabi_dadd+0xe6>
 800094e:	2200      	movs	r2, #0
 8000950:	2500      	movs	r5, #0
 8000952:	4c01      	ldr	r4, [pc, #4]	@ (8000958 <__aeabi_dadd+0x6bc>)
 8000954:	e53a      	b.n	80003cc <__aeabi_dadd+0x130>
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	000007ff 	.word	0x000007ff
 800095c:	ff7fffff 	.word	0xff7fffff
 8000960:	000007fe 	.word	0x000007fe

08000964 <__aeabi_ddiv>:
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	46de      	mov	lr, fp
 8000968:	4645      	mov	r5, r8
 800096a:	4657      	mov	r7, sl
 800096c:	464e      	mov	r6, r9
 800096e:	b5e0      	push	{r5, r6, r7, lr}
 8000970:	b087      	sub	sp, #28
 8000972:	9200      	str	r2, [sp, #0]
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	030b      	lsls	r3, r1, #12
 8000978:	0b1b      	lsrs	r3, r3, #12
 800097a:	469b      	mov	fp, r3
 800097c:	0fca      	lsrs	r2, r1, #31
 800097e:	004b      	lsls	r3, r1, #1
 8000980:	0004      	movs	r4, r0
 8000982:	4680      	mov	r8, r0
 8000984:	0d5b      	lsrs	r3, r3, #21
 8000986:	9202      	str	r2, [sp, #8]
 8000988:	d100      	bne.n	800098c <__aeabi_ddiv+0x28>
 800098a:	e16a      	b.n	8000c62 <__aeabi_ddiv+0x2fe>
 800098c:	4ad4      	ldr	r2, [pc, #848]	@ (8000ce0 <__aeabi_ddiv+0x37c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d100      	bne.n	8000994 <__aeabi_ddiv+0x30>
 8000992:	e18c      	b.n	8000cae <__aeabi_ddiv+0x34a>
 8000994:	4659      	mov	r1, fp
 8000996:	0f42      	lsrs	r2, r0, #29
 8000998:	00c9      	lsls	r1, r1, #3
 800099a:	430a      	orrs	r2, r1
 800099c:	2180      	movs	r1, #128	@ 0x80
 800099e:	0409      	lsls	r1, r1, #16
 80009a0:	4311      	orrs	r1, r2
 80009a2:	00c2      	lsls	r2, r0, #3
 80009a4:	4690      	mov	r8, r2
 80009a6:	4acf      	ldr	r2, [pc, #828]	@ (8000ce4 <__aeabi_ddiv+0x380>)
 80009a8:	4689      	mov	r9, r1
 80009aa:	4692      	mov	sl, r2
 80009ac:	449a      	add	sl, r3
 80009ae:	2300      	movs	r3, #0
 80009b0:	2400      	movs	r4, #0
 80009b2:	9303      	str	r3, [sp, #12]
 80009b4:	9e00      	ldr	r6, [sp, #0]
 80009b6:	9f01      	ldr	r7, [sp, #4]
 80009b8:	033b      	lsls	r3, r7, #12
 80009ba:	0b1b      	lsrs	r3, r3, #12
 80009bc:	469b      	mov	fp, r3
 80009be:	007b      	lsls	r3, r7, #1
 80009c0:	0030      	movs	r0, r6
 80009c2:	0d5b      	lsrs	r3, r3, #21
 80009c4:	0ffd      	lsrs	r5, r7, #31
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_ddiv+0x68>
 80009ca:	e128      	b.n	8000c1e <__aeabi_ddiv+0x2ba>
 80009cc:	4ac4      	ldr	r2, [pc, #784]	@ (8000ce0 <__aeabi_ddiv+0x37c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d100      	bne.n	80009d4 <__aeabi_ddiv+0x70>
 80009d2:	e177      	b.n	8000cc4 <__aeabi_ddiv+0x360>
 80009d4:	4659      	mov	r1, fp
 80009d6:	0f72      	lsrs	r2, r6, #29
 80009d8:	00c9      	lsls	r1, r1, #3
 80009da:	430a      	orrs	r2, r1
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	0409      	lsls	r1, r1, #16
 80009e0:	4311      	orrs	r1, r2
 80009e2:	468b      	mov	fp, r1
 80009e4:	49bf      	ldr	r1, [pc, #764]	@ (8000ce4 <__aeabi_ddiv+0x380>)
 80009e6:	00f2      	lsls	r2, r6, #3
 80009e8:	468c      	mov	ip, r1
 80009ea:	4651      	mov	r1, sl
 80009ec:	4463      	add	r3, ip
 80009ee:	1acb      	subs	r3, r1, r3
 80009f0:	469a      	mov	sl, r3
 80009f2:	2300      	movs	r3, #0
 80009f4:	9e02      	ldr	r6, [sp, #8]
 80009f6:	406e      	eors	r6, r5
 80009f8:	2c0f      	cmp	r4, #15
 80009fa:	d827      	bhi.n	8000a4c <__aeabi_ddiv+0xe8>
 80009fc:	49ba      	ldr	r1, [pc, #744]	@ (8000ce8 <__aeabi_ddiv+0x384>)
 80009fe:	00a4      	lsls	r4, r4, #2
 8000a00:	5909      	ldr	r1, [r1, r4]
 8000a02:	468f      	mov	pc, r1
 8000a04:	46cb      	mov	fp, r9
 8000a06:	4642      	mov	r2, r8
 8000a08:	9e02      	ldr	r6, [sp, #8]
 8000a0a:	9b03      	ldr	r3, [sp, #12]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d016      	beq.n	8000a3e <__aeabi_ddiv+0xda>
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d100      	bne.n	8000a16 <__aeabi_ddiv+0xb2>
 8000a14:	e2a6      	b.n	8000f64 <__aeabi_ddiv+0x600>
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d000      	beq.n	8000a1c <__aeabi_ddiv+0xb8>
 8000a1a:	e0df      	b.n	8000bdc <__aeabi_ddiv+0x278>
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2400      	movs	r4, #0
 8000a22:	4690      	mov	r8, r2
 8000a24:	051b      	lsls	r3, r3, #20
 8000a26:	4323      	orrs	r3, r4
 8000a28:	07f6      	lsls	r6, r6, #31
 8000a2a:	4333      	orrs	r3, r6
 8000a2c:	4640      	mov	r0, r8
 8000a2e:	0019      	movs	r1, r3
 8000a30:	b007      	add	sp, #28
 8000a32:	bcf0      	pop	{r4, r5, r6, r7}
 8000a34:	46bb      	mov	fp, r7
 8000a36:	46b2      	mov	sl, r6
 8000a38:	46a9      	mov	r9, r5
 8000a3a:	46a0      	mov	r8, r4
 8000a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2400      	movs	r4, #0
 8000a42:	4690      	mov	r8, r2
 8000a44:	4ba6      	ldr	r3, [pc, #664]	@ (8000ce0 <__aeabi_ddiv+0x37c>)
 8000a46:	e7ed      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000a48:	002e      	movs	r6, r5
 8000a4a:	e7df      	b.n	8000a0c <__aeabi_ddiv+0xa8>
 8000a4c:	45cb      	cmp	fp, r9
 8000a4e:	d200      	bcs.n	8000a52 <__aeabi_ddiv+0xee>
 8000a50:	e1d4      	b.n	8000dfc <__aeabi_ddiv+0x498>
 8000a52:	d100      	bne.n	8000a56 <__aeabi_ddiv+0xf2>
 8000a54:	e1cf      	b.n	8000df6 <__aeabi_ddiv+0x492>
 8000a56:	2301      	movs	r3, #1
 8000a58:	425b      	negs	r3, r3
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	4644      	mov	r4, r8
 8000a5e:	4648      	mov	r0, r9
 8000a60:	2700      	movs	r7, #0
 8000a62:	44e2      	add	sl, ip
 8000a64:	465b      	mov	r3, fp
 8000a66:	0e15      	lsrs	r5, r2, #24
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	431d      	orrs	r5, r3
 8000a6c:	0c19      	lsrs	r1, r3, #16
 8000a6e:	042b      	lsls	r3, r5, #16
 8000a70:	0212      	lsls	r2, r2, #8
 8000a72:	9500      	str	r5, [sp, #0]
 8000a74:	0c1d      	lsrs	r5, r3, #16
 8000a76:	4691      	mov	r9, r2
 8000a78:	9102      	str	r1, [sp, #8]
 8000a7a:	9503      	str	r5, [sp, #12]
 8000a7c:	f7ff fbca 	bl	8000214 <__aeabi_uidivmod>
 8000a80:	0002      	movs	r2, r0
 8000a82:	436a      	muls	r2, r5
 8000a84:	040b      	lsls	r3, r1, #16
 8000a86:	0c21      	lsrs	r1, r4, #16
 8000a88:	4680      	mov	r8, r0
 8000a8a:	4319      	orrs	r1, r3
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	d909      	bls.n	8000aa4 <__aeabi_ddiv+0x140>
 8000a90:	9d00      	ldr	r5, [sp, #0]
 8000a92:	2301      	movs	r3, #1
 8000a94:	46ac      	mov	ip, r5
 8000a96:	425b      	negs	r3, r3
 8000a98:	4461      	add	r1, ip
 8000a9a:	469c      	mov	ip, r3
 8000a9c:	44e0      	add	r8, ip
 8000a9e:	428d      	cmp	r5, r1
 8000aa0:	d800      	bhi.n	8000aa4 <__aeabi_ddiv+0x140>
 8000aa2:	e1fb      	b.n	8000e9c <__aeabi_ddiv+0x538>
 8000aa4:	1a88      	subs	r0, r1, r2
 8000aa6:	9902      	ldr	r1, [sp, #8]
 8000aa8:	f7ff fbb4 	bl	8000214 <__aeabi_uidivmod>
 8000aac:	9a03      	ldr	r2, [sp, #12]
 8000aae:	0424      	lsls	r4, r4, #16
 8000ab0:	4342      	muls	r2, r0
 8000ab2:	0409      	lsls	r1, r1, #16
 8000ab4:	0c24      	lsrs	r4, r4, #16
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	430c      	orrs	r4, r1
 8000aba:	42a2      	cmp	r2, r4
 8000abc:	d906      	bls.n	8000acc <__aeabi_ddiv+0x168>
 8000abe:	9900      	ldr	r1, [sp, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4464      	add	r4, ip
 8000ac6:	42a1      	cmp	r1, r4
 8000ac8:	d800      	bhi.n	8000acc <__aeabi_ddiv+0x168>
 8000aca:	e1e1      	b.n	8000e90 <__aeabi_ddiv+0x52c>
 8000acc:	1aa0      	subs	r0, r4, r2
 8000ace:	4642      	mov	r2, r8
 8000ad0:	0412      	lsls	r2, r2, #16
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	4693      	mov	fp, r2
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	4659      	mov	r1, fp
 8000ada:	0c1b      	lsrs	r3, r3, #16
 8000adc:	001d      	movs	r5, r3
 8000ade:	9304      	str	r3, [sp, #16]
 8000ae0:	040b      	lsls	r3, r1, #16
 8000ae2:	4649      	mov	r1, r9
 8000ae4:	0409      	lsls	r1, r1, #16
 8000ae6:	0c09      	lsrs	r1, r1, #16
 8000ae8:	000c      	movs	r4, r1
 8000aea:	0c1b      	lsrs	r3, r3, #16
 8000aec:	435c      	muls	r4, r3
 8000aee:	0c12      	lsrs	r2, r2, #16
 8000af0:	436b      	muls	r3, r5
 8000af2:	4688      	mov	r8, r1
 8000af4:	4351      	muls	r1, r2
 8000af6:	436a      	muls	r2, r5
 8000af8:	0c25      	lsrs	r5, r4, #16
 8000afa:	46ac      	mov	ip, r5
 8000afc:	185b      	adds	r3, r3, r1
 8000afe:	4463      	add	r3, ip
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d903      	bls.n	8000b0c <__aeabi_ddiv+0x1a8>
 8000b04:	2180      	movs	r1, #128	@ 0x80
 8000b06:	0249      	lsls	r1, r1, #9
 8000b08:	468c      	mov	ip, r1
 8000b0a:	4462      	add	r2, ip
 8000b0c:	0c19      	lsrs	r1, r3, #16
 8000b0e:	0424      	lsls	r4, r4, #16
 8000b10:	041b      	lsls	r3, r3, #16
 8000b12:	0c24      	lsrs	r4, r4, #16
 8000b14:	188a      	adds	r2, r1, r2
 8000b16:	191c      	adds	r4, r3, r4
 8000b18:	4290      	cmp	r0, r2
 8000b1a:	d302      	bcc.n	8000b22 <__aeabi_ddiv+0x1be>
 8000b1c:	d116      	bne.n	8000b4c <__aeabi_ddiv+0x1e8>
 8000b1e:	42a7      	cmp	r7, r4
 8000b20:	d214      	bcs.n	8000b4c <__aeabi_ddiv+0x1e8>
 8000b22:	465b      	mov	r3, fp
 8000b24:	9d00      	ldr	r5, [sp, #0]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	444f      	add	r7, r9
 8000b2a:	9305      	str	r3, [sp, #20]
 8000b2c:	454f      	cmp	r7, r9
 8000b2e:	419b      	sbcs	r3, r3
 8000b30:	46ac      	mov	ip, r5
 8000b32:	425b      	negs	r3, r3
 8000b34:	4463      	add	r3, ip
 8000b36:	18c0      	adds	r0, r0, r3
 8000b38:	4285      	cmp	r5, r0
 8000b3a:	d300      	bcc.n	8000b3e <__aeabi_ddiv+0x1da>
 8000b3c:	e1a1      	b.n	8000e82 <__aeabi_ddiv+0x51e>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	d900      	bls.n	8000b44 <__aeabi_ddiv+0x1e0>
 8000b42:	e1f6      	b.n	8000f32 <__aeabi_ddiv+0x5ce>
 8000b44:	d100      	bne.n	8000b48 <__aeabi_ddiv+0x1e4>
 8000b46:	e1f1      	b.n	8000f2c <__aeabi_ddiv+0x5c8>
 8000b48:	9b05      	ldr	r3, [sp, #20]
 8000b4a:	469b      	mov	fp, r3
 8000b4c:	1b3c      	subs	r4, r7, r4
 8000b4e:	42a7      	cmp	r7, r4
 8000b50:	41bf      	sbcs	r7, r7
 8000b52:	9d00      	ldr	r5, [sp, #0]
 8000b54:	1a80      	subs	r0, r0, r2
 8000b56:	427f      	negs	r7, r7
 8000b58:	1bc0      	subs	r0, r0, r7
 8000b5a:	4285      	cmp	r5, r0
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_ddiv+0x1fc>
 8000b5e:	e1d0      	b.n	8000f02 <__aeabi_ddiv+0x59e>
 8000b60:	9902      	ldr	r1, [sp, #8]
 8000b62:	f7ff fb57 	bl	8000214 <__aeabi_uidivmod>
 8000b66:	9a03      	ldr	r2, [sp, #12]
 8000b68:	040b      	lsls	r3, r1, #16
 8000b6a:	4342      	muls	r2, r0
 8000b6c:	0c21      	lsrs	r1, r4, #16
 8000b6e:	0007      	movs	r7, r0
 8000b70:	4319      	orrs	r1, r3
 8000b72:	428a      	cmp	r2, r1
 8000b74:	d900      	bls.n	8000b78 <__aeabi_ddiv+0x214>
 8000b76:	e178      	b.n	8000e6a <__aeabi_ddiv+0x506>
 8000b78:	1a88      	subs	r0, r1, r2
 8000b7a:	9902      	ldr	r1, [sp, #8]
 8000b7c:	f7ff fb4a 	bl	8000214 <__aeabi_uidivmod>
 8000b80:	9a03      	ldr	r2, [sp, #12]
 8000b82:	0424      	lsls	r4, r4, #16
 8000b84:	4342      	muls	r2, r0
 8000b86:	0409      	lsls	r1, r1, #16
 8000b88:	0c24      	lsrs	r4, r4, #16
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	430c      	orrs	r4, r1
 8000b8e:	42a2      	cmp	r2, r4
 8000b90:	d900      	bls.n	8000b94 <__aeabi_ddiv+0x230>
 8000b92:	e15d      	b.n	8000e50 <__aeabi_ddiv+0x4ec>
 8000b94:	4641      	mov	r1, r8
 8000b96:	1aa4      	subs	r4, r4, r2
 8000b98:	043a      	lsls	r2, r7, #16
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	9d04      	ldr	r5, [sp, #16]
 8000b9e:	0413      	lsls	r3, r2, #16
 8000ba0:	0c1b      	lsrs	r3, r3, #16
 8000ba2:	4359      	muls	r1, r3
 8000ba4:	4647      	mov	r7, r8
 8000ba6:	436b      	muls	r3, r5
 8000ba8:	469c      	mov	ip, r3
 8000baa:	0c10      	lsrs	r0, r2, #16
 8000bac:	4347      	muls	r7, r0
 8000bae:	0c0b      	lsrs	r3, r1, #16
 8000bb0:	44bc      	add	ip, r7
 8000bb2:	4463      	add	r3, ip
 8000bb4:	4368      	muls	r0, r5
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d903      	bls.n	8000bc2 <__aeabi_ddiv+0x25e>
 8000bba:	2580      	movs	r5, #128	@ 0x80
 8000bbc:	026d      	lsls	r5, r5, #9
 8000bbe:	46ac      	mov	ip, r5
 8000bc0:	4460      	add	r0, ip
 8000bc2:	0c1f      	lsrs	r7, r3, #16
 8000bc4:	0409      	lsls	r1, r1, #16
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	0c09      	lsrs	r1, r1, #16
 8000bca:	183f      	adds	r7, r7, r0
 8000bcc:	185b      	adds	r3, r3, r1
 8000bce:	42bc      	cmp	r4, r7
 8000bd0:	d200      	bcs.n	8000bd4 <__aeabi_ddiv+0x270>
 8000bd2:	e102      	b.n	8000dda <__aeabi_ddiv+0x476>
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x274>
 8000bd6:	e0fd      	b.n	8000dd4 <__aeabi_ddiv+0x470>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	4b43      	ldr	r3, [pc, #268]	@ (8000cec <__aeabi_ddiv+0x388>)
 8000bde:	4453      	add	r3, sl
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dc00      	bgt.n	8000be6 <__aeabi_ddiv+0x282>
 8000be4:	e0ae      	b.n	8000d44 <__aeabi_ddiv+0x3e0>
 8000be6:	0751      	lsls	r1, r2, #29
 8000be8:	d000      	beq.n	8000bec <__aeabi_ddiv+0x288>
 8000bea:	e198      	b.n	8000f1e <__aeabi_ddiv+0x5ba>
 8000bec:	4659      	mov	r1, fp
 8000bee:	01c9      	lsls	r1, r1, #7
 8000bf0:	d506      	bpl.n	8000c00 <__aeabi_ddiv+0x29c>
 8000bf2:	4659      	mov	r1, fp
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <__aeabi_ddiv+0x38c>)
 8000bf6:	4019      	ands	r1, r3
 8000bf8:	2380      	movs	r3, #128	@ 0x80
 8000bfa:	468b      	mov	fp, r1
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4453      	add	r3, sl
 8000c00:	493c      	ldr	r1, [pc, #240]	@ (8000cf4 <__aeabi_ddiv+0x390>)
 8000c02:	428b      	cmp	r3, r1
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_ddiv+0x2a4>
 8000c06:	e71a      	b.n	8000a3e <__aeabi_ddiv+0xda>
 8000c08:	4659      	mov	r1, fp
 8000c0a:	08d2      	lsrs	r2, r2, #3
 8000c0c:	0749      	lsls	r1, r1, #29
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	465a      	mov	r2, fp
 8000c12:	055b      	lsls	r3, r3, #21
 8000c14:	0254      	lsls	r4, r2, #9
 8000c16:	4688      	mov	r8, r1
 8000c18:	0b24      	lsrs	r4, r4, #12
 8000c1a:	0d5b      	lsrs	r3, r3, #21
 8000c1c:	e702      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000c1e:	465a      	mov	r2, fp
 8000c20:	9b00      	ldr	r3, [sp, #0]
 8000c22:	431a      	orrs	r2, r3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_ddiv+0x2c4>
 8000c26:	e07e      	b.n	8000d26 <__aeabi_ddiv+0x3c2>
 8000c28:	465b      	mov	r3, fp
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_ddiv+0x2cc>
 8000c2e:	e100      	b.n	8000e32 <__aeabi_ddiv+0x4ce>
 8000c30:	4658      	mov	r0, fp
 8000c32:	f001 f9cb 	bl	8001fcc <__clzsi2>
 8000c36:	0002      	movs	r2, r0
 8000c38:	0003      	movs	r3, r0
 8000c3a:	3a0b      	subs	r2, #11
 8000c3c:	271d      	movs	r7, #29
 8000c3e:	9e00      	ldr	r6, [sp, #0]
 8000c40:	1aba      	subs	r2, r7, r2
 8000c42:	0019      	movs	r1, r3
 8000c44:	4658      	mov	r0, fp
 8000c46:	40d6      	lsrs	r6, r2
 8000c48:	3908      	subs	r1, #8
 8000c4a:	4088      	lsls	r0, r1
 8000c4c:	0032      	movs	r2, r6
 8000c4e:	4302      	orrs	r2, r0
 8000c50:	4693      	mov	fp, r2
 8000c52:	9a00      	ldr	r2, [sp, #0]
 8000c54:	408a      	lsls	r2, r1
 8000c56:	4928      	ldr	r1, [pc, #160]	@ (8000cf8 <__aeabi_ddiv+0x394>)
 8000c58:	4453      	add	r3, sl
 8000c5a:	468a      	mov	sl, r1
 8000c5c:	449a      	add	sl, r3
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e6c8      	b.n	80009f4 <__aeabi_ddiv+0x90>
 8000c62:	465b      	mov	r3, fp
 8000c64:	4303      	orrs	r3, r0
 8000c66:	4699      	mov	r9, r3
 8000c68:	d056      	beq.n	8000d18 <__aeabi_ddiv+0x3b4>
 8000c6a:	465b      	mov	r3, fp
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_ddiv+0x30e>
 8000c70:	e0cd      	b.n	8000e0e <__aeabi_ddiv+0x4aa>
 8000c72:	4658      	mov	r0, fp
 8000c74:	f001 f9aa 	bl	8001fcc <__clzsi2>
 8000c78:	230b      	movs	r3, #11
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	469c      	mov	ip, r3
 8000c7e:	0002      	movs	r2, r0
 8000c80:	4484      	add	ip, r0
 8000c82:	4666      	mov	r6, ip
 8000c84:	231d      	movs	r3, #29
 8000c86:	1b9b      	subs	r3, r3, r6
 8000c88:	0026      	movs	r6, r4
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	4658      	mov	r0, fp
 8000c8e:	40de      	lsrs	r6, r3
 8000c90:	3908      	subs	r1, #8
 8000c92:	4088      	lsls	r0, r1
 8000c94:	0033      	movs	r3, r6
 8000c96:	4303      	orrs	r3, r0
 8000c98:	4699      	mov	r9, r3
 8000c9a:	0023      	movs	r3, r4
 8000c9c:	408b      	lsls	r3, r1
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <__aeabi_ddiv+0x398>)
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9303      	str	r3, [sp, #12]
 8000cac:	e682      	b.n	80009b4 <__aeabi_ddiv+0x50>
 8000cae:	465a      	mov	r2, fp
 8000cb0:	4302      	orrs	r2, r0
 8000cb2:	4691      	mov	r9, r2
 8000cb4:	d12a      	bne.n	8000d0c <__aeabi_ddiv+0x3a8>
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	469a      	mov	sl, r3
 8000cba:	2302      	movs	r3, #2
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2408      	movs	r4, #8
 8000cc0:	9303      	str	r3, [sp, #12]
 8000cc2:	e677      	b.n	80009b4 <__aeabi_ddiv+0x50>
 8000cc4:	465a      	mov	r2, fp
 8000cc6:	9b00      	ldr	r3, [sp, #0]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <__aeabi_ddiv+0x39c>)
 8000ccc:	469c      	mov	ip, r3
 8000cce:	44e2      	add	sl, ip
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d117      	bne.n	8000d04 <__aeabi_ddiv+0x3a0>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	431c      	orrs	r4, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	469b      	mov	fp, r3
 8000cdc:	3302      	adds	r3, #2
 8000cde:	e689      	b.n	80009f4 <__aeabi_ddiv+0x90>
 8000ce0:	000007ff 	.word	0x000007ff
 8000ce4:	fffffc01 	.word	0xfffffc01
 8000ce8:	08005870 	.word	0x08005870
 8000cec:	000003ff 	.word	0x000003ff
 8000cf0:	feffffff 	.word	0xfeffffff
 8000cf4:	000007fe 	.word	0x000007fe
 8000cf8:	000003f3 	.word	0x000003f3
 8000cfc:	fffffc0d 	.word	0xfffffc0d
 8000d00:	fffff801 	.word	0xfffff801
 8000d04:	2303      	movs	r3, #3
 8000d06:	0032      	movs	r2, r6
 8000d08:	431c      	orrs	r4, r3
 8000d0a:	e673      	b.n	80009f4 <__aeabi_ddiv+0x90>
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	2303      	movs	r3, #3
 8000d10:	46d9      	mov	r9, fp
 8000d12:	240c      	movs	r4, #12
 8000d14:	9303      	str	r3, [sp, #12]
 8000d16:	e64d      	b.n	80009b4 <__aeabi_ddiv+0x50>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	469a      	mov	sl, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	2404      	movs	r4, #4
 8000d22:	9303      	str	r3, [sp, #12]
 8000d24:	e646      	b.n	80009b4 <__aeabi_ddiv+0x50>
 8000d26:	2301      	movs	r3, #1
 8000d28:	431c      	orrs	r4, r3
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	469b      	mov	fp, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	e660      	b.n	80009f4 <__aeabi_ddiv+0x90>
 8000d32:	2300      	movs	r3, #0
 8000d34:	2480      	movs	r4, #128	@ 0x80
 8000d36:	4698      	mov	r8, r3
 8000d38:	2600      	movs	r6, #0
 8000d3a:	4b92      	ldr	r3, [pc, #584]	@ (8000f84 <__aeabi_ddiv+0x620>)
 8000d3c:	0324      	lsls	r4, r4, #12
 8000d3e:	e671      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000d40:	2201      	movs	r2, #1
 8000d42:	4252      	negs	r2, r2
 8000d44:	2101      	movs	r1, #1
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	2938      	cmp	r1, #56	@ 0x38
 8000d4a:	dd00      	ble.n	8000d4e <__aeabi_ddiv+0x3ea>
 8000d4c:	e666      	b.n	8000a1c <__aeabi_ddiv+0xb8>
 8000d4e:	291f      	cmp	r1, #31
 8000d50:	dc00      	bgt.n	8000d54 <__aeabi_ddiv+0x3f0>
 8000d52:	e0ab      	b.n	8000eac <__aeabi_ddiv+0x548>
 8000d54:	201f      	movs	r0, #31
 8000d56:	4240      	negs	r0, r0
 8000d58:	1ac3      	subs	r3, r0, r3
 8000d5a:	4658      	mov	r0, fp
 8000d5c:	40d8      	lsrs	r0, r3
 8000d5e:	0003      	movs	r3, r0
 8000d60:	2920      	cmp	r1, #32
 8000d62:	d004      	beq.n	8000d6e <__aeabi_ddiv+0x40a>
 8000d64:	4658      	mov	r0, fp
 8000d66:	4988      	ldr	r1, [pc, #544]	@ (8000f88 <__aeabi_ddiv+0x624>)
 8000d68:	4451      	add	r1, sl
 8000d6a:	4088      	lsls	r0, r1
 8000d6c:	4302      	orrs	r2, r0
 8000d6e:	1e51      	subs	r1, r2, #1
 8000d70:	418a      	sbcs	r2, r1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	2307      	movs	r3, #7
 8000d76:	0019      	movs	r1, r3
 8000d78:	2400      	movs	r4, #0
 8000d7a:	4011      	ands	r1, r2
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	d00c      	beq.n	8000d9a <__aeabi_ddiv+0x436>
 8000d80:	230f      	movs	r3, #15
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d100      	bne.n	8000d8a <__aeabi_ddiv+0x426>
 8000d88:	e0f9      	b.n	8000f7e <__aeabi_ddiv+0x61a>
 8000d8a:	1d11      	adds	r1, r2, #4
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	419b      	sbcs	r3, r3
 8000d90:	000a      	movs	r2, r1
 8000d92:	425b      	negs	r3, r3
 8000d94:	0759      	lsls	r1, r3, #29
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	0b1c      	lsrs	r4, r3, #12
 8000d9a:	08d2      	lsrs	r2, r2, #3
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	4690      	mov	r8, r2
 8000da0:	2300      	movs	r3, #0
 8000da2:	e63f      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000da4:	2480      	movs	r4, #128	@ 0x80
 8000da6:	464b      	mov	r3, r9
 8000da8:	0324      	lsls	r4, r4, #12
 8000daa:	4223      	tst	r3, r4
 8000dac:	d009      	beq.n	8000dc2 <__aeabi_ddiv+0x45e>
 8000dae:	465b      	mov	r3, fp
 8000db0:	4223      	tst	r3, r4
 8000db2:	d106      	bne.n	8000dc2 <__aeabi_ddiv+0x45e>
 8000db4:	431c      	orrs	r4, r3
 8000db6:	0324      	lsls	r4, r4, #12
 8000db8:	002e      	movs	r6, r5
 8000dba:	4690      	mov	r8, r2
 8000dbc:	4b71      	ldr	r3, [pc, #452]	@ (8000f84 <__aeabi_ddiv+0x620>)
 8000dbe:	0b24      	lsrs	r4, r4, #12
 8000dc0:	e630      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000dc2:	2480      	movs	r4, #128	@ 0x80
 8000dc4:	464b      	mov	r3, r9
 8000dc6:	0324      	lsls	r4, r4, #12
 8000dc8:	431c      	orrs	r4, r3
 8000dca:	0324      	lsls	r4, r4, #12
 8000dcc:	9e02      	ldr	r6, [sp, #8]
 8000dce:	4b6d      	ldr	r3, [pc, #436]	@ (8000f84 <__aeabi_ddiv+0x620>)
 8000dd0:	0b24      	lsrs	r4, r4, #12
 8000dd2:	e627      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0x476>
 8000dd8:	e700      	b.n	8000bdc <__aeabi_ddiv+0x278>
 8000dda:	9800      	ldr	r0, [sp, #0]
 8000ddc:	1e51      	subs	r1, r2, #1
 8000dde:	4684      	mov	ip, r0
 8000de0:	4464      	add	r4, ip
 8000de2:	4284      	cmp	r4, r0
 8000de4:	d200      	bcs.n	8000de8 <__aeabi_ddiv+0x484>
 8000de6:	e084      	b.n	8000ef2 <__aeabi_ddiv+0x58e>
 8000de8:	42bc      	cmp	r4, r7
 8000dea:	d200      	bcs.n	8000dee <__aeabi_ddiv+0x48a>
 8000dec:	e0ae      	b.n	8000f4c <__aeabi_ddiv+0x5e8>
 8000dee:	d100      	bne.n	8000df2 <__aeabi_ddiv+0x48e>
 8000df0:	e0c1      	b.n	8000f76 <__aeabi_ddiv+0x612>
 8000df2:	000a      	movs	r2, r1
 8000df4:	e6f0      	b.n	8000bd8 <__aeabi_ddiv+0x274>
 8000df6:	4542      	cmp	r2, r8
 8000df8:	d900      	bls.n	8000dfc <__aeabi_ddiv+0x498>
 8000dfa:	e62c      	b.n	8000a56 <__aeabi_ddiv+0xf2>
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	07dc      	lsls	r4, r3, #31
 8000e00:	0858      	lsrs	r0, r3, #1
 8000e02:	4643      	mov	r3, r8
 8000e04:	085b      	lsrs	r3, r3, #1
 8000e06:	431c      	orrs	r4, r3
 8000e08:	4643      	mov	r3, r8
 8000e0a:	07df      	lsls	r7, r3, #31
 8000e0c:	e62a      	b.n	8000a64 <__aeabi_ddiv+0x100>
 8000e0e:	f001 f8dd 	bl	8001fcc <__clzsi2>
 8000e12:	2315      	movs	r3, #21
 8000e14:	469c      	mov	ip, r3
 8000e16:	4484      	add	ip, r0
 8000e18:	0002      	movs	r2, r0
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	3220      	adds	r2, #32
 8000e1e:	2b1c      	cmp	r3, #28
 8000e20:	dc00      	bgt.n	8000e24 <__aeabi_ddiv+0x4c0>
 8000e22:	e72e      	b.n	8000c82 <__aeabi_ddiv+0x31e>
 8000e24:	0023      	movs	r3, r4
 8000e26:	3808      	subs	r0, #8
 8000e28:	4083      	lsls	r3, r0
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4698      	mov	r8, r3
 8000e30:	e736      	b.n	8000ca0 <__aeabi_ddiv+0x33c>
 8000e32:	f001 f8cb 	bl	8001fcc <__clzsi2>
 8000e36:	0002      	movs	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	3215      	adds	r2, #21
 8000e3c:	3320      	adds	r3, #32
 8000e3e:	2a1c      	cmp	r2, #28
 8000e40:	dc00      	bgt.n	8000e44 <__aeabi_ddiv+0x4e0>
 8000e42:	e6fb      	b.n	8000c3c <__aeabi_ddiv+0x2d8>
 8000e44:	9900      	ldr	r1, [sp, #0]
 8000e46:	3808      	subs	r0, #8
 8000e48:	4081      	lsls	r1, r0
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	468b      	mov	fp, r1
 8000e4e:	e702      	b.n	8000c56 <__aeabi_ddiv+0x2f2>
 8000e50:	9900      	ldr	r1, [sp, #0]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	468c      	mov	ip, r1
 8000e56:	4464      	add	r4, ip
 8000e58:	42a1      	cmp	r1, r4
 8000e5a:	d900      	bls.n	8000e5e <__aeabi_ddiv+0x4fa>
 8000e5c:	e69a      	b.n	8000b94 <__aeabi_ddiv+0x230>
 8000e5e:	42a2      	cmp	r2, r4
 8000e60:	d800      	bhi.n	8000e64 <__aeabi_ddiv+0x500>
 8000e62:	e697      	b.n	8000b94 <__aeabi_ddiv+0x230>
 8000e64:	1e83      	subs	r3, r0, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	e694      	b.n	8000b94 <__aeabi_ddiv+0x230>
 8000e6a:	46ac      	mov	ip, r5
 8000e6c:	4461      	add	r1, ip
 8000e6e:	3f01      	subs	r7, #1
 8000e70:	428d      	cmp	r5, r1
 8000e72:	d900      	bls.n	8000e76 <__aeabi_ddiv+0x512>
 8000e74:	e680      	b.n	8000b78 <__aeabi_ddiv+0x214>
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d800      	bhi.n	8000e7c <__aeabi_ddiv+0x518>
 8000e7a:	e67d      	b.n	8000b78 <__aeabi_ddiv+0x214>
 8000e7c:	1e87      	subs	r7, r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e67a      	b.n	8000b78 <__aeabi_ddiv+0x214>
 8000e82:	4285      	cmp	r5, r0
 8000e84:	d000      	beq.n	8000e88 <__aeabi_ddiv+0x524>
 8000e86:	e65f      	b.n	8000b48 <__aeabi_ddiv+0x1e4>
 8000e88:	45b9      	cmp	r9, r7
 8000e8a:	d900      	bls.n	8000e8e <__aeabi_ddiv+0x52a>
 8000e8c:	e65c      	b.n	8000b48 <__aeabi_ddiv+0x1e4>
 8000e8e:	e656      	b.n	8000b3e <__aeabi_ddiv+0x1da>
 8000e90:	42a2      	cmp	r2, r4
 8000e92:	d800      	bhi.n	8000e96 <__aeabi_ddiv+0x532>
 8000e94:	e61a      	b.n	8000acc <__aeabi_ddiv+0x168>
 8000e96:	1e83      	subs	r3, r0, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	e617      	b.n	8000acc <__aeabi_ddiv+0x168>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d800      	bhi.n	8000ea2 <__aeabi_ddiv+0x53e>
 8000ea0:	e600      	b.n	8000aa4 <__aeabi_ddiv+0x140>
 8000ea2:	46ac      	mov	ip, r5
 8000ea4:	1e83      	subs	r3, r0, #2
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	4461      	add	r1, ip
 8000eaa:	e5fb      	b.n	8000aa4 <__aeabi_ddiv+0x140>
 8000eac:	4837      	ldr	r0, [pc, #220]	@ (8000f8c <__aeabi_ddiv+0x628>)
 8000eae:	0014      	movs	r4, r2
 8000eb0:	4450      	add	r0, sl
 8000eb2:	4082      	lsls	r2, r0
 8000eb4:	465b      	mov	r3, fp
 8000eb6:	0017      	movs	r7, r2
 8000eb8:	4083      	lsls	r3, r0
 8000eba:	40cc      	lsrs	r4, r1
 8000ebc:	1e7a      	subs	r2, r7, #1
 8000ebe:	4197      	sbcs	r7, r2
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	433b      	orrs	r3, r7
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	465b      	mov	r3, fp
 8000ec8:	40cb      	lsrs	r3, r1
 8000eca:	0751      	lsls	r1, r2, #29
 8000ecc:	d009      	beq.n	8000ee2 <__aeabi_ddiv+0x57e>
 8000ece:	210f      	movs	r1, #15
 8000ed0:	4011      	ands	r1, r2
 8000ed2:	2904      	cmp	r1, #4
 8000ed4:	d005      	beq.n	8000ee2 <__aeabi_ddiv+0x57e>
 8000ed6:	1d11      	adds	r1, r2, #4
 8000ed8:	4291      	cmp	r1, r2
 8000eda:	4192      	sbcs	r2, r2
 8000edc:	4252      	negs	r2, r2
 8000ede:	189b      	adds	r3, r3, r2
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	0219      	lsls	r1, r3, #8
 8000ee4:	d400      	bmi.n	8000ee8 <__aeabi_ddiv+0x584>
 8000ee6:	e755      	b.n	8000d94 <__aeabi_ddiv+0x430>
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2301      	movs	r3, #1
 8000eec:	2400      	movs	r4, #0
 8000eee:	4690      	mov	r8, r2
 8000ef0:	e598      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	42bc      	cmp	r4, r7
 8000ef6:	d000      	beq.n	8000efa <__aeabi_ddiv+0x596>
 8000ef8:	e66e      	b.n	8000bd8 <__aeabi_ddiv+0x274>
 8000efa:	454b      	cmp	r3, r9
 8000efc:	d000      	beq.n	8000f00 <__aeabi_ddiv+0x59c>
 8000efe:	e66b      	b.n	8000bd8 <__aeabi_ddiv+0x274>
 8000f00:	e66c      	b.n	8000bdc <__aeabi_ddiv+0x278>
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <__aeabi_ddiv+0x62c>)
 8000f04:	4a23      	ldr	r2, [pc, #140]	@ (8000f94 <__aeabi_ddiv+0x630>)
 8000f06:	4453      	add	r3, sl
 8000f08:	4592      	cmp	sl, r2
 8000f0a:	da00      	bge.n	8000f0e <__aeabi_ddiv+0x5aa>
 8000f0c:	e718      	b.n	8000d40 <__aeabi_ddiv+0x3dc>
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4249      	negs	r1, r1
 8000f12:	1d0a      	adds	r2, r1, #4
 8000f14:	428a      	cmp	r2, r1
 8000f16:	4189      	sbcs	r1, r1
 8000f18:	4249      	negs	r1, r1
 8000f1a:	448b      	add	fp, r1
 8000f1c:	e666      	b.n	8000bec <__aeabi_ddiv+0x288>
 8000f1e:	210f      	movs	r1, #15
 8000f20:	4011      	ands	r1, r2
 8000f22:	2904      	cmp	r1, #4
 8000f24:	d100      	bne.n	8000f28 <__aeabi_ddiv+0x5c4>
 8000f26:	e661      	b.n	8000bec <__aeabi_ddiv+0x288>
 8000f28:	0011      	movs	r1, r2
 8000f2a:	e7f2      	b.n	8000f12 <__aeabi_ddiv+0x5ae>
 8000f2c:	42bc      	cmp	r4, r7
 8000f2e:	d800      	bhi.n	8000f32 <__aeabi_ddiv+0x5ce>
 8000f30:	e60a      	b.n	8000b48 <__aeabi_ddiv+0x1e4>
 8000f32:	2302      	movs	r3, #2
 8000f34:	425b      	negs	r3, r3
 8000f36:	469c      	mov	ip, r3
 8000f38:	9900      	ldr	r1, [sp, #0]
 8000f3a:	444f      	add	r7, r9
 8000f3c:	454f      	cmp	r7, r9
 8000f3e:	419b      	sbcs	r3, r3
 8000f40:	44e3      	add	fp, ip
 8000f42:	468c      	mov	ip, r1
 8000f44:	425b      	negs	r3, r3
 8000f46:	4463      	add	r3, ip
 8000f48:	18c0      	adds	r0, r0, r3
 8000f4a:	e5ff      	b.n	8000b4c <__aeabi_ddiv+0x1e8>
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	9d00      	ldr	r5, [sp, #0]
 8000f50:	0048      	lsls	r0, r1, #1
 8000f52:	4548      	cmp	r0, r9
 8000f54:	4189      	sbcs	r1, r1
 8000f56:	46ac      	mov	ip, r5
 8000f58:	4249      	negs	r1, r1
 8000f5a:	4461      	add	r1, ip
 8000f5c:	4681      	mov	r9, r0
 8000f5e:	3a02      	subs	r2, #2
 8000f60:	1864      	adds	r4, r4, r1
 8000f62:	e7c7      	b.n	8000ef4 <__aeabi_ddiv+0x590>
 8000f64:	2480      	movs	r4, #128	@ 0x80
 8000f66:	465b      	mov	r3, fp
 8000f68:	0324      	lsls	r4, r4, #12
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	0324      	lsls	r4, r4, #12
 8000f6e:	4690      	mov	r8, r2
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__aeabi_ddiv+0x620>)
 8000f72:	0b24      	lsrs	r4, r4, #12
 8000f74:	e556      	b.n	8000a24 <__aeabi_ddiv+0xc0>
 8000f76:	4599      	cmp	r9, r3
 8000f78:	d3e8      	bcc.n	8000f4c <__aeabi_ddiv+0x5e8>
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	e7bd      	b.n	8000efa <__aeabi_ddiv+0x596>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e708      	b.n	8000d94 <__aeabi_ddiv+0x430>
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	000007ff 	.word	0x000007ff
 8000f88:	0000043e 	.word	0x0000043e
 8000f8c:	0000041e 	.word	0x0000041e
 8000f90:	000003ff 	.word	0x000003ff
 8000f94:	fffffc02 	.word	0xfffffc02

08000f98 <__eqdf2>:
 8000f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9a:	4657      	mov	r7, sl
 8000f9c:	46de      	mov	lr, fp
 8000f9e:	464e      	mov	r6, r9
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	b5e0      	push	{r5, r6, r7, lr}
 8000fa4:	000d      	movs	r5, r1
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	0fe8      	lsrs	r0, r5, #31
 8000faa:	4683      	mov	fp, r0
 8000fac:	0309      	lsls	r1, r1, #12
 8000fae:	0fd8      	lsrs	r0, r3, #31
 8000fb0:	0b09      	lsrs	r1, r1, #12
 8000fb2:	4682      	mov	sl, r0
 8000fb4:	4819      	ldr	r0, [pc, #100]	@ (800101c <__eqdf2+0x84>)
 8000fb6:	468c      	mov	ip, r1
 8000fb8:	031f      	lsls	r7, r3, #12
 8000fba:	0069      	lsls	r1, r5, #1
 8000fbc:	005e      	lsls	r6, r3, #1
 8000fbe:	0d49      	lsrs	r1, r1, #21
 8000fc0:	0b3f      	lsrs	r7, r7, #12
 8000fc2:	0d76      	lsrs	r6, r6, #21
 8000fc4:	4281      	cmp	r1, r0
 8000fc6:	d018      	beq.n	8000ffa <__eqdf2+0x62>
 8000fc8:	4286      	cmp	r6, r0
 8000fca:	d00f      	beq.n	8000fec <__eqdf2+0x54>
 8000fcc:	2001      	movs	r0, #1
 8000fce:	42b1      	cmp	r1, r6
 8000fd0:	d10d      	bne.n	8000fee <__eqdf2+0x56>
 8000fd2:	45bc      	cmp	ip, r7
 8000fd4:	d10b      	bne.n	8000fee <__eqdf2+0x56>
 8000fd6:	4294      	cmp	r4, r2
 8000fd8:	d109      	bne.n	8000fee <__eqdf2+0x56>
 8000fda:	45d3      	cmp	fp, sl
 8000fdc:	d01c      	beq.n	8001018 <__eqdf2+0x80>
 8000fde:	2900      	cmp	r1, #0
 8000fe0:	d105      	bne.n	8000fee <__eqdf2+0x56>
 8000fe2:	4660      	mov	r0, ip
 8000fe4:	4320      	orrs	r0, r4
 8000fe6:	1e43      	subs	r3, r0, #1
 8000fe8:	4198      	sbcs	r0, r3
 8000fea:	e000      	b.n	8000fee <__eqdf2+0x56>
 8000fec:	2001      	movs	r0, #1
 8000fee:	bcf0      	pop	{r4, r5, r6, r7}
 8000ff0:	46bb      	mov	fp, r7
 8000ff2:	46b2      	mov	sl, r6
 8000ff4:	46a9      	mov	r9, r5
 8000ff6:	46a0      	mov	r8, r4
 8000ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	428e      	cmp	r6, r1
 8000ffe:	d1f6      	bne.n	8000fee <__eqdf2+0x56>
 8001000:	4661      	mov	r1, ip
 8001002:	4339      	orrs	r1, r7
 8001004:	000f      	movs	r7, r1
 8001006:	4317      	orrs	r7, r2
 8001008:	4327      	orrs	r7, r4
 800100a:	d1f0      	bne.n	8000fee <__eqdf2+0x56>
 800100c:	465b      	mov	r3, fp
 800100e:	4652      	mov	r2, sl
 8001010:	1a98      	subs	r0, r3, r2
 8001012:	1e43      	subs	r3, r0, #1
 8001014:	4198      	sbcs	r0, r3
 8001016:	e7ea      	b.n	8000fee <__eqdf2+0x56>
 8001018:	2000      	movs	r0, #0
 800101a:	e7e8      	b.n	8000fee <__eqdf2+0x56>
 800101c:	000007ff 	.word	0x000007ff

08001020 <__gedf2>:
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	4657      	mov	r7, sl
 8001024:	464e      	mov	r6, r9
 8001026:	4645      	mov	r5, r8
 8001028:	46de      	mov	lr, fp
 800102a:	b5e0      	push	{r5, r6, r7, lr}
 800102c:	000d      	movs	r5, r1
 800102e:	030f      	lsls	r7, r1, #12
 8001030:	0b39      	lsrs	r1, r7, #12
 8001032:	b083      	sub	sp, #12
 8001034:	0004      	movs	r4, r0
 8001036:	4680      	mov	r8, r0
 8001038:	9101      	str	r1, [sp, #4]
 800103a:	0058      	lsls	r0, r3, #1
 800103c:	0fe9      	lsrs	r1, r5, #31
 800103e:	4f31      	ldr	r7, [pc, #196]	@ (8001104 <__gedf2+0xe4>)
 8001040:	0d40      	lsrs	r0, r0, #21
 8001042:	468c      	mov	ip, r1
 8001044:	006e      	lsls	r6, r5, #1
 8001046:	0319      	lsls	r1, r3, #12
 8001048:	4682      	mov	sl, r0
 800104a:	4691      	mov	r9, r2
 800104c:	0d76      	lsrs	r6, r6, #21
 800104e:	0b09      	lsrs	r1, r1, #12
 8001050:	0fd8      	lsrs	r0, r3, #31
 8001052:	42be      	cmp	r6, r7
 8001054:	d01f      	beq.n	8001096 <__gedf2+0x76>
 8001056:	45ba      	cmp	sl, r7
 8001058:	d00f      	beq.n	800107a <__gedf2+0x5a>
 800105a:	2e00      	cmp	r6, #0
 800105c:	d12f      	bne.n	80010be <__gedf2+0x9e>
 800105e:	4655      	mov	r5, sl
 8001060:	9e01      	ldr	r6, [sp, #4]
 8001062:	4334      	orrs	r4, r6
 8001064:	2d00      	cmp	r5, #0
 8001066:	d127      	bne.n	80010b8 <__gedf2+0x98>
 8001068:	430a      	orrs	r2, r1
 800106a:	d03a      	beq.n	80010e2 <__gedf2+0xc2>
 800106c:	2c00      	cmp	r4, #0
 800106e:	d145      	bne.n	80010fc <__gedf2+0xdc>
 8001070:	2800      	cmp	r0, #0
 8001072:	d11a      	bne.n	80010aa <__gedf2+0x8a>
 8001074:	2001      	movs	r0, #1
 8001076:	4240      	negs	r0, r0
 8001078:	e017      	b.n	80010aa <__gedf2+0x8a>
 800107a:	4311      	orrs	r1, r2
 800107c:	d13b      	bne.n	80010f6 <__gedf2+0xd6>
 800107e:	2e00      	cmp	r6, #0
 8001080:	d102      	bne.n	8001088 <__gedf2+0x68>
 8001082:	9f01      	ldr	r7, [sp, #4]
 8001084:	4327      	orrs	r7, r4
 8001086:	d0f3      	beq.n	8001070 <__gedf2+0x50>
 8001088:	4584      	cmp	ip, r0
 800108a:	d109      	bne.n	80010a0 <__gedf2+0x80>
 800108c:	4663      	mov	r3, ip
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <__gedf2+0x54>
 8001092:	4660      	mov	r0, ip
 8001094:	e009      	b.n	80010aa <__gedf2+0x8a>
 8001096:	9f01      	ldr	r7, [sp, #4]
 8001098:	4327      	orrs	r7, r4
 800109a:	d12c      	bne.n	80010f6 <__gedf2+0xd6>
 800109c:	45b2      	cmp	sl, r6
 800109e:	d024      	beq.n	80010ea <__gedf2+0xca>
 80010a0:	4663      	mov	r3, ip
 80010a2:	2002      	movs	r0, #2
 80010a4:	3b01      	subs	r3, #1
 80010a6:	4018      	ands	r0, r3
 80010a8:	3801      	subs	r0, #1
 80010aa:	b003      	add	sp, #12
 80010ac:	bcf0      	pop	{r4, r5, r6, r7}
 80010ae:	46bb      	mov	fp, r7
 80010b0:	46b2      	mov	sl, r6
 80010b2:	46a9      	mov	r9, r5
 80010b4:	46a0      	mov	r8, r4
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	d0d9      	beq.n	8001070 <__gedf2+0x50>
 80010bc:	e7e4      	b.n	8001088 <__gedf2+0x68>
 80010be:	4654      	mov	r4, sl
 80010c0:	2c00      	cmp	r4, #0
 80010c2:	d0ed      	beq.n	80010a0 <__gedf2+0x80>
 80010c4:	4584      	cmp	ip, r0
 80010c6:	d1eb      	bne.n	80010a0 <__gedf2+0x80>
 80010c8:	4556      	cmp	r6, sl
 80010ca:	dce9      	bgt.n	80010a0 <__gedf2+0x80>
 80010cc:	dbde      	blt.n	800108c <__gedf2+0x6c>
 80010ce:	9b01      	ldr	r3, [sp, #4]
 80010d0:	428b      	cmp	r3, r1
 80010d2:	d8e5      	bhi.n	80010a0 <__gedf2+0x80>
 80010d4:	d1da      	bne.n	800108c <__gedf2+0x6c>
 80010d6:	45c8      	cmp	r8, r9
 80010d8:	d8e2      	bhi.n	80010a0 <__gedf2+0x80>
 80010da:	2000      	movs	r0, #0
 80010dc:	45c8      	cmp	r8, r9
 80010de:	d2e4      	bcs.n	80010aa <__gedf2+0x8a>
 80010e0:	e7d4      	b.n	800108c <__gedf2+0x6c>
 80010e2:	2000      	movs	r0, #0
 80010e4:	2c00      	cmp	r4, #0
 80010e6:	d0e0      	beq.n	80010aa <__gedf2+0x8a>
 80010e8:	e7da      	b.n	80010a0 <__gedf2+0x80>
 80010ea:	4311      	orrs	r1, r2
 80010ec:	d103      	bne.n	80010f6 <__gedf2+0xd6>
 80010ee:	4584      	cmp	ip, r0
 80010f0:	d1d6      	bne.n	80010a0 <__gedf2+0x80>
 80010f2:	2000      	movs	r0, #0
 80010f4:	e7d9      	b.n	80010aa <__gedf2+0x8a>
 80010f6:	2002      	movs	r0, #2
 80010f8:	4240      	negs	r0, r0
 80010fa:	e7d6      	b.n	80010aa <__gedf2+0x8a>
 80010fc:	4584      	cmp	ip, r0
 80010fe:	d0e6      	beq.n	80010ce <__gedf2+0xae>
 8001100:	e7ce      	b.n	80010a0 <__gedf2+0x80>
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	000007ff 	.word	0x000007ff

08001108 <__ledf2>:
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	4657      	mov	r7, sl
 800110c:	464e      	mov	r6, r9
 800110e:	4645      	mov	r5, r8
 8001110:	46de      	mov	lr, fp
 8001112:	b5e0      	push	{r5, r6, r7, lr}
 8001114:	000d      	movs	r5, r1
 8001116:	030f      	lsls	r7, r1, #12
 8001118:	0004      	movs	r4, r0
 800111a:	4680      	mov	r8, r0
 800111c:	0fe8      	lsrs	r0, r5, #31
 800111e:	0b39      	lsrs	r1, r7, #12
 8001120:	4684      	mov	ip, r0
 8001122:	b083      	sub	sp, #12
 8001124:	0058      	lsls	r0, r3, #1
 8001126:	4f30      	ldr	r7, [pc, #192]	@ (80011e8 <__ledf2+0xe0>)
 8001128:	0d40      	lsrs	r0, r0, #21
 800112a:	9101      	str	r1, [sp, #4]
 800112c:	031e      	lsls	r6, r3, #12
 800112e:	0069      	lsls	r1, r5, #1
 8001130:	4682      	mov	sl, r0
 8001132:	4691      	mov	r9, r2
 8001134:	0d49      	lsrs	r1, r1, #21
 8001136:	0b36      	lsrs	r6, r6, #12
 8001138:	0fd8      	lsrs	r0, r3, #31
 800113a:	42b9      	cmp	r1, r7
 800113c:	d020      	beq.n	8001180 <__ledf2+0x78>
 800113e:	45ba      	cmp	sl, r7
 8001140:	d00f      	beq.n	8001162 <__ledf2+0x5a>
 8001142:	2900      	cmp	r1, #0
 8001144:	d12b      	bne.n	800119e <__ledf2+0x96>
 8001146:	9901      	ldr	r1, [sp, #4]
 8001148:	430c      	orrs	r4, r1
 800114a:	4651      	mov	r1, sl
 800114c:	2900      	cmp	r1, #0
 800114e:	d137      	bne.n	80011c0 <__ledf2+0xb8>
 8001150:	4332      	orrs	r2, r6
 8001152:	d038      	beq.n	80011c6 <__ledf2+0xbe>
 8001154:	2c00      	cmp	r4, #0
 8001156:	d144      	bne.n	80011e2 <__ledf2+0xda>
 8001158:	2800      	cmp	r0, #0
 800115a:	d119      	bne.n	8001190 <__ledf2+0x88>
 800115c:	2001      	movs	r0, #1
 800115e:	4240      	negs	r0, r0
 8001160:	e016      	b.n	8001190 <__ledf2+0x88>
 8001162:	4316      	orrs	r6, r2
 8001164:	d113      	bne.n	800118e <__ledf2+0x86>
 8001166:	2900      	cmp	r1, #0
 8001168:	d102      	bne.n	8001170 <__ledf2+0x68>
 800116a:	9f01      	ldr	r7, [sp, #4]
 800116c:	4327      	orrs	r7, r4
 800116e:	d0f3      	beq.n	8001158 <__ledf2+0x50>
 8001170:	4584      	cmp	ip, r0
 8001172:	d020      	beq.n	80011b6 <__ledf2+0xae>
 8001174:	4663      	mov	r3, ip
 8001176:	2002      	movs	r0, #2
 8001178:	3b01      	subs	r3, #1
 800117a:	4018      	ands	r0, r3
 800117c:	3801      	subs	r0, #1
 800117e:	e007      	b.n	8001190 <__ledf2+0x88>
 8001180:	9f01      	ldr	r7, [sp, #4]
 8001182:	4327      	orrs	r7, r4
 8001184:	d103      	bne.n	800118e <__ledf2+0x86>
 8001186:	458a      	cmp	sl, r1
 8001188:	d1f4      	bne.n	8001174 <__ledf2+0x6c>
 800118a:	4316      	orrs	r6, r2
 800118c:	d01f      	beq.n	80011ce <__ledf2+0xc6>
 800118e:	2002      	movs	r0, #2
 8001190:	b003      	add	sp, #12
 8001192:	bcf0      	pop	{r4, r5, r6, r7}
 8001194:	46bb      	mov	fp, r7
 8001196:	46b2      	mov	sl, r6
 8001198:	46a9      	mov	r9, r5
 800119a:	46a0      	mov	r8, r4
 800119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119e:	4654      	mov	r4, sl
 80011a0:	2c00      	cmp	r4, #0
 80011a2:	d0e7      	beq.n	8001174 <__ledf2+0x6c>
 80011a4:	4584      	cmp	ip, r0
 80011a6:	d1e5      	bne.n	8001174 <__ledf2+0x6c>
 80011a8:	4551      	cmp	r1, sl
 80011aa:	dce3      	bgt.n	8001174 <__ledf2+0x6c>
 80011ac:	db03      	blt.n	80011b6 <__ledf2+0xae>
 80011ae:	9b01      	ldr	r3, [sp, #4]
 80011b0:	42b3      	cmp	r3, r6
 80011b2:	d8df      	bhi.n	8001174 <__ledf2+0x6c>
 80011b4:	d00f      	beq.n	80011d6 <__ledf2+0xce>
 80011b6:	4663      	mov	r3, ip
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0cf      	beq.n	800115c <__ledf2+0x54>
 80011bc:	4660      	mov	r0, ip
 80011be:	e7e7      	b.n	8001190 <__ledf2+0x88>
 80011c0:	2c00      	cmp	r4, #0
 80011c2:	d0c9      	beq.n	8001158 <__ledf2+0x50>
 80011c4:	e7d4      	b.n	8001170 <__ledf2+0x68>
 80011c6:	2000      	movs	r0, #0
 80011c8:	2c00      	cmp	r4, #0
 80011ca:	d0e1      	beq.n	8001190 <__ledf2+0x88>
 80011cc:	e7d2      	b.n	8001174 <__ledf2+0x6c>
 80011ce:	4584      	cmp	ip, r0
 80011d0:	d1d0      	bne.n	8001174 <__ledf2+0x6c>
 80011d2:	2000      	movs	r0, #0
 80011d4:	e7dc      	b.n	8001190 <__ledf2+0x88>
 80011d6:	45c8      	cmp	r8, r9
 80011d8:	d8cc      	bhi.n	8001174 <__ledf2+0x6c>
 80011da:	2000      	movs	r0, #0
 80011dc:	45c8      	cmp	r8, r9
 80011de:	d2d7      	bcs.n	8001190 <__ledf2+0x88>
 80011e0:	e7e9      	b.n	80011b6 <__ledf2+0xae>
 80011e2:	4584      	cmp	ip, r0
 80011e4:	d0e3      	beq.n	80011ae <__ledf2+0xa6>
 80011e6:	e7c5      	b.n	8001174 <__ledf2+0x6c>
 80011e8:	000007ff 	.word	0x000007ff

080011ec <__aeabi_dmul>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	4657      	mov	r7, sl
 80011f0:	46de      	mov	lr, fp
 80011f2:	464e      	mov	r6, r9
 80011f4:	4645      	mov	r5, r8
 80011f6:	b5e0      	push	{r5, r6, r7, lr}
 80011f8:	001f      	movs	r7, r3
 80011fa:	030b      	lsls	r3, r1, #12
 80011fc:	0b1b      	lsrs	r3, r3, #12
 80011fe:	0016      	movs	r6, r2
 8001200:	469a      	mov	sl, r3
 8001202:	0fca      	lsrs	r2, r1, #31
 8001204:	004b      	lsls	r3, r1, #1
 8001206:	0004      	movs	r4, r0
 8001208:	4693      	mov	fp, r2
 800120a:	b087      	sub	sp, #28
 800120c:	0d5b      	lsrs	r3, r3, #21
 800120e:	d100      	bne.n	8001212 <__aeabi_dmul+0x26>
 8001210:	e0d5      	b.n	80013be <__aeabi_dmul+0x1d2>
 8001212:	4abb      	ldr	r2, [pc, #748]	@ (8001500 <__aeabi_dmul+0x314>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d100      	bne.n	800121a <__aeabi_dmul+0x2e>
 8001218:	e0f8      	b.n	800140c <__aeabi_dmul+0x220>
 800121a:	4651      	mov	r1, sl
 800121c:	0f42      	lsrs	r2, r0, #29
 800121e:	00c9      	lsls	r1, r1, #3
 8001220:	430a      	orrs	r2, r1
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	0409      	lsls	r1, r1, #16
 8001226:	4311      	orrs	r1, r2
 8001228:	00c2      	lsls	r2, r0, #3
 800122a:	4691      	mov	r9, r2
 800122c:	4ab5      	ldr	r2, [pc, #724]	@ (8001504 <__aeabi_dmul+0x318>)
 800122e:	468a      	mov	sl, r1
 8001230:	189d      	adds	r5, r3, r2
 8001232:	2300      	movs	r3, #0
 8001234:	4698      	mov	r8, r3
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	033c      	lsls	r4, r7, #12
 800123a:	007b      	lsls	r3, r7, #1
 800123c:	0ffa      	lsrs	r2, r7, #31
 800123e:	0030      	movs	r0, r6
 8001240:	0b24      	lsrs	r4, r4, #12
 8001242:	0d5b      	lsrs	r3, r3, #21
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	d100      	bne.n	800124a <__aeabi_dmul+0x5e>
 8001248:	e096      	b.n	8001378 <__aeabi_dmul+0x18c>
 800124a:	4aad      	ldr	r2, [pc, #692]	@ (8001500 <__aeabi_dmul+0x314>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d031      	beq.n	80012b4 <__aeabi_dmul+0xc8>
 8001250:	0f72      	lsrs	r2, r6, #29
 8001252:	00e4      	lsls	r4, r4, #3
 8001254:	4322      	orrs	r2, r4
 8001256:	2480      	movs	r4, #128	@ 0x80
 8001258:	0424      	lsls	r4, r4, #16
 800125a:	4314      	orrs	r4, r2
 800125c:	4aa9      	ldr	r2, [pc, #676]	@ (8001504 <__aeabi_dmul+0x318>)
 800125e:	00f0      	lsls	r0, r6, #3
 8001260:	4694      	mov	ip, r2
 8001262:	4463      	add	r3, ip
 8001264:	195b      	adds	r3, r3, r5
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	9201      	str	r2, [sp, #4]
 800126a:	4642      	mov	r2, r8
 800126c:	2600      	movs	r6, #0
 800126e:	2a0a      	cmp	r2, #10
 8001270:	dc42      	bgt.n	80012f8 <__aeabi_dmul+0x10c>
 8001272:	465a      	mov	r2, fp
 8001274:	9900      	ldr	r1, [sp, #0]
 8001276:	404a      	eors	r2, r1
 8001278:	4693      	mov	fp, r2
 800127a:	4642      	mov	r2, r8
 800127c:	2a02      	cmp	r2, #2
 800127e:	dc32      	bgt.n	80012e6 <__aeabi_dmul+0xfa>
 8001280:	3a01      	subs	r2, #1
 8001282:	2a01      	cmp	r2, #1
 8001284:	d900      	bls.n	8001288 <__aeabi_dmul+0x9c>
 8001286:	e149      	b.n	800151c <__aeabi_dmul+0x330>
 8001288:	2e02      	cmp	r6, #2
 800128a:	d100      	bne.n	800128e <__aeabi_dmul+0xa2>
 800128c:	e0ca      	b.n	8001424 <__aeabi_dmul+0x238>
 800128e:	2e01      	cmp	r6, #1
 8001290:	d13d      	bne.n	800130e <__aeabi_dmul+0x122>
 8001292:	2300      	movs	r3, #0
 8001294:	2400      	movs	r4, #0
 8001296:	2200      	movs	r2, #0
 8001298:	0010      	movs	r0, r2
 800129a:	465a      	mov	r2, fp
 800129c:	051b      	lsls	r3, r3, #20
 800129e:	4323      	orrs	r3, r4
 80012a0:	07d2      	lsls	r2, r2, #31
 80012a2:	4313      	orrs	r3, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	b007      	add	sp, #28
 80012a8:	bcf0      	pop	{r4, r5, r6, r7}
 80012aa:	46bb      	mov	fp, r7
 80012ac:	46b2      	mov	sl, r6
 80012ae:	46a9      	mov	r9, r5
 80012b0:	46a0      	mov	r8, r4
 80012b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b4:	4b92      	ldr	r3, [pc, #584]	@ (8001500 <__aeabi_dmul+0x314>)
 80012b6:	4326      	orrs	r6, r4
 80012b8:	18eb      	adds	r3, r5, r3
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dmul+0xd4>
 80012be:	e0bb      	b.n	8001438 <__aeabi_dmul+0x24c>
 80012c0:	2203      	movs	r2, #3
 80012c2:	4641      	mov	r1, r8
 80012c4:	4311      	orrs	r1, r2
 80012c6:	465a      	mov	r2, fp
 80012c8:	4688      	mov	r8, r1
 80012ca:	9900      	ldr	r1, [sp, #0]
 80012cc:	404a      	eors	r2, r1
 80012ce:	2180      	movs	r1, #128	@ 0x80
 80012d0:	0109      	lsls	r1, r1, #4
 80012d2:	468c      	mov	ip, r1
 80012d4:	0029      	movs	r1, r5
 80012d6:	4461      	add	r1, ip
 80012d8:	9101      	str	r1, [sp, #4]
 80012da:	4641      	mov	r1, r8
 80012dc:	290a      	cmp	r1, #10
 80012de:	dd00      	ble.n	80012e2 <__aeabi_dmul+0xf6>
 80012e0:	e233      	b.n	800174a <__aeabi_dmul+0x55e>
 80012e2:	4693      	mov	fp, r2
 80012e4:	2603      	movs	r6, #3
 80012e6:	4642      	mov	r2, r8
 80012e8:	2701      	movs	r7, #1
 80012ea:	4097      	lsls	r7, r2
 80012ec:	21a6      	movs	r1, #166	@ 0xa6
 80012ee:	003a      	movs	r2, r7
 80012f0:	00c9      	lsls	r1, r1, #3
 80012f2:	400a      	ands	r2, r1
 80012f4:	420f      	tst	r7, r1
 80012f6:	d031      	beq.n	800135c <__aeabi_dmul+0x170>
 80012f8:	9e02      	ldr	r6, [sp, #8]
 80012fa:	2e02      	cmp	r6, #2
 80012fc:	d100      	bne.n	8001300 <__aeabi_dmul+0x114>
 80012fe:	e235      	b.n	800176c <__aeabi_dmul+0x580>
 8001300:	2e03      	cmp	r6, #3
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x11a>
 8001304:	e1d2      	b.n	80016ac <__aeabi_dmul+0x4c0>
 8001306:	4654      	mov	r4, sl
 8001308:	4648      	mov	r0, r9
 800130a:	2e01      	cmp	r6, #1
 800130c:	d0c1      	beq.n	8001292 <__aeabi_dmul+0xa6>
 800130e:	9a01      	ldr	r2, [sp, #4]
 8001310:	4b7d      	ldr	r3, [pc, #500]	@ (8001508 <__aeabi_dmul+0x31c>)
 8001312:	4694      	mov	ip, r2
 8001314:	4463      	add	r3, ip
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc00      	bgt.n	800131c <__aeabi_dmul+0x130>
 800131a:	e0c0      	b.n	800149e <__aeabi_dmul+0x2b2>
 800131c:	0742      	lsls	r2, r0, #29
 800131e:	d009      	beq.n	8001334 <__aeabi_dmul+0x148>
 8001320:	220f      	movs	r2, #15
 8001322:	4002      	ands	r2, r0
 8001324:	2a04      	cmp	r2, #4
 8001326:	d005      	beq.n	8001334 <__aeabi_dmul+0x148>
 8001328:	1d02      	adds	r2, r0, #4
 800132a:	4282      	cmp	r2, r0
 800132c:	4180      	sbcs	r0, r0
 800132e:	4240      	negs	r0, r0
 8001330:	1824      	adds	r4, r4, r0
 8001332:	0010      	movs	r0, r2
 8001334:	01e2      	lsls	r2, r4, #7
 8001336:	d506      	bpl.n	8001346 <__aeabi_dmul+0x15a>
 8001338:	4b74      	ldr	r3, [pc, #464]	@ (800150c <__aeabi_dmul+0x320>)
 800133a:	9a01      	ldr	r2, [sp, #4]
 800133c:	401c      	ands	r4, r3
 800133e:	2380      	movs	r3, #128	@ 0x80
 8001340:	4694      	mov	ip, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4463      	add	r3, ip
 8001346:	4a72      	ldr	r2, [pc, #456]	@ (8001510 <__aeabi_dmul+0x324>)
 8001348:	4293      	cmp	r3, r2
 800134a:	dc6b      	bgt.n	8001424 <__aeabi_dmul+0x238>
 800134c:	0762      	lsls	r2, r4, #29
 800134e:	08c0      	lsrs	r0, r0, #3
 8001350:	0264      	lsls	r4, r4, #9
 8001352:	055b      	lsls	r3, r3, #21
 8001354:	4302      	orrs	r2, r0
 8001356:	0b24      	lsrs	r4, r4, #12
 8001358:	0d5b      	lsrs	r3, r3, #21
 800135a:	e79d      	b.n	8001298 <__aeabi_dmul+0xac>
 800135c:	2190      	movs	r1, #144	@ 0x90
 800135e:	0089      	lsls	r1, r1, #2
 8001360:	420f      	tst	r7, r1
 8001362:	d163      	bne.n	800142c <__aeabi_dmul+0x240>
 8001364:	2288      	movs	r2, #136	@ 0x88
 8001366:	423a      	tst	r2, r7
 8001368:	d100      	bne.n	800136c <__aeabi_dmul+0x180>
 800136a:	e0d7      	b.n	800151c <__aeabi_dmul+0x330>
 800136c:	9b00      	ldr	r3, [sp, #0]
 800136e:	46a2      	mov	sl, r4
 8001370:	469b      	mov	fp, r3
 8001372:	4681      	mov	r9, r0
 8001374:	9602      	str	r6, [sp, #8]
 8001376:	e7bf      	b.n	80012f8 <__aeabi_dmul+0x10c>
 8001378:	0023      	movs	r3, r4
 800137a:	4333      	orrs	r3, r6
 800137c:	d100      	bne.n	8001380 <__aeabi_dmul+0x194>
 800137e:	e07f      	b.n	8001480 <__aeabi_dmul+0x294>
 8001380:	2c00      	cmp	r4, #0
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0x19a>
 8001384:	e1ad      	b.n	80016e2 <__aeabi_dmul+0x4f6>
 8001386:	0020      	movs	r0, r4
 8001388:	f000 fe20 	bl	8001fcc <__clzsi2>
 800138c:	0002      	movs	r2, r0
 800138e:	0003      	movs	r3, r0
 8001390:	3a0b      	subs	r2, #11
 8001392:	201d      	movs	r0, #29
 8001394:	0019      	movs	r1, r3
 8001396:	1a82      	subs	r2, r0, r2
 8001398:	0030      	movs	r0, r6
 800139a:	3908      	subs	r1, #8
 800139c:	40d0      	lsrs	r0, r2
 800139e:	408c      	lsls	r4, r1
 80013a0:	4304      	orrs	r4, r0
 80013a2:	0030      	movs	r0, r6
 80013a4:	4088      	lsls	r0, r1
 80013a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001514 <__aeabi_dmul+0x328>)
 80013a8:	1aeb      	subs	r3, r5, r3
 80013aa:	4694      	mov	ip, r2
 80013ac:	4463      	add	r3, ip
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	4642      	mov	r2, r8
 80013b4:	2600      	movs	r6, #0
 80013b6:	2a0a      	cmp	r2, #10
 80013b8:	dc00      	bgt.n	80013bc <__aeabi_dmul+0x1d0>
 80013ba:	e75a      	b.n	8001272 <__aeabi_dmul+0x86>
 80013bc:	e79c      	b.n	80012f8 <__aeabi_dmul+0x10c>
 80013be:	4653      	mov	r3, sl
 80013c0:	4303      	orrs	r3, r0
 80013c2:	4699      	mov	r9, r3
 80013c4:	d054      	beq.n	8001470 <__aeabi_dmul+0x284>
 80013c6:	4653      	mov	r3, sl
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d100      	bne.n	80013ce <__aeabi_dmul+0x1e2>
 80013cc:	e177      	b.n	80016be <__aeabi_dmul+0x4d2>
 80013ce:	4650      	mov	r0, sl
 80013d0:	f000 fdfc 	bl	8001fcc <__clzsi2>
 80013d4:	230b      	movs	r3, #11
 80013d6:	425b      	negs	r3, r3
 80013d8:	469c      	mov	ip, r3
 80013da:	0002      	movs	r2, r0
 80013dc:	4484      	add	ip, r0
 80013de:	0011      	movs	r1, r2
 80013e0:	4650      	mov	r0, sl
 80013e2:	3908      	subs	r1, #8
 80013e4:	4088      	lsls	r0, r1
 80013e6:	231d      	movs	r3, #29
 80013e8:	4680      	mov	r8, r0
 80013ea:	4660      	mov	r0, ip
 80013ec:	1a1b      	subs	r3, r3, r0
 80013ee:	0020      	movs	r0, r4
 80013f0:	40d8      	lsrs	r0, r3
 80013f2:	0003      	movs	r3, r0
 80013f4:	4640      	mov	r0, r8
 80013f6:	4303      	orrs	r3, r0
 80013f8:	469a      	mov	sl, r3
 80013fa:	0023      	movs	r3, r4
 80013fc:	408b      	lsls	r3, r1
 80013fe:	4699      	mov	r9, r3
 8001400:	2300      	movs	r3, #0
 8001402:	4d44      	ldr	r5, [pc, #272]	@ (8001514 <__aeabi_dmul+0x328>)
 8001404:	4698      	mov	r8, r3
 8001406:	1aad      	subs	r5, r5, r2
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	e715      	b.n	8001238 <__aeabi_dmul+0x4c>
 800140c:	4652      	mov	r2, sl
 800140e:	4302      	orrs	r2, r0
 8001410:	4691      	mov	r9, r2
 8001412:	d126      	bne.n	8001462 <__aeabi_dmul+0x276>
 8001414:	2200      	movs	r2, #0
 8001416:	001d      	movs	r5, r3
 8001418:	2302      	movs	r3, #2
 800141a:	4692      	mov	sl, r2
 800141c:	3208      	adds	r2, #8
 800141e:	4690      	mov	r8, r2
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	e709      	b.n	8001238 <__aeabi_dmul+0x4c>
 8001424:	2400      	movs	r4, #0
 8001426:	2200      	movs	r2, #0
 8001428:	4b35      	ldr	r3, [pc, #212]	@ (8001500 <__aeabi_dmul+0x314>)
 800142a:	e735      	b.n	8001298 <__aeabi_dmul+0xac>
 800142c:	2300      	movs	r3, #0
 800142e:	2480      	movs	r4, #128	@ 0x80
 8001430:	469b      	mov	fp, r3
 8001432:	0324      	lsls	r4, r4, #12
 8001434:	4b32      	ldr	r3, [pc, #200]	@ (8001500 <__aeabi_dmul+0x314>)
 8001436:	e72f      	b.n	8001298 <__aeabi_dmul+0xac>
 8001438:	2202      	movs	r2, #2
 800143a:	4641      	mov	r1, r8
 800143c:	4311      	orrs	r1, r2
 800143e:	2280      	movs	r2, #128	@ 0x80
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	4694      	mov	ip, r2
 8001444:	002a      	movs	r2, r5
 8001446:	4462      	add	r2, ip
 8001448:	4688      	mov	r8, r1
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	290a      	cmp	r1, #10
 800144e:	dd00      	ble.n	8001452 <__aeabi_dmul+0x266>
 8001450:	e752      	b.n	80012f8 <__aeabi_dmul+0x10c>
 8001452:	465a      	mov	r2, fp
 8001454:	2000      	movs	r0, #0
 8001456:	9900      	ldr	r1, [sp, #0]
 8001458:	0004      	movs	r4, r0
 800145a:	404a      	eors	r2, r1
 800145c:	4693      	mov	fp, r2
 800145e:	2602      	movs	r6, #2
 8001460:	e70b      	b.n	800127a <__aeabi_dmul+0x8e>
 8001462:	220c      	movs	r2, #12
 8001464:	001d      	movs	r5, r3
 8001466:	2303      	movs	r3, #3
 8001468:	4681      	mov	r9, r0
 800146a:	4690      	mov	r8, r2
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	e6e3      	b.n	8001238 <__aeabi_dmul+0x4c>
 8001470:	2300      	movs	r3, #0
 8001472:	469a      	mov	sl, r3
 8001474:	3304      	adds	r3, #4
 8001476:	4698      	mov	r8, r3
 8001478:	3b03      	subs	r3, #3
 800147a:	2500      	movs	r5, #0
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	e6db      	b.n	8001238 <__aeabi_dmul+0x4c>
 8001480:	4642      	mov	r2, r8
 8001482:	3301      	adds	r3, #1
 8001484:	431a      	orrs	r2, r3
 8001486:	002b      	movs	r3, r5
 8001488:	4690      	mov	r8, r2
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	4642      	mov	r2, r8
 8001490:	2400      	movs	r4, #0
 8001492:	2000      	movs	r0, #0
 8001494:	2601      	movs	r6, #1
 8001496:	2a0a      	cmp	r2, #10
 8001498:	dc00      	bgt.n	800149c <__aeabi_dmul+0x2b0>
 800149a:	e6ea      	b.n	8001272 <__aeabi_dmul+0x86>
 800149c:	e72c      	b.n	80012f8 <__aeabi_dmul+0x10c>
 800149e:	2201      	movs	r2, #1
 80014a0:	1ad2      	subs	r2, r2, r3
 80014a2:	2a38      	cmp	r2, #56	@ 0x38
 80014a4:	dd00      	ble.n	80014a8 <__aeabi_dmul+0x2bc>
 80014a6:	e6f4      	b.n	8001292 <__aeabi_dmul+0xa6>
 80014a8:	2a1f      	cmp	r2, #31
 80014aa:	dc00      	bgt.n	80014ae <__aeabi_dmul+0x2c2>
 80014ac:	e12a      	b.n	8001704 <__aeabi_dmul+0x518>
 80014ae:	211f      	movs	r1, #31
 80014b0:	4249      	negs	r1, r1
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	0021      	movs	r1, r4
 80014b6:	40d9      	lsrs	r1, r3
 80014b8:	000b      	movs	r3, r1
 80014ba:	2a20      	cmp	r2, #32
 80014bc:	d005      	beq.n	80014ca <__aeabi_dmul+0x2de>
 80014be:	4a16      	ldr	r2, [pc, #88]	@ (8001518 <__aeabi_dmul+0x32c>)
 80014c0:	9d01      	ldr	r5, [sp, #4]
 80014c2:	4694      	mov	ip, r2
 80014c4:	4465      	add	r5, ip
 80014c6:	40ac      	lsls	r4, r5
 80014c8:	4320      	orrs	r0, r4
 80014ca:	1e42      	subs	r2, r0, #1
 80014cc:	4190      	sbcs	r0, r2
 80014ce:	4318      	orrs	r0, r3
 80014d0:	2307      	movs	r3, #7
 80014d2:	0019      	movs	r1, r3
 80014d4:	2400      	movs	r4, #0
 80014d6:	4001      	ands	r1, r0
 80014d8:	4203      	tst	r3, r0
 80014da:	d00c      	beq.n	80014f6 <__aeabi_dmul+0x30a>
 80014dc:	230f      	movs	r3, #15
 80014de:	4003      	ands	r3, r0
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dmul+0x2fa>
 80014e4:	e140      	b.n	8001768 <__aeabi_dmul+0x57c>
 80014e6:	1d03      	adds	r3, r0, #4
 80014e8:	4283      	cmp	r3, r0
 80014ea:	41a4      	sbcs	r4, r4
 80014ec:	0018      	movs	r0, r3
 80014ee:	4264      	negs	r4, r4
 80014f0:	0761      	lsls	r1, r4, #29
 80014f2:	0264      	lsls	r4, r4, #9
 80014f4:	0b24      	lsrs	r4, r4, #12
 80014f6:	08c2      	lsrs	r2, r0, #3
 80014f8:	2300      	movs	r3, #0
 80014fa:	430a      	orrs	r2, r1
 80014fc:	e6cc      	b.n	8001298 <__aeabi_dmul+0xac>
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	000007ff 	.word	0x000007ff
 8001504:	fffffc01 	.word	0xfffffc01
 8001508:	000003ff 	.word	0x000003ff
 800150c:	feffffff 	.word	0xfeffffff
 8001510:	000007fe 	.word	0x000007fe
 8001514:	fffffc0d 	.word	0xfffffc0d
 8001518:	0000043e 	.word	0x0000043e
 800151c:	4649      	mov	r1, r9
 800151e:	464a      	mov	r2, r9
 8001520:	0409      	lsls	r1, r1, #16
 8001522:	0c09      	lsrs	r1, r1, #16
 8001524:	000d      	movs	r5, r1
 8001526:	0c16      	lsrs	r6, r2, #16
 8001528:	0c02      	lsrs	r2, r0, #16
 800152a:	0400      	lsls	r0, r0, #16
 800152c:	0c00      	lsrs	r0, r0, #16
 800152e:	4345      	muls	r5, r0
 8001530:	46ac      	mov	ip, r5
 8001532:	0005      	movs	r5, r0
 8001534:	4375      	muls	r5, r6
 8001536:	46a8      	mov	r8, r5
 8001538:	0015      	movs	r5, r2
 800153a:	000f      	movs	r7, r1
 800153c:	4375      	muls	r5, r6
 800153e:	9200      	str	r2, [sp, #0]
 8001540:	9502      	str	r5, [sp, #8]
 8001542:	002a      	movs	r2, r5
 8001544:	9d00      	ldr	r5, [sp, #0]
 8001546:	436f      	muls	r7, r5
 8001548:	4665      	mov	r5, ip
 800154a:	0c2d      	lsrs	r5, r5, #16
 800154c:	46a9      	mov	r9, r5
 800154e:	4447      	add	r7, r8
 8001550:	444f      	add	r7, r9
 8001552:	45b8      	cmp	r8, r7
 8001554:	d905      	bls.n	8001562 <__aeabi_dmul+0x376>
 8001556:	0015      	movs	r5, r2
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	0252      	lsls	r2, r2, #9
 800155c:	4690      	mov	r8, r2
 800155e:	4445      	add	r5, r8
 8001560:	9502      	str	r5, [sp, #8]
 8001562:	0c3d      	lsrs	r5, r7, #16
 8001564:	9503      	str	r5, [sp, #12]
 8001566:	4665      	mov	r5, ip
 8001568:	042d      	lsls	r5, r5, #16
 800156a:	043f      	lsls	r7, r7, #16
 800156c:	0c2d      	lsrs	r5, r5, #16
 800156e:	46ac      	mov	ip, r5
 8001570:	003d      	movs	r5, r7
 8001572:	4465      	add	r5, ip
 8001574:	9504      	str	r5, [sp, #16]
 8001576:	0c25      	lsrs	r5, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	46ac      	mov	ip, r5
 800157e:	0025      	movs	r5, r4
 8001580:	4375      	muls	r5, r6
 8001582:	46a8      	mov	r8, r5
 8001584:	4665      	mov	r5, ip
 8001586:	000f      	movs	r7, r1
 8001588:	4369      	muls	r1, r5
 800158a:	4441      	add	r1, r8
 800158c:	4689      	mov	r9, r1
 800158e:	4367      	muls	r7, r4
 8001590:	0c39      	lsrs	r1, r7, #16
 8001592:	4449      	add	r1, r9
 8001594:	436e      	muls	r6, r5
 8001596:	4588      	cmp	r8, r1
 8001598:	d903      	bls.n	80015a2 <__aeabi_dmul+0x3b6>
 800159a:	2280      	movs	r2, #128	@ 0x80
 800159c:	0252      	lsls	r2, r2, #9
 800159e:	4690      	mov	r8, r2
 80015a0:	4446      	add	r6, r8
 80015a2:	0c0d      	lsrs	r5, r1, #16
 80015a4:	46a8      	mov	r8, r5
 80015a6:	0035      	movs	r5, r6
 80015a8:	4445      	add	r5, r8
 80015aa:	9505      	str	r5, [sp, #20]
 80015ac:	9d03      	ldr	r5, [sp, #12]
 80015ae:	043f      	lsls	r7, r7, #16
 80015b0:	46a8      	mov	r8, r5
 80015b2:	0c3f      	lsrs	r7, r7, #16
 80015b4:	0409      	lsls	r1, r1, #16
 80015b6:	19c9      	adds	r1, r1, r7
 80015b8:	4488      	add	r8, r1
 80015ba:	4645      	mov	r5, r8
 80015bc:	9503      	str	r5, [sp, #12]
 80015be:	4655      	mov	r5, sl
 80015c0:	042e      	lsls	r6, r5, #16
 80015c2:	0c36      	lsrs	r6, r6, #16
 80015c4:	0c2f      	lsrs	r7, r5, #16
 80015c6:	0035      	movs	r5, r6
 80015c8:	4345      	muls	r5, r0
 80015ca:	4378      	muls	r0, r7
 80015cc:	4681      	mov	r9, r0
 80015ce:	0038      	movs	r0, r7
 80015d0:	46a8      	mov	r8, r5
 80015d2:	0c2d      	lsrs	r5, r5, #16
 80015d4:	46aa      	mov	sl, r5
 80015d6:	9a00      	ldr	r2, [sp, #0]
 80015d8:	4350      	muls	r0, r2
 80015da:	4372      	muls	r2, r6
 80015dc:	444a      	add	r2, r9
 80015de:	4452      	add	r2, sl
 80015e0:	4591      	cmp	r9, r2
 80015e2:	d903      	bls.n	80015ec <__aeabi_dmul+0x400>
 80015e4:	2580      	movs	r5, #128	@ 0x80
 80015e6:	026d      	lsls	r5, r5, #9
 80015e8:	46a9      	mov	r9, r5
 80015ea:	4448      	add	r0, r9
 80015ec:	0c15      	lsrs	r5, r2, #16
 80015ee:	46a9      	mov	r9, r5
 80015f0:	4645      	mov	r5, r8
 80015f2:	042d      	lsls	r5, r5, #16
 80015f4:	0c2d      	lsrs	r5, r5, #16
 80015f6:	46a8      	mov	r8, r5
 80015f8:	4665      	mov	r5, ip
 80015fa:	437d      	muls	r5, r7
 80015fc:	0412      	lsls	r2, r2, #16
 80015fe:	4448      	add	r0, r9
 8001600:	4490      	add	r8, r2
 8001602:	46a9      	mov	r9, r5
 8001604:	0032      	movs	r2, r6
 8001606:	4665      	mov	r5, ip
 8001608:	4362      	muls	r2, r4
 800160a:	436e      	muls	r6, r5
 800160c:	437c      	muls	r4, r7
 800160e:	0c17      	lsrs	r7, r2, #16
 8001610:	1936      	adds	r6, r6, r4
 8001612:	19bf      	adds	r7, r7, r6
 8001614:	42bc      	cmp	r4, r7
 8001616:	d903      	bls.n	8001620 <__aeabi_dmul+0x434>
 8001618:	2480      	movs	r4, #128	@ 0x80
 800161a:	0264      	lsls	r4, r4, #9
 800161c:	46a4      	mov	ip, r4
 800161e:	44e1      	add	r9, ip
 8001620:	9c02      	ldr	r4, [sp, #8]
 8001622:	9e03      	ldr	r6, [sp, #12]
 8001624:	46a4      	mov	ip, r4
 8001626:	9d05      	ldr	r5, [sp, #20]
 8001628:	4466      	add	r6, ip
 800162a:	428e      	cmp	r6, r1
 800162c:	4189      	sbcs	r1, r1
 800162e:	46ac      	mov	ip, r5
 8001630:	0412      	lsls	r2, r2, #16
 8001632:	043c      	lsls	r4, r7, #16
 8001634:	0c12      	lsrs	r2, r2, #16
 8001636:	18a2      	adds	r2, r4, r2
 8001638:	4462      	add	r2, ip
 800163a:	4249      	negs	r1, r1
 800163c:	1854      	adds	r4, r2, r1
 800163e:	4446      	add	r6, r8
 8001640:	46a4      	mov	ip, r4
 8001642:	4546      	cmp	r6, r8
 8001644:	41a4      	sbcs	r4, r4
 8001646:	4682      	mov	sl, r0
 8001648:	4264      	negs	r4, r4
 800164a:	46a0      	mov	r8, r4
 800164c:	42aa      	cmp	r2, r5
 800164e:	4192      	sbcs	r2, r2
 8001650:	458c      	cmp	ip, r1
 8001652:	4189      	sbcs	r1, r1
 8001654:	44e2      	add	sl, ip
 8001656:	44d0      	add	r8, sl
 8001658:	4249      	negs	r1, r1
 800165a:	4252      	negs	r2, r2
 800165c:	430a      	orrs	r2, r1
 800165e:	45a0      	cmp	r8, r4
 8001660:	41a4      	sbcs	r4, r4
 8001662:	4582      	cmp	sl, r0
 8001664:	4189      	sbcs	r1, r1
 8001666:	4264      	negs	r4, r4
 8001668:	4249      	negs	r1, r1
 800166a:	430c      	orrs	r4, r1
 800166c:	4641      	mov	r1, r8
 800166e:	0c3f      	lsrs	r7, r7, #16
 8001670:	19d2      	adds	r2, r2, r7
 8001672:	1912      	adds	r2, r2, r4
 8001674:	0dcc      	lsrs	r4, r1, #23
 8001676:	9904      	ldr	r1, [sp, #16]
 8001678:	0270      	lsls	r0, r6, #9
 800167a:	4308      	orrs	r0, r1
 800167c:	1e41      	subs	r1, r0, #1
 800167e:	4188      	sbcs	r0, r1
 8001680:	4641      	mov	r1, r8
 8001682:	444a      	add	r2, r9
 8001684:	0df6      	lsrs	r6, r6, #23
 8001686:	0252      	lsls	r2, r2, #9
 8001688:	4330      	orrs	r0, r6
 800168a:	0249      	lsls	r1, r1, #9
 800168c:	4314      	orrs	r4, r2
 800168e:	4308      	orrs	r0, r1
 8001690:	01d2      	lsls	r2, r2, #7
 8001692:	d535      	bpl.n	8001700 <__aeabi_dmul+0x514>
 8001694:	2201      	movs	r2, #1
 8001696:	0843      	lsrs	r3, r0, #1
 8001698:	4002      	ands	r2, r0
 800169a:	4313      	orrs	r3, r2
 800169c:	07e0      	lsls	r0, r4, #31
 800169e:	4318      	orrs	r0, r3
 80016a0:	0864      	lsrs	r4, r4, #1
 80016a2:	e634      	b.n	800130e <__aeabi_dmul+0x122>
 80016a4:	9b00      	ldr	r3, [sp, #0]
 80016a6:	46a2      	mov	sl, r4
 80016a8:	469b      	mov	fp, r3
 80016aa:	4681      	mov	r9, r0
 80016ac:	2480      	movs	r4, #128	@ 0x80
 80016ae:	4653      	mov	r3, sl
 80016b0:	0324      	lsls	r4, r4, #12
 80016b2:	431c      	orrs	r4, r3
 80016b4:	0324      	lsls	r4, r4, #12
 80016b6:	464a      	mov	r2, r9
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <__aeabi_dmul+0x588>)
 80016ba:	0b24      	lsrs	r4, r4, #12
 80016bc:	e5ec      	b.n	8001298 <__aeabi_dmul+0xac>
 80016be:	f000 fc85 	bl	8001fcc <__clzsi2>
 80016c2:	2315      	movs	r3, #21
 80016c4:	469c      	mov	ip, r3
 80016c6:	4484      	add	ip, r0
 80016c8:	0002      	movs	r2, r0
 80016ca:	4663      	mov	r3, ip
 80016cc:	3220      	adds	r2, #32
 80016ce:	2b1c      	cmp	r3, #28
 80016d0:	dc00      	bgt.n	80016d4 <__aeabi_dmul+0x4e8>
 80016d2:	e684      	b.n	80013de <__aeabi_dmul+0x1f2>
 80016d4:	2300      	movs	r3, #0
 80016d6:	4699      	mov	r9, r3
 80016d8:	0023      	movs	r3, r4
 80016da:	3808      	subs	r0, #8
 80016dc:	4083      	lsls	r3, r0
 80016de:	469a      	mov	sl, r3
 80016e0:	e68e      	b.n	8001400 <__aeabi_dmul+0x214>
 80016e2:	f000 fc73 	bl	8001fcc <__clzsi2>
 80016e6:	0002      	movs	r2, r0
 80016e8:	0003      	movs	r3, r0
 80016ea:	3215      	adds	r2, #21
 80016ec:	3320      	adds	r3, #32
 80016ee:	2a1c      	cmp	r2, #28
 80016f0:	dc00      	bgt.n	80016f4 <__aeabi_dmul+0x508>
 80016f2:	e64e      	b.n	8001392 <__aeabi_dmul+0x1a6>
 80016f4:	0002      	movs	r2, r0
 80016f6:	0034      	movs	r4, r6
 80016f8:	3a08      	subs	r2, #8
 80016fa:	2000      	movs	r0, #0
 80016fc:	4094      	lsls	r4, r2
 80016fe:	e652      	b.n	80013a6 <__aeabi_dmul+0x1ba>
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	e604      	b.n	800130e <__aeabi_dmul+0x122>
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <__aeabi_dmul+0x58c>)
 8001706:	0021      	movs	r1, r4
 8001708:	469c      	mov	ip, r3
 800170a:	0003      	movs	r3, r0
 800170c:	9d01      	ldr	r5, [sp, #4]
 800170e:	40d3      	lsrs	r3, r2
 8001710:	4465      	add	r5, ip
 8001712:	40a9      	lsls	r1, r5
 8001714:	4319      	orrs	r1, r3
 8001716:	0003      	movs	r3, r0
 8001718:	40ab      	lsls	r3, r5
 800171a:	1e58      	subs	r0, r3, #1
 800171c:	4183      	sbcs	r3, r0
 800171e:	4319      	orrs	r1, r3
 8001720:	0008      	movs	r0, r1
 8001722:	40d4      	lsrs	r4, r2
 8001724:	074b      	lsls	r3, r1, #29
 8001726:	d009      	beq.n	800173c <__aeabi_dmul+0x550>
 8001728:	230f      	movs	r3, #15
 800172a:	400b      	ands	r3, r1
 800172c:	2b04      	cmp	r3, #4
 800172e:	d005      	beq.n	800173c <__aeabi_dmul+0x550>
 8001730:	1d0b      	adds	r3, r1, #4
 8001732:	428b      	cmp	r3, r1
 8001734:	4180      	sbcs	r0, r0
 8001736:	4240      	negs	r0, r0
 8001738:	1824      	adds	r4, r4, r0
 800173a:	0018      	movs	r0, r3
 800173c:	0223      	lsls	r3, r4, #8
 800173e:	d400      	bmi.n	8001742 <__aeabi_dmul+0x556>
 8001740:	e6d6      	b.n	80014f0 <__aeabi_dmul+0x304>
 8001742:	2301      	movs	r3, #1
 8001744:	2400      	movs	r4, #0
 8001746:	2200      	movs	r2, #0
 8001748:	e5a6      	b.n	8001298 <__aeabi_dmul+0xac>
 800174a:	290f      	cmp	r1, #15
 800174c:	d1aa      	bne.n	80016a4 <__aeabi_dmul+0x4b8>
 800174e:	2380      	movs	r3, #128	@ 0x80
 8001750:	4652      	mov	r2, sl
 8001752:	031b      	lsls	r3, r3, #12
 8001754:	421a      	tst	r2, r3
 8001756:	d0a9      	beq.n	80016ac <__aeabi_dmul+0x4c0>
 8001758:	421c      	tst	r4, r3
 800175a:	d1a7      	bne.n	80016ac <__aeabi_dmul+0x4c0>
 800175c:	431c      	orrs	r4, r3
 800175e:	9b00      	ldr	r3, [sp, #0]
 8001760:	0002      	movs	r2, r0
 8001762:	469b      	mov	fp, r3
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <__aeabi_dmul+0x588>)
 8001766:	e597      	b.n	8001298 <__aeabi_dmul+0xac>
 8001768:	2400      	movs	r4, #0
 800176a:	e6c1      	b.n	80014f0 <__aeabi_dmul+0x304>
 800176c:	2400      	movs	r4, #0
 800176e:	4b01      	ldr	r3, [pc, #4]	@ (8001774 <__aeabi_dmul+0x588>)
 8001770:	0022      	movs	r2, r4
 8001772:	e591      	b.n	8001298 <__aeabi_dmul+0xac>
 8001774:	000007ff 	.word	0x000007ff
 8001778:	0000041e 	.word	0x0000041e

0800177c <__aeabi_dsub>:
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	464e      	mov	r6, r9
 8001780:	4645      	mov	r5, r8
 8001782:	46de      	mov	lr, fp
 8001784:	4657      	mov	r7, sl
 8001786:	b5e0      	push	{r5, r6, r7, lr}
 8001788:	b085      	sub	sp, #20
 800178a:	9000      	str	r0, [sp, #0]
 800178c:	9101      	str	r1, [sp, #4]
 800178e:	030c      	lsls	r4, r1, #12
 8001790:	004f      	lsls	r7, r1, #1
 8001792:	0fce      	lsrs	r6, r1, #31
 8001794:	0a61      	lsrs	r1, r4, #9
 8001796:	9c00      	ldr	r4, [sp, #0]
 8001798:	46b0      	mov	r8, r6
 800179a:	0f64      	lsrs	r4, r4, #29
 800179c:	430c      	orrs	r4, r1
 800179e:	9900      	ldr	r1, [sp, #0]
 80017a0:	0d7f      	lsrs	r7, r7, #21
 80017a2:	00c8      	lsls	r0, r1, #3
 80017a4:	0011      	movs	r1, r2
 80017a6:	001a      	movs	r2, r3
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	469c      	mov	ip, r3
 80017ac:	9100      	str	r1, [sp, #0]
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	0051      	lsls	r1, r2, #1
 80017b2:	0d4b      	lsrs	r3, r1, #21
 80017b4:	4699      	mov	r9, r3
 80017b6:	9b01      	ldr	r3, [sp, #4]
 80017b8:	9d00      	ldr	r5, [sp, #0]
 80017ba:	0fd9      	lsrs	r1, r3, #31
 80017bc:	4663      	mov	r3, ip
 80017be:	0f6a      	lsrs	r2, r5, #29
 80017c0:	0a5b      	lsrs	r3, r3, #9
 80017c2:	4313      	orrs	r3, r2
 80017c4:	00ea      	lsls	r2, r5, #3
 80017c6:	4694      	mov	ip, r2
 80017c8:	4693      	mov	fp, r2
 80017ca:	4ac1      	ldr	r2, [pc, #772]	@ (8001ad0 <__aeabi_dsub+0x354>)
 80017cc:	9003      	str	r0, [sp, #12]
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	4591      	cmp	r9, r2
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dsub+0x5a>
 80017d4:	e0cd      	b.n	8001972 <__aeabi_dsub+0x1f6>
 80017d6:	2501      	movs	r5, #1
 80017d8:	4069      	eors	r1, r5
 80017da:	464d      	mov	r5, r9
 80017dc:	1b7d      	subs	r5, r7, r5
 80017de:	46aa      	mov	sl, r5
 80017e0:	428e      	cmp	r6, r1
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dsub+0x6a>
 80017e4:	e080      	b.n	80018e8 <__aeabi_dsub+0x16c>
 80017e6:	2d00      	cmp	r5, #0
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_dsub+0x70>
 80017ea:	e335      	b.n	8001e58 <__aeabi_dsub+0x6dc>
 80017ec:	4649      	mov	r1, r9
 80017ee:	2900      	cmp	r1, #0
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dsub+0x78>
 80017f2:	e0df      	b.n	80019b4 <__aeabi_dsub+0x238>
 80017f4:	4297      	cmp	r7, r2
 80017f6:	d100      	bne.n	80017fa <__aeabi_dsub+0x7e>
 80017f8:	e194      	b.n	8001b24 <__aeabi_dsub+0x3a8>
 80017fa:	4652      	mov	r2, sl
 80017fc:	2501      	movs	r5, #1
 80017fe:	2a38      	cmp	r2, #56	@ 0x38
 8001800:	dc19      	bgt.n	8001836 <__aeabi_dsub+0xba>
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	9b02      	ldr	r3, [sp, #8]
 8001806:	0412      	lsls	r2, r2, #16
 8001808:	4313      	orrs	r3, r2
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	4652      	mov	r2, sl
 800180e:	2a1f      	cmp	r2, #31
 8001810:	dd00      	ble.n	8001814 <__aeabi_dsub+0x98>
 8001812:	e1e3      	b.n	8001bdc <__aeabi_dsub+0x460>
 8001814:	4653      	mov	r3, sl
 8001816:	2220      	movs	r2, #32
 8001818:	4661      	mov	r1, ip
 800181a:	9d02      	ldr	r5, [sp, #8]
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	4095      	lsls	r5, r2
 8001820:	40d9      	lsrs	r1, r3
 8001822:	430d      	orrs	r5, r1
 8001824:	4661      	mov	r1, ip
 8001826:	4091      	lsls	r1, r2
 8001828:	000a      	movs	r2, r1
 800182a:	1e51      	subs	r1, r2, #1
 800182c:	418a      	sbcs	r2, r1
 800182e:	4315      	orrs	r5, r2
 8001830:	9a02      	ldr	r2, [sp, #8]
 8001832:	40da      	lsrs	r2, r3
 8001834:	1aa4      	subs	r4, r4, r2
 8001836:	1b45      	subs	r5, r0, r5
 8001838:	42a8      	cmp	r0, r5
 800183a:	4180      	sbcs	r0, r0
 800183c:	4240      	negs	r0, r0
 800183e:	1a24      	subs	r4, r4, r0
 8001840:	0223      	lsls	r3, r4, #8
 8001842:	d400      	bmi.n	8001846 <__aeabi_dsub+0xca>
 8001844:	e13d      	b.n	8001ac2 <__aeabi_dsub+0x346>
 8001846:	0264      	lsls	r4, r4, #9
 8001848:	0a64      	lsrs	r4, r4, #9
 800184a:	2c00      	cmp	r4, #0
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0xd4>
 800184e:	e147      	b.n	8001ae0 <__aeabi_dsub+0x364>
 8001850:	0020      	movs	r0, r4
 8001852:	f000 fbbb 	bl	8001fcc <__clzsi2>
 8001856:	0003      	movs	r3, r0
 8001858:	3b08      	subs	r3, #8
 800185a:	2120      	movs	r1, #32
 800185c:	0028      	movs	r0, r5
 800185e:	1aca      	subs	r2, r1, r3
 8001860:	40d0      	lsrs	r0, r2
 8001862:	409c      	lsls	r4, r3
 8001864:	0002      	movs	r2, r0
 8001866:	409d      	lsls	r5, r3
 8001868:	4322      	orrs	r2, r4
 800186a:	429f      	cmp	r7, r3
 800186c:	dd00      	ble.n	8001870 <__aeabi_dsub+0xf4>
 800186e:	e177      	b.n	8001b60 <__aeabi_dsub+0x3e4>
 8001870:	1bd8      	subs	r0, r3, r7
 8001872:	3001      	adds	r0, #1
 8001874:	1a09      	subs	r1, r1, r0
 8001876:	002c      	movs	r4, r5
 8001878:	408d      	lsls	r5, r1
 800187a:	40c4      	lsrs	r4, r0
 800187c:	1e6b      	subs	r3, r5, #1
 800187e:	419d      	sbcs	r5, r3
 8001880:	0013      	movs	r3, r2
 8001882:	40c2      	lsrs	r2, r0
 8001884:	408b      	lsls	r3, r1
 8001886:	4325      	orrs	r5, r4
 8001888:	2700      	movs	r7, #0
 800188a:	0014      	movs	r4, r2
 800188c:	431d      	orrs	r5, r3
 800188e:	076b      	lsls	r3, r5, #29
 8001890:	d009      	beq.n	80018a6 <__aeabi_dsub+0x12a>
 8001892:	230f      	movs	r3, #15
 8001894:	402b      	ands	r3, r5
 8001896:	2b04      	cmp	r3, #4
 8001898:	d005      	beq.n	80018a6 <__aeabi_dsub+0x12a>
 800189a:	1d2b      	adds	r3, r5, #4
 800189c:	42ab      	cmp	r3, r5
 800189e:	41ad      	sbcs	r5, r5
 80018a0:	426d      	negs	r5, r5
 80018a2:	1964      	adds	r4, r4, r5
 80018a4:	001d      	movs	r5, r3
 80018a6:	0223      	lsls	r3, r4, #8
 80018a8:	d400      	bmi.n	80018ac <__aeabi_dsub+0x130>
 80018aa:	e140      	b.n	8001b2e <__aeabi_dsub+0x3b2>
 80018ac:	4a88      	ldr	r2, [pc, #544]	@ (8001ad0 <__aeabi_dsub+0x354>)
 80018ae:	3701      	adds	r7, #1
 80018b0:	4297      	cmp	r7, r2
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0x13a>
 80018b4:	e101      	b.n	8001aba <__aeabi_dsub+0x33e>
 80018b6:	2601      	movs	r6, #1
 80018b8:	4643      	mov	r3, r8
 80018ba:	4986      	ldr	r1, [pc, #536]	@ (8001ad4 <__aeabi_dsub+0x358>)
 80018bc:	08ed      	lsrs	r5, r5, #3
 80018be:	4021      	ands	r1, r4
 80018c0:	074a      	lsls	r2, r1, #29
 80018c2:	432a      	orrs	r2, r5
 80018c4:	057c      	lsls	r4, r7, #21
 80018c6:	024d      	lsls	r5, r1, #9
 80018c8:	0b2d      	lsrs	r5, r5, #12
 80018ca:	0d64      	lsrs	r4, r4, #21
 80018cc:	401e      	ands	r6, r3
 80018ce:	0524      	lsls	r4, r4, #20
 80018d0:	432c      	orrs	r4, r5
 80018d2:	07f6      	lsls	r6, r6, #31
 80018d4:	4334      	orrs	r4, r6
 80018d6:	0010      	movs	r0, r2
 80018d8:	0021      	movs	r1, r4
 80018da:	b005      	add	sp, #20
 80018dc:	bcf0      	pop	{r4, r5, r6, r7}
 80018de:	46bb      	mov	fp, r7
 80018e0:	46b2      	mov	sl, r6
 80018e2:	46a9      	mov	r9, r5
 80018e4:	46a0      	mov	r8, r4
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e8:	2d00      	cmp	r5, #0
 80018ea:	dc00      	bgt.n	80018ee <__aeabi_dsub+0x172>
 80018ec:	e2d0      	b.n	8001e90 <__aeabi_dsub+0x714>
 80018ee:	4649      	mov	r1, r9
 80018f0:	2900      	cmp	r1, #0
 80018f2:	d000      	beq.n	80018f6 <__aeabi_dsub+0x17a>
 80018f4:	e0d4      	b.n	8001aa0 <__aeabi_dsub+0x324>
 80018f6:	4661      	mov	r1, ip
 80018f8:	9b02      	ldr	r3, [sp, #8]
 80018fa:	4319      	orrs	r1, r3
 80018fc:	d100      	bne.n	8001900 <__aeabi_dsub+0x184>
 80018fe:	e12b      	b.n	8001b58 <__aeabi_dsub+0x3dc>
 8001900:	1e69      	subs	r1, r5, #1
 8001902:	2d01      	cmp	r5, #1
 8001904:	d100      	bne.n	8001908 <__aeabi_dsub+0x18c>
 8001906:	e1d9      	b.n	8001cbc <__aeabi_dsub+0x540>
 8001908:	4295      	cmp	r5, r2
 800190a:	d100      	bne.n	800190e <__aeabi_dsub+0x192>
 800190c:	e10a      	b.n	8001b24 <__aeabi_dsub+0x3a8>
 800190e:	2501      	movs	r5, #1
 8001910:	2938      	cmp	r1, #56	@ 0x38
 8001912:	dc17      	bgt.n	8001944 <__aeabi_dsub+0x1c8>
 8001914:	468a      	mov	sl, r1
 8001916:	4653      	mov	r3, sl
 8001918:	2b1f      	cmp	r3, #31
 800191a:	dd00      	ble.n	800191e <__aeabi_dsub+0x1a2>
 800191c:	e1e7      	b.n	8001cee <__aeabi_dsub+0x572>
 800191e:	2220      	movs	r2, #32
 8001920:	1ad2      	subs	r2, r2, r3
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	4661      	mov	r1, ip
 8001926:	4093      	lsls	r3, r2
 8001928:	001d      	movs	r5, r3
 800192a:	4653      	mov	r3, sl
 800192c:	40d9      	lsrs	r1, r3
 800192e:	4663      	mov	r3, ip
 8001930:	4093      	lsls	r3, r2
 8001932:	001a      	movs	r2, r3
 8001934:	430d      	orrs	r5, r1
 8001936:	1e51      	subs	r1, r2, #1
 8001938:	418a      	sbcs	r2, r1
 800193a:	4653      	mov	r3, sl
 800193c:	4315      	orrs	r5, r2
 800193e:	9a02      	ldr	r2, [sp, #8]
 8001940:	40da      	lsrs	r2, r3
 8001942:	18a4      	adds	r4, r4, r2
 8001944:	182d      	adds	r5, r5, r0
 8001946:	4285      	cmp	r5, r0
 8001948:	4180      	sbcs	r0, r0
 800194a:	4240      	negs	r0, r0
 800194c:	1824      	adds	r4, r4, r0
 800194e:	0223      	lsls	r3, r4, #8
 8001950:	d400      	bmi.n	8001954 <__aeabi_dsub+0x1d8>
 8001952:	e0b6      	b.n	8001ac2 <__aeabi_dsub+0x346>
 8001954:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad0 <__aeabi_dsub+0x354>)
 8001956:	3701      	adds	r7, #1
 8001958:	429f      	cmp	r7, r3
 800195a:	d100      	bne.n	800195e <__aeabi_dsub+0x1e2>
 800195c:	e0ad      	b.n	8001aba <__aeabi_dsub+0x33e>
 800195e:	2101      	movs	r1, #1
 8001960:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad4 <__aeabi_dsub+0x358>)
 8001962:	086a      	lsrs	r2, r5, #1
 8001964:	401c      	ands	r4, r3
 8001966:	4029      	ands	r1, r5
 8001968:	430a      	orrs	r2, r1
 800196a:	07e5      	lsls	r5, r4, #31
 800196c:	4315      	orrs	r5, r2
 800196e:	0864      	lsrs	r4, r4, #1
 8001970:	e78d      	b.n	800188e <__aeabi_dsub+0x112>
 8001972:	4a59      	ldr	r2, [pc, #356]	@ (8001ad8 <__aeabi_dsub+0x35c>)
 8001974:	9b02      	ldr	r3, [sp, #8]
 8001976:	4692      	mov	sl, r2
 8001978:	4662      	mov	r2, ip
 800197a:	44ba      	add	sl, r7
 800197c:	431a      	orrs	r2, r3
 800197e:	d02c      	beq.n	80019da <__aeabi_dsub+0x25e>
 8001980:	428e      	cmp	r6, r1
 8001982:	d02e      	beq.n	80019e2 <__aeabi_dsub+0x266>
 8001984:	4652      	mov	r2, sl
 8001986:	2a00      	cmp	r2, #0
 8001988:	d060      	beq.n	8001a4c <__aeabi_dsub+0x2d0>
 800198a:	2f00      	cmp	r7, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x214>
 800198e:	e0db      	b.n	8001b48 <__aeabi_dsub+0x3cc>
 8001990:	4663      	mov	r3, ip
 8001992:	000e      	movs	r6, r1
 8001994:	9c02      	ldr	r4, [sp, #8]
 8001996:	08d8      	lsrs	r0, r3, #3
 8001998:	0762      	lsls	r2, r4, #29
 800199a:	4302      	orrs	r2, r0
 800199c:	08e4      	lsrs	r4, r4, #3
 800199e:	0013      	movs	r3, r2
 80019a0:	4323      	orrs	r3, r4
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dsub+0x22a>
 80019a4:	e254      	b.n	8001e50 <__aeabi_dsub+0x6d4>
 80019a6:	2580      	movs	r5, #128	@ 0x80
 80019a8:	032d      	lsls	r5, r5, #12
 80019aa:	4325      	orrs	r5, r4
 80019ac:	032d      	lsls	r5, r5, #12
 80019ae:	4c48      	ldr	r4, [pc, #288]	@ (8001ad0 <__aeabi_dsub+0x354>)
 80019b0:	0b2d      	lsrs	r5, r5, #12
 80019b2:	e78c      	b.n	80018ce <__aeabi_dsub+0x152>
 80019b4:	4661      	mov	r1, ip
 80019b6:	9b02      	ldr	r3, [sp, #8]
 80019b8:	4319      	orrs	r1, r3
 80019ba:	d100      	bne.n	80019be <__aeabi_dsub+0x242>
 80019bc:	e0cc      	b.n	8001b58 <__aeabi_dsub+0x3dc>
 80019be:	0029      	movs	r1, r5
 80019c0:	3901      	subs	r1, #1
 80019c2:	2d01      	cmp	r5, #1
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x24c>
 80019c6:	e188      	b.n	8001cda <__aeabi_dsub+0x55e>
 80019c8:	4295      	cmp	r5, r2
 80019ca:	d100      	bne.n	80019ce <__aeabi_dsub+0x252>
 80019cc:	e0aa      	b.n	8001b24 <__aeabi_dsub+0x3a8>
 80019ce:	2501      	movs	r5, #1
 80019d0:	2938      	cmp	r1, #56	@ 0x38
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dsub+0x25a>
 80019d4:	e72f      	b.n	8001836 <__aeabi_dsub+0xba>
 80019d6:	468a      	mov	sl, r1
 80019d8:	e718      	b.n	800180c <__aeabi_dsub+0x90>
 80019da:	2201      	movs	r2, #1
 80019dc:	4051      	eors	r1, r2
 80019de:	428e      	cmp	r6, r1
 80019e0:	d1d0      	bne.n	8001984 <__aeabi_dsub+0x208>
 80019e2:	4653      	mov	r3, sl
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d100      	bne.n	80019ea <__aeabi_dsub+0x26e>
 80019e8:	e0be      	b.n	8001b68 <__aeabi_dsub+0x3ec>
 80019ea:	2f00      	cmp	r7, #0
 80019ec:	d000      	beq.n	80019f0 <__aeabi_dsub+0x274>
 80019ee:	e138      	b.n	8001c62 <__aeabi_dsub+0x4e6>
 80019f0:	46ca      	mov	sl, r9
 80019f2:	0022      	movs	r2, r4
 80019f4:	4302      	orrs	r2, r0
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x27e>
 80019f8:	e1e2      	b.n	8001dc0 <__aeabi_dsub+0x644>
 80019fa:	4653      	mov	r3, sl
 80019fc:	1e59      	subs	r1, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x288>
 8001a02:	e20d      	b.n	8001e20 <__aeabi_dsub+0x6a4>
 8001a04:	4a32      	ldr	r2, [pc, #200]	@ (8001ad0 <__aeabi_dsub+0x354>)
 8001a06:	4592      	cmp	sl, r2
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x290>
 8001a0a:	e1d2      	b.n	8001db2 <__aeabi_dsub+0x636>
 8001a0c:	2701      	movs	r7, #1
 8001a0e:	2938      	cmp	r1, #56	@ 0x38
 8001a10:	dc13      	bgt.n	8001a3a <__aeabi_dsub+0x2be>
 8001a12:	291f      	cmp	r1, #31
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_dsub+0x29c>
 8001a16:	e1ee      	b.n	8001df6 <__aeabi_dsub+0x67a>
 8001a18:	2220      	movs	r2, #32
 8001a1a:	9b02      	ldr	r3, [sp, #8]
 8001a1c:	1a52      	subs	r2, r2, r1
 8001a1e:	0025      	movs	r5, r4
 8001a20:	0007      	movs	r7, r0
 8001a22:	469a      	mov	sl, r3
 8001a24:	40cc      	lsrs	r4, r1
 8001a26:	4090      	lsls	r0, r2
 8001a28:	4095      	lsls	r5, r2
 8001a2a:	40cf      	lsrs	r7, r1
 8001a2c:	44a2      	add	sl, r4
 8001a2e:	1e42      	subs	r2, r0, #1
 8001a30:	4190      	sbcs	r0, r2
 8001a32:	4653      	mov	r3, sl
 8001a34:	432f      	orrs	r7, r5
 8001a36:	4307      	orrs	r7, r0
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	003d      	movs	r5, r7
 8001a3c:	4465      	add	r5, ip
 8001a3e:	4565      	cmp	r5, ip
 8001a40:	4192      	sbcs	r2, r2
 8001a42:	9b02      	ldr	r3, [sp, #8]
 8001a44:	4252      	negs	r2, r2
 8001a46:	464f      	mov	r7, r9
 8001a48:	18d4      	adds	r4, r2, r3
 8001a4a:	e780      	b.n	800194e <__aeabi_dsub+0x1d2>
 8001a4c:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <__aeabi_dsub+0x360>)
 8001a4e:	1c7d      	adds	r5, r7, #1
 8001a50:	4215      	tst	r5, r2
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x2da>
 8001a54:	e0aa      	b.n	8001bac <__aeabi_dsub+0x430>
 8001a56:	4662      	mov	r2, ip
 8001a58:	0025      	movs	r5, r4
 8001a5a:	9b02      	ldr	r3, [sp, #8]
 8001a5c:	4305      	orrs	r5, r0
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	2f00      	cmp	r7, #0
 8001a62:	d000      	beq.n	8001a66 <__aeabi_dsub+0x2ea>
 8001a64:	e0f5      	b.n	8001c52 <__aeabi_dsub+0x4d6>
 8001a66:	2d00      	cmp	r5, #0
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dsub+0x2f0>
 8001a6a:	e16b      	b.n	8001d44 <__aeabi_dsub+0x5c8>
 8001a6c:	2a00      	cmp	r2, #0
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x2f6>
 8001a70:	e152      	b.n	8001d18 <__aeabi_dsub+0x59c>
 8001a72:	4663      	mov	r3, ip
 8001a74:	1ac5      	subs	r5, r0, r3
 8001a76:	9b02      	ldr	r3, [sp, #8]
 8001a78:	1ae2      	subs	r2, r4, r3
 8001a7a:	42a8      	cmp	r0, r5
 8001a7c:	419b      	sbcs	r3, r3
 8001a7e:	425b      	negs	r3, r3
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	021a      	lsls	r2, r3, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dsub+0x30c>
 8001a86:	e1d5      	b.n	8001e34 <__aeabi_dsub+0x6b8>
 8001a88:	4663      	mov	r3, ip
 8001a8a:	1a1d      	subs	r5, r3, r0
 8001a8c:	45ac      	cmp	ip, r5
 8001a8e:	4192      	sbcs	r2, r2
 8001a90:	2601      	movs	r6, #1
 8001a92:	9b02      	ldr	r3, [sp, #8]
 8001a94:	4252      	negs	r2, r2
 8001a96:	1b1c      	subs	r4, r3, r4
 8001a98:	4688      	mov	r8, r1
 8001a9a:	1aa4      	subs	r4, r4, r2
 8001a9c:	400e      	ands	r6, r1
 8001a9e:	e6f6      	b.n	800188e <__aeabi_dsub+0x112>
 8001aa0:	4297      	cmp	r7, r2
 8001aa2:	d03f      	beq.n	8001b24 <__aeabi_dsub+0x3a8>
 8001aa4:	4652      	mov	r2, sl
 8001aa6:	2501      	movs	r5, #1
 8001aa8:	2a38      	cmp	r2, #56	@ 0x38
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_dsub+0x332>
 8001aac:	e74a      	b.n	8001944 <__aeabi_dsub+0x1c8>
 8001aae:	2280      	movs	r2, #128	@ 0x80
 8001ab0:	9b02      	ldr	r3, [sp, #8]
 8001ab2:	0412      	lsls	r2, r2, #16
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	e72d      	b.n	8001916 <__aeabi_dsub+0x19a>
 8001aba:	003c      	movs	r4, r7
 8001abc:	2500      	movs	r5, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	e705      	b.n	80018ce <__aeabi_dsub+0x152>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	402b      	ands	r3, r5
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d000      	beq.n	8001acc <__aeabi_dsub+0x350>
 8001aca:	e6e2      	b.n	8001892 <__aeabi_dsub+0x116>
 8001acc:	e06b      	b.n	8001ba6 <__aeabi_dsub+0x42a>
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	ff7fffff 	.word	0xff7fffff
 8001ad8:	fffff801 	.word	0xfffff801
 8001adc:	000007fe 	.word	0x000007fe
 8001ae0:	0028      	movs	r0, r5
 8001ae2:	f000 fa73 	bl	8001fcc <__clzsi2>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	3318      	adds	r3, #24
 8001aea:	2b1f      	cmp	r3, #31
 8001aec:	dc00      	bgt.n	8001af0 <__aeabi_dsub+0x374>
 8001aee:	e6b4      	b.n	800185a <__aeabi_dsub+0xde>
 8001af0:	002a      	movs	r2, r5
 8001af2:	3808      	subs	r0, #8
 8001af4:	4082      	lsls	r2, r0
 8001af6:	429f      	cmp	r7, r3
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dsub+0x380>
 8001afa:	e0b9      	b.n	8001c70 <__aeabi_dsub+0x4f4>
 8001afc:	1bdb      	subs	r3, r3, r7
 8001afe:	1c58      	adds	r0, r3, #1
 8001b00:	281f      	cmp	r0, #31
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x38a>
 8001b04:	e1a0      	b.n	8001e48 <__aeabi_dsub+0x6cc>
 8001b06:	0015      	movs	r5, r2
 8001b08:	3b1f      	subs	r3, #31
 8001b0a:	40dd      	lsrs	r5, r3
 8001b0c:	2820      	cmp	r0, #32
 8001b0e:	d005      	beq.n	8001b1c <__aeabi_dsub+0x3a0>
 8001b10:	2340      	movs	r3, #64	@ 0x40
 8001b12:	1a1b      	subs	r3, r3, r0
 8001b14:	409a      	lsls	r2, r3
 8001b16:	1e53      	subs	r3, r2, #1
 8001b18:	419a      	sbcs	r2, r3
 8001b1a:	4315      	orrs	r5, r2
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	2700      	movs	r7, #0
 8001b20:	402b      	ands	r3, r5
 8001b22:	e7d0      	b.n	8001ac6 <__aeabi_dsub+0x34a>
 8001b24:	08c0      	lsrs	r0, r0, #3
 8001b26:	0762      	lsls	r2, r4, #29
 8001b28:	4302      	orrs	r2, r0
 8001b2a:	08e4      	lsrs	r4, r4, #3
 8001b2c:	e737      	b.n	800199e <__aeabi_dsub+0x222>
 8001b2e:	08ea      	lsrs	r2, r5, #3
 8001b30:	0763      	lsls	r3, r4, #29
 8001b32:	431a      	orrs	r2, r3
 8001b34:	4bd3      	ldr	r3, [pc, #844]	@ (8001e84 <__aeabi_dsub+0x708>)
 8001b36:	08e4      	lsrs	r4, r4, #3
 8001b38:	429f      	cmp	r7, r3
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x3c2>
 8001b3c:	e72f      	b.n	800199e <__aeabi_dsub+0x222>
 8001b3e:	0324      	lsls	r4, r4, #12
 8001b40:	0b25      	lsrs	r5, r4, #12
 8001b42:	057c      	lsls	r4, r7, #21
 8001b44:	0d64      	lsrs	r4, r4, #21
 8001b46:	e6c2      	b.n	80018ce <__aeabi_dsub+0x152>
 8001b48:	46ca      	mov	sl, r9
 8001b4a:	0022      	movs	r2, r4
 8001b4c:	4302      	orrs	r2, r0
 8001b4e:	d158      	bne.n	8001c02 <__aeabi_dsub+0x486>
 8001b50:	4663      	mov	r3, ip
 8001b52:	000e      	movs	r6, r1
 8001b54:	9c02      	ldr	r4, [sp, #8]
 8001b56:	9303      	str	r3, [sp, #12]
 8001b58:	9b03      	ldr	r3, [sp, #12]
 8001b5a:	4657      	mov	r7, sl
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	e7e7      	b.n	8001b30 <__aeabi_dsub+0x3b4>
 8001b60:	4cc9      	ldr	r4, [pc, #804]	@ (8001e88 <__aeabi_dsub+0x70c>)
 8001b62:	1aff      	subs	r7, r7, r3
 8001b64:	4014      	ands	r4, r2
 8001b66:	e692      	b.n	800188e <__aeabi_dsub+0x112>
 8001b68:	4dc8      	ldr	r5, [pc, #800]	@ (8001e8c <__aeabi_dsub+0x710>)
 8001b6a:	1c7a      	adds	r2, r7, #1
 8001b6c:	422a      	tst	r2, r5
 8001b6e:	d000      	beq.n	8001b72 <__aeabi_dsub+0x3f6>
 8001b70:	e084      	b.n	8001c7c <__aeabi_dsub+0x500>
 8001b72:	0022      	movs	r2, r4
 8001b74:	4302      	orrs	r2, r0
 8001b76:	2f00      	cmp	r7, #0
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dsub+0x400>
 8001b7a:	e0ef      	b.n	8001d5c <__aeabi_dsub+0x5e0>
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dsub+0x406>
 8001b80:	e0e5      	b.n	8001d4e <__aeabi_dsub+0x5d2>
 8001b82:	4662      	mov	r2, ip
 8001b84:	9902      	ldr	r1, [sp, #8]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x410>
 8001b8a:	e0c5      	b.n	8001d18 <__aeabi_dsub+0x59c>
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	18c5      	adds	r5, r0, r3
 8001b90:	468c      	mov	ip, r1
 8001b92:	4285      	cmp	r5, r0
 8001b94:	4180      	sbcs	r0, r0
 8001b96:	4464      	add	r4, ip
 8001b98:	4240      	negs	r0, r0
 8001b9a:	1824      	adds	r4, r4, r0
 8001b9c:	0223      	lsls	r3, r4, #8
 8001b9e:	d502      	bpl.n	8001ba6 <__aeabi_dsub+0x42a>
 8001ba0:	4bb9      	ldr	r3, [pc, #740]	@ (8001e88 <__aeabi_dsub+0x70c>)
 8001ba2:	3701      	adds	r7, #1
 8001ba4:	401c      	ands	r4, r3
 8001ba6:	46ba      	mov	sl, r7
 8001ba8:	9503      	str	r5, [sp, #12]
 8001baa:	e7d5      	b.n	8001b58 <__aeabi_dsub+0x3dc>
 8001bac:	4662      	mov	r2, ip
 8001bae:	1a85      	subs	r5, r0, r2
 8001bb0:	42a8      	cmp	r0, r5
 8001bb2:	4192      	sbcs	r2, r2
 8001bb4:	4252      	negs	r2, r2
 8001bb6:	4691      	mov	r9, r2
 8001bb8:	9b02      	ldr	r3, [sp, #8]
 8001bba:	1ae3      	subs	r3, r4, r3
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	1ad2      	subs	r2, r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	4691      	mov	r9, r2
 8001bc6:	021a      	lsls	r2, r3, #8
 8001bc8:	d46c      	bmi.n	8001ca4 <__aeabi_dsub+0x528>
 8001bca:	464a      	mov	r2, r9
 8001bcc:	464c      	mov	r4, r9
 8001bce:	432a      	orrs	r2, r5
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_dsub+0x458>
 8001bd2:	e63a      	b.n	800184a <__aeabi_dsub+0xce>
 8001bd4:	2600      	movs	r6, #0
 8001bd6:	2400      	movs	r4, #0
 8001bd8:	2500      	movs	r5, #0
 8001bda:	e678      	b.n	80018ce <__aeabi_dsub+0x152>
 8001bdc:	9902      	ldr	r1, [sp, #8]
 8001bde:	4653      	mov	r3, sl
 8001be0:	000d      	movs	r5, r1
 8001be2:	3a20      	subs	r2, #32
 8001be4:	40d5      	lsrs	r5, r2
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d006      	beq.n	8001bf8 <__aeabi_dsub+0x47c>
 8001bea:	2240      	movs	r2, #64	@ 0x40
 8001bec:	1ad2      	subs	r2, r2, r3
 8001bee:	000b      	movs	r3, r1
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	4662      	mov	r2, ip
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	4693      	mov	fp, r2
 8001bf8:	465b      	mov	r3, fp
 8001bfa:	1e5a      	subs	r2, r3, #1
 8001bfc:	4193      	sbcs	r3, r2
 8001bfe:	431d      	orrs	r5, r3
 8001c00:	e619      	b.n	8001836 <__aeabi_dsub+0xba>
 8001c02:	4653      	mov	r3, sl
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x490>
 8001c0a:	e0c6      	b.n	8001d9a <__aeabi_dsub+0x61e>
 8001c0c:	4e9d      	ldr	r6, [pc, #628]	@ (8001e84 <__aeabi_dsub+0x708>)
 8001c0e:	45b2      	cmp	sl, r6
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x498>
 8001c12:	e6bd      	b.n	8001990 <__aeabi_dsub+0x214>
 8001c14:	4688      	mov	r8, r1
 8001c16:	000e      	movs	r6, r1
 8001c18:	2501      	movs	r5, #1
 8001c1a:	2a38      	cmp	r2, #56	@ 0x38
 8001c1c:	dc10      	bgt.n	8001c40 <__aeabi_dsub+0x4c4>
 8001c1e:	2a1f      	cmp	r2, #31
 8001c20:	dc7f      	bgt.n	8001d22 <__aeabi_dsub+0x5a6>
 8001c22:	2120      	movs	r1, #32
 8001c24:	0025      	movs	r5, r4
 8001c26:	1a89      	subs	r1, r1, r2
 8001c28:	0007      	movs	r7, r0
 8001c2a:	4088      	lsls	r0, r1
 8001c2c:	408d      	lsls	r5, r1
 8001c2e:	40d7      	lsrs	r7, r2
 8001c30:	40d4      	lsrs	r4, r2
 8001c32:	1e41      	subs	r1, r0, #1
 8001c34:	4188      	sbcs	r0, r1
 8001c36:	9b02      	ldr	r3, [sp, #8]
 8001c38:	433d      	orrs	r5, r7
 8001c3a:	1b1b      	subs	r3, r3, r4
 8001c3c:	4305      	orrs	r5, r0
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	4662      	mov	r2, ip
 8001c42:	1b55      	subs	r5, r2, r5
 8001c44:	45ac      	cmp	ip, r5
 8001c46:	4192      	sbcs	r2, r2
 8001c48:	9b02      	ldr	r3, [sp, #8]
 8001c4a:	4252      	negs	r2, r2
 8001c4c:	464f      	mov	r7, r9
 8001c4e:	1a9c      	subs	r4, r3, r2
 8001c50:	e5f6      	b.n	8001840 <__aeabi_dsub+0xc4>
 8001c52:	2d00      	cmp	r5, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x4dc>
 8001c56:	e0b7      	b.n	8001dc8 <__aeabi_dsub+0x64c>
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x4e2>
 8001c5c:	e0f0      	b.n	8001e40 <__aeabi_dsub+0x6c4>
 8001c5e:	2601      	movs	r6, #1
 8001c60:	400e      	ands	r6, r1
 8001c62:	4663      	mov	r3, ip
 8001c64:	9802      	ldr	r0, [sp, #8]
 8001c66:	08d9      	lsrs	r1, r3, #3
 8001c68:	0742      	lsls	r2, r0, #29
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	08c4      	lsrs	r4, r0, #3
 8001c6e:	e696      	b.n	800199e <__aeabi_dsub+0x222>
 8001c70:	4c85      	ldr	r4, [pc, #532]	@ (8001e88 <__aeabi_dsub+0x70c>)
 8001c72:	1aff      	subs	r7, r7, r3
 8001c74:	4014      	ands	r4, r2
 8001c76:	0762      	lsls	r2, r4, #29
 8001c78:	08e4      	lsrs	r4, r4, #3
 8001c7a:	e760      	b.n	8001b3e <__aeabi_dsub+0x3c2>
 8001c7c:	4981      	ldr	r1, [pc, #516]	@ (8001e84 <__aeabi_dsub+0x708>)
 8001c7e:	428a      	cmp	r2, r1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x508>
 8001c82:	e0c9      	b.n	8001e18 <__aeabi_dsub+0x69c>
 8001c84:	4663      	mov	r3, ip
 8001c86:	18c1      	adds	r1, r0, r3
 8001c88:	4281      	cmp	r1, r0
 8001c8a:	4180      	sbcs	r0, r0
 8001c8c:	9b02      	ldr	r3, [sp, #8]
 8001c8e:	4240      	negs	r0, r0
 8001c90:	18e3      	adds	r3, r4, r3
 8001c92:	181b      	adds	r3, r3, r0
 8001c94:	07dd      	lsls	r5, r3, #31
 8001c96:	085c      	lsrs	r4, r3, #1
 8001c98:	2307      	movs	r3, #7
 8001c9a:	0849      	lsrs	r1, r1, #1
 8001c9c:	430d      	orrs	r5, r1
 8001c9e:	0017      	movs	r7, r2
 8001ca0:	402b      	ands	r3, r5
 8001ca2:	e710      	b.n	8001ac6 <__aeabi_dsub+0x34a>
 8001ca4:	4663      	mov	r3, ip
 8001ca6:	1a1d      	subs	r5, r3, r0
 8001ca8:	45ac      	cmp	ip, r5
 8001caa:	4192      	sbcs	r2, r2
 8001cac:	2601      	movs	r6, #1
 8001cae:	9b02      	ldr	r3, [sp, #8]
 8001cb0:	4252      	negs	r2, r2
 8001cb2:	1b1c      	subs	r4, r3, r4
 8001cb4:	4688      	mov	r8, r1
 8001cb6:	1aa4      	subs	r4, r4, r2
 8001cb8:	400e      	ands	r6, r1
 8001cba:	e5c6      	b.n	800184a <__aeabi_dsub+0xce>
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	18c5      	adds	r5, r0, r3
 8001cc0:	9b02      	ldr	r3, [sp, #8]
 8001cc2:	4285      	cmp	r5, r0
 8001cc4:	4180      	sbcs	r0, r0
 8001cc6:	469c      	mov	ip, r3
 8001cc8:	4240      	negs	r0, r0
 8001cca:	4464      	add	r4, ip
 8001ccc:	1824      	adds	r4, r4, r0
 8001cce:	2701      	movs	r7, #1
 8001cd0:	0223      	lsls	r3, r4, #8
 8001cd2:	d400      	bmi.n	8001cd6 <__aeabi_dsub+0x55a>
 8001cd4:	e6f5      	b.n	8001ac2 <__aeabi_dsub+0x346>
 8001cd6:	2702      	movs	r7, #2
 8001cd8:	e641      	b.n	800195e <__aeabi_dsub+0x1e2>
 8001cda:	4663      	mov	r3, ip
 8001cdc:	1ac5      	subs	r5, r0, r3
 8001cde:	42a8      	cmp	r0, r5
 8001ce0:	4180      	sbcs	r0, r0
 8001ce2:	9b02      	ldr	r3, [sp, #8]
 8001ce4:	4240      	negs	r0, r0
 8001ce6:	1ae4      	subs	r4, r4, r3
 8001ce8:	2701      	movs	r7, #1
 8001cea:	1a24      	subs	r4, r4, r0
 8001cec:	e5a8      	b.n	8001840 <__aeabi_dsub+0xc4>
 8001cee:	9d02      	ldr	r5, [sp, #8]
 8001cf0:	4652      	mov	r2, sl
 8001cf2:	002b      	movs	r3, r5
 8001cf4:	3a20      	subs	r2, #32
 8001cf6:	40d3      	lsrs	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d006      	beq.n	8001d0e <__aeabi_dsub+0x592>
 8001d00:	2240      	movs	r2, #64	@ 0x40
 8001d02:	1ad2      	subs	r2, r2, r3
 8001d04:	002b      	movs	r3, r5
 8001d06:	4093      	lsls	r3, r2
 8001d08:	4662      	mov	r2, ip
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	4693      	mov	fp, r2
 8001d0e:	465d      	mov	r5, fp
 8001d10:	1e6b      	subs	r3, r5, #1
 8001d12:	419d      	sbcs	r5, r3
 8001d14:	430d      	orrs	r5, r1
 8001d16:	e615      	b.n	8001944 <__aeabi_dsub+0x1c8>
 8001d18:	0762      	lsls	r2, r4, #29
 8001d1a:	08c0      	lsrs	r0, r0, #3
 8001d1c:	4302      	orrs	r2, r0
 8001d1e:	08e4      	lsrs	r4, r4, #3
 8001d20:	e70d      	b.n	8001b3e <__aeabi_dsub+0x3c2>
 8001d22:	0011      	movs	r1, r2
 8001d24:	0027      	movs	r7, r4
 8001d26:	3920      	subs	r1, #32
 8001d28:	40cf      	lsrs	r7, r1
 8001d2a:	2a20      	cmp	r2, #32
 8001d2c:	d005      	beq.n	8001d3a <__aeabi_dsub+0x5be>
 8001d2e:	2140      	movs	r1, #64	@ 0x40
 8001d30:	1a8a      	subs	r2, r1, r2
 8001d32:	4094      	lsls	r4, r2
 8001d34:	0025      	movs	r5, r4
 8001d36:	4305      	orrs	r5, r0
 8001d38:	9503      	str	r5, [sp, #12]
 8001d3a:	9d03      	ldr	r5, [sp, #12]
 8001d3c:	1e6a      	subs	r2, r5, #1
 8001d3e:	4195      	sbcs	r5, r2
 8001d40:	433d      	orrs	r5, r7
 8001d42:	e77d      	b.n	8001c40 <__aeabi_dsub+0x4c4>
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x5ce>
 8001d48:	e744      	b.n	8001bd4 <__aeabi_dsub+0x458>
 8001d4a:	2601      	movs	r6, #1
 8001d4c:	400e      	ands	r6, r1
 8001d4e:	4663      	mov	r3, ip
 8001d50:	08d9      	lsrs	r1, r3, #3
 8001d52:	9b02      	ldr	r3, [sp, #8]
 8001d54:	075a      	lsls	r2, r3, #29
 8001d56:	430a      	orrs	r2, r1
 8001d58:	08dc      	lsrs	r4, r3, #3
 8001d5a:	e6f0      	b.n	8001b3e <__aeabi_dsub+0x3c2>
 8001d5c:	2a00      	cmp	r2, #0
 8001d5e:	d028      	beq.n	8001db2 <__aeabi_dsub+0x636>
 8001d60:	4662      	mov	r2, ip
 8001d62:	9f02      	ldr	r7, [sp, #8]
 8001d64:	08c0      	lsrs	r0, r0, #3
 8001d66:	433a      	orrs	r2, r7
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x5f0>
 8001d6a:	e6dc      	b.n	8001b26 <__aeabi_dsub+0x3aa>
 8001d6c:	0762      	lsls	r2, r4, #29
 8001d6e:	4310      	orrs	r0, r2
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	08e4      	lsrs	r4, r4, #3
 8001d74:	0312      	lsls	r2, r2, #12
 8001d76:	4214      	tst	r4, r2
 8001d78:	d009      	beq.n	8001d8e <__aeabi_dsub+0x612>
 8001d7a:	08fd      	lsrs	r5, r7, #3
 8001d7c:	4215      	tst	r5, r2
 8001d7e:	d106      	bne.n	8001d8e <__aeabi_dsub+0x612>
 8001d80:	4663      	mov	r3, ip
 8001d82:	2601      	movs	r6, #1
 8001d84:	002c      	movs	r4, r5
 8001d86:	08d8      	lsrs	r0, r3, #3
 8001d88:	077b      	lsls	r3, r7, #29
 8001d8a:	4318      	orrs	r0, r3
 8001d8c:	400e      	ands	r6, r1
 8001d8e:	0f42      	lsrs	r2, r0, #29
 8001d90:	00c0      	lsls	r0, r0, #3
 8001d92:	08c0      	lsrs	r0, r0, #3
 8001d94:	0752      	lsls	r2, r2, #29
 8001d96:	4302      	orrs	r2, r0
 8001d98:	e601      	b.n	800199e <__aeabi_dsub+0x222>
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	1a1d      	subs	r5, r3, r0
 8001d9e:	45ac      	cmp	ip, r5
 8001da0:	4192      	sbcs	r2, r2
 8001da2:	9b02      	ldr	r3, [sp, #8]
 8001da4:	4252      	negs	r2, r2
 8001da6:	1b1c      	subs	r4, r3, r4
 8001da8:	000e      	movs	r6, r1
 8001daa:	4688      	mov	r8, r1
 8001dac:	2701      	movs	r7, #1
 8001dae:	1aa4      	subs	r4, r4, r2
 8001db0:	e546      	b.n	8001840 <__aeabi_dsub+0xc4>
 8001db2:	4663      	mov	r3, ip
 8001db4:	08d9      	lsrs	r1, r3, #3
 8001db6:	9b02      	ldr	r3, [sp, #8]
 8001db8:	075a      	lsls	r2, r3, #29
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	08dc      	lsrs	r4, r3, #3
 8001dbe:	e5ee      	b.n	800199e <__aeabi_dsub+0x222>
 8001dc0:	4663      	mov	r3, ip
 8001dc2:	9c02      	ldr	r4, [sp, #8]
 8001dc4:	9303      	str	r3, [sp, #12]
 8001dc6:	e6c7      	b.n	8001b58 <__aeabi_dsub+0x3dc>
 8001dc8:	08c0      	lsrs	r0, r0, #3
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x654>
 8001dce:	e6aa      	b.n	8001b26 <__aeabi_dsub+0x3aa>
 8001dd0:	0762      	lsls	r2, r4, #29
 8001dd2:	4310      	orrs	r0, r2
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	08e4      	lsrs	r4, r4, #3
 8001dd8:	0312      	lsls	r2, r2, #12
 8001dda:	4214      	tst	r4, r2
 8001ddc:	d0d7      	beq.n	8001d8e <__aeabi_dsub+0x612>
 8001dde:	9f02      	ldr	r7, [sp, #8]
 8001de0:	08fd      	lsrs	r5, r7, #3
 8001de2:	4215      	tst	r5, r2
 8001de4:	d1d3      	bne.n	8001d8e <__aeabi_dsub+0x612>
 8001de6:	4663      	mov	r3, ip
 8001de8:	2601      	movs	r6, #1
 8001dea:	08d8      	lsrs	r0, r3, #3
 8001dec:	077b      	lsls	r3, r7, #29
 8001dee:	002c      	movs	r4, r5
 8001df0:	4318      	orrs	r0, r3
 8001df2:	400e      	ands	r6, r1
 8001df4:	e7cb      	b.n	8001d8e <__aeabi_dsub+0x612>
 8001df6:	000a      	movs	r2, r1
 8001df8:	0027      	movs	r7, r4
 8001dfa:	3a20      	subs	r2, #32
 8001dfc:	40d7      	lsrs	r7, r2
 8001dfe:	2920      	cmp	r1, #32
 8001e00:	d005      	beq.n	8001e0e <__aeabi_dsub+0x692>
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	1a52      	subs	r2, r2, r1
 8001e06:	4094      	lsls	r4, r2
 8001e08:	0025      	movs	r5, r4
 8001e0a:	4305      	orrs	r5, r0
 8001e0c:	9503      	str	r5, [sp, #12]
 8001e0e:	9d03      	ldr	r5, [sp, #12]
 8001e10:	1e6a      	subs	r2, r5, #1
 8001e12:	4195      	sbcs	r5, r2
 8001e14:	432f      	orrs	r7, r5
 8001e16:	e610      	b.n	8001a3a <__aeabi_dsub+0x2be>
 8001e18:	0014      	movs	r4, r2
 8001e1a:	2500      	movs	r5, #0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	e556      	b.n	80018ce <__aeabi_dsub+0x152>
 8001e20:	9b02      	ldr	r3, [sp, #8]
 8001e22:	4460      	add	r0, ip
 8001e24:	4699      	mov	r9, r3
 8001e26:	4560      	cmp	r0, ip
 8001e28:	4192      	sbcs	r2, r2
 8001e2a:	444c      	add	r4, r9
 8001e2c:	4252      	negs	r2, r2
 8001e2e:	0005      	movs	r5, r0
 8001e30:	18a4      	adds	r4, r4, r2
 8001e32:	e74c      	b.n	8001cce <__aeabi_dsub+0x552>
 8001e34:	001a      	movs	r2, r3
 8001e36:	001c      	movs	r4, r3
 8001e38:	432a      	orrs	r2, r5
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_dsub+0x6c2>
 8001e3c:	e6b3      	b.n	8001ba6 <__aeabi_dsub+0x42a>
 8001e3e:	e6c9      	b.n	8001bd4 <__aeabi_dsub+0x458>
 8001e40:	2480      	movs	r4, #128	@ 0x80
 8001e42:	2600      	movs	r6, #0
 8001e44:	0324      	lsls	r4, r4, #12
 8001e46:	e5ae      	b.n	80019a6 <__aeabi_dsub+0x22a>
 8001e48:	2120      	movs	r1, #32
 8001e4a:	2500      	movs	r5, #0
 8001e4c:	1a09      	subs	r1, r1, r0
 8001e4e:	e517      	b.n	8001880 <__aeabi_dsub+0x104>
 8001e50:	2200      	movs	r2, #0
 8001e52:	2500      	movs	r5, #0
 8001e54:	4c0b      	ldr	r4, [pc, #44]	@ (8001e84 <__aeabi_dsub+0x708>)
 8001e56:	e53a      	b.n	80018ce <__aeabi_dsub+0x152>
 8001e58:	2d00      	cmp	r5, #0
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_dsub+0x6e2>
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0x2d0>
 8001e5e:	464b      	mov	r3, r9
 8001e60:	1bda      	subs	r2, r3, r7
 8001e62:	4692      	mov	sl, r2
 8001e64:	2f00      	cmp	r7, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x6ee>
 8001e68:	e66f      	b.n	8001b4a <__aeabi_dsub+0x3ce>
 8001e6a:	2a38      	cmp	r2, #56	@ 0x38
 8001e6c:	dc05      	bgt.n	8001e7a <__aeabi_dsub+0x6fe>
 8001e6e:	2680      	movs	r6, #128	@ 0x80
 8001e70:	0436      	lsls	r6, r6, #16
 8001e72:	4334      	orrs	r4, r6
 8001e74:	4688      	mov	r8, r1
 8001e76:	000e      	movs	r6, r1
 8001e78:	e6d1      	b.n	8001c1e <__aeabi_dsub+0x4a2>
 8001e7a:	4688      	mov	r8, r1
 8001e7c:	000e      	movs	r6, r1
 8001e7e:	2501      	movs	r5, #1
 8001e80:	e6de      	b.n	8001c40 <__aeabi_dsub+0x4c4>
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	000007ff 	.word	0x000007ff
 8001e88:	ff7fffff 	.word	0xff7fffff
 8001e8c:	000007fe 	.word	0x000007fe
 8001e90:	2d00      	cmp	r5, #0
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x71a>
 8001e94:	e668      	b.n	8001b68 <__aeabi_dsub+0x3ec>
 8001e96:	464b      	mov	r3, r9
 8001e98:	1bd9      	subs	r1, r3, r7
 8001e9a:	2f00      	cmp	r7, #0
 8001e9c:	d101      	bne.n	8001ea2 <__aeabi_dsub+0x726>
 8001e9e:	468a      	mov	sl, r1
 8001ea0:	e5a7      	b.n	80019f2 <__aeabi_dsub+0x276>
 8001ea2:	2701      	movs	r7, #1
 8001ea4:	2938      	cmp	r1, #56	@ 0x38
 8001ea6:	dd00      	ble.n	8001eaa <__aeabi_dsub+0x72e>
 8001ea8:	e5c7      	b.n	8001a3a <__aeabi_dsub+0x2be>
 8001eaa:	2280      	movs	r2, #128	@ 0x80
 8001eac:	0412      	lsls	r2, r2, #16
 8001eae:	4314      	orrs	r4, r2
 8001eb0:	e5af      	b.n	8001a12 <__aeabi_dsub+0x296>
 8001eb2:	46c0      	nop			@ (mov r8, r8)

08001eb4 <__aeabi_dcmpun>:
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	46c6      	mov	lr, r8
 8001eb8:	031e      	lsls	r6, r3, #12
 8001eba:	0b36      	lsrs	r6, r6, #12
 8001ebc:	46b0      	mov	r8, r6
 8001ebe:	4e0d      	ldr	r6, [pc, #52]	@ (8001ef4 <__aeabi_dcmpun+0x40>)
 8001ec0:	030c      	lsls	r4, r1, #12
 8001ec2:	004d      	lsls	r5, r1, #1
 8001ec4:	005f      	lsls	r7, r3, #1
 8001ec6:	b500      	push	{lr}
 8001ec8:	0b24      	lsrs	r4, r4, #12
 8001eca:	0d6d      	lsrs	r5, r5, #21
 8001ecc:	0d7f      	lsrs	r7, r7, #21
 8001ece:	42b5      	cmp	r5, r6
 8001ed0:	d00b      	beq.n	8001eea <__aeabi_dcmpun+0x36>
 8001ed2:	4908      	ldr	r1, [pc, #32]	@ (8001ef4 <__aeabi_dcmpun+0x40>)
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	428f      	cmp	r7, r1
 8001ed8:	d104      	bne.n	8001ee4 <__aeabi_dcmpun+0x30>
 8001eda:	4646      	mov	r6, r8
 8001edc:	4316      	orrs	r6, r2
 8001ede:	0030      	movs	r0, r6
 8001ee0:	1e43      	subs	r3, r0, #1
 8001ee2:	4198      	sbcs	r0, r3
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	46b8      	mov	r8, r7
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eea:	4304      	orrs	r4, r0
 8001eec:	2001      	movs	r0, #1
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	d1f8      	bne.n	8001ee4 <__aeabi_dcmpun+0x30>
 8001ef2:	e7ee      	b.n	8001ed2 <__aeabi_dcmpun+0x1e>
 8001ef4:	000007ff 	.word	0x000007ff

08001ef8 <__aeabi_d2iz>:
 8001ef8:	000b      	movs	r3, r1
 8001efa:	0002      	movs	r2, r0
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4d16      	ldr	r5, [pc, #88]	@ (8001f58 <__aeabi_d2iz+0x60>)
 8001f00:	030c      	lsls	r4, r1, #12
 8001f02:	b082      	sub	sp, #8
 8001f04:	0049      	lsls	r1, r1, #1
 8001f06:	2000      	movs	r0, #0
 8001f08:	9200      	str	r2, [sp, #0]
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	0b24      	lsrs	r4, r4, #12
 8001f0e:	0d49      	lsrs	r1, r1, #21
 8001f10:	0fde      	lsrs	r6, r3, #31
 8001f12:	42a9      	cmp	r1, r5
 8001f14:	dd04      	ble.n	8001f20 <__aeabi_d2iz+0x28>
 8001f16:	4811      	ldr	r0, [pc, #68]	@ (8001f5c <__aeabi_d2iz+0x64>)
 8001f18:	4281      	cmp	r1, r0
 8001f1a:	dd03      	ble.n	8001f24 <__aeabi_d2iz+0x2c>
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <__aeabi_d2iz+0x68>)
 8001f1e:	18f0      	adds	r0, r6, r3
 8001f20:	b002      	add	sp, #8
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	2080      	movs	r0, #128	@ 0x80
 8001f26:	0340      	lsls	r0, r0, #13
 8001f28:	4320      	orrs	r0, r4
 8001f2a:	4c0e      	ldr	r4, [pc, #56]	@ (8001f64 <__aeabi_d2iz+0x6c>)
 8001f2c:	1a64      	subs	r4, r4, r1
 8001f2e:	2c1f      	cmp	r4, #31
 8001f30:	dd08      	ble.n	8001f44 <__aeabi_d2iz+0x4c>
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <__aeabi_d2iz+0x70>)
 8001f34:	1a5b      	subs	r3, r3, r1
 8001f36:	40d8      	lsrs	r0, r3
 8001f38:	0003      	movs	r3, r0
 8001f3a:	4258      	negs	r0, r3
 8001f3c:	2e00      	cmp	r6, #0
 8001f3e:	d1ef      	bne.n	8001f20 <__aeabi_d2iz+0x28>
 8001f40:	0018      	movs	r0, r3
 8001f42:	e7ed      	b.n	8001f20 <__aeabi_d2iz+0x28>
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <__aeabi_d2iz+0x74>)
 8001f46:	9a00      	ldr	r2, [sp, #0]
 8001f48:	469c      	mov	ip, r3
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	4461      	add	r1, ip
 8001f4e:	408b      	lsls	r3, r1
 8001f50:	40e2      	lsrs	r2, r4
 8001f52:	4313      	orrs	r3, r2
 8001f54:	e7f1      	b.n	8001f3a <__aeabi_d2iz+0x42>
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	000003fe 	.word	0x000003fe
 8001f5c:	0000041d 	.word	0x0000041d
 8001f60:	7fffffff 	.word	0x7fffffff
 8001f64:	00000433 	.word	0x00000433
 8001f68:	00000413 	.word	0x00000413
 8001f6c:	fffffbed 	.word	0xfffffbed

08001f70 <__aeabi_i2d>:
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d016      	beq.n	8001fa4 <__aeabi_i2d+0x34>
 8001f76:	17c3      	asrs	r3, r0, #31
 8001f78:	18c5      	adds	r5, r0, r3
 8001f7a:	405d      	eors	r5, r3
 8001f7c:	0fc4      	lsrs	r4, r0, #31
 8001f7e:	0028      	movs	r0, r5
 8001f80:	f000 f824 	bl	8001fcc <__clzsi2>
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <__aeabi_i2d+0x58>)
 8001f86:	1a1b      	subs	r3, r3, r0
 8001f88:	055b      	lsls	r3, r3, #21
 8001f8a:	0d5b      	lsrs	r3, r3, #21
 8001f8c:	280a      	cmp	r0, #10
 8001f8e:	dc14      	bgt.n	8001fba <__aeabi_i2d+0x4a>
 8001f90:	0002      	movs	r2, r0
 8001f92:	002e      	movs	r6, r5
 8001f94:	3215      	adds	r2, #21
 8001f96:	4096      	lsls	r6, r2
 8001f98:	220b      	movs	r2, #11
 8001f9a:	1a12      	subs	r2, r2, r0
 8001f9c:	40d5      	lsrs	r5, r2
 8001f9e:	032d      	lsls	r5, r5, #12
 8001fa0:	0b2d      	lsrs	r5, r5, #12
 8001fa2:	e003      	b.n	8001fac <__aeabi_i2d+0x3c>
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2500      	movs	r5, #0
 8001faa:	2600      	movs	r6, #0
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	432b      	orrs	r3, r5
 8001fb0:	07e4      	lsls	r4, r4, #31
 8001fb2:	4323      	orrs	r3, r4
 8001fb4:	0030      	movs	r0, r6
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	bd70      	pop	{r4, r5, r6, pc}
 8001fba:	380b      	subs	r0, #11
 8001fbc:	4085      	lsls	r5, r0
 8001fbe:	032d      	lsls	r5, r5, #12
 8001fc0:	2600      	movs	r6, #0
 8001fc2:	0b2d      	lsrs	r5, r5, #12
 8001fc4:	e7f2      	b.n	8001fac <__aeabi_i2d+0x3c>
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e

08001fcc <__clzsi2>:
 8001fcc:	211c      	movs	r1, #28
 8001fce:	2301      	movs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	4298      	cmp	r0, r3
 8001fd4:	d301      	bcc.n	8001fda <__clzsi2+0xe>
 8001fd6:	0c00      	lsrs	r0, r0, #16
 8001fd8:	3910      	subs	r1, #16
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	4298      	cmp	r0, r3
 8001fde:	d301      	bcc.n	8001fe4 <__clzsi2+0x18>
 8001fe0:	0a00      	lsrs	r0, r0, #8
 8001fe2:	3908      	subs	r1, #8
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	4298      	cmp	r0, r3
 8001fe8:	d301      	bcc.n	8001fee <__clzsi2+0x22>
 8001fea:	0900      	lsrs	r0, r0, #4
 8001fec:	3904      	subs	r1, #4
 8001fee:	a202      	add	r2, pc, #8	@ (adr r2, 8001ff8 <__clzsi2+0x2c>)
 8001ff0:	5c10      	ldrb	r0, [r2, r0]
 8001ff2:	1840      	adds	r0, r0, r1
 8001ff4:	4770      	bx	lr
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	02020304 	.word	0x02020304
 8001ffc:	01010101 	.word	0x01010101
	...

08002008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800200e:	f000 fbf5 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002012:	f000 f871 	bl	80020f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002016:	f000 f967 	bl	80022e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800201a:	f000 f8cf 	bl	80021bc <MX_I2C1_Init>
  MX_TIM3_Init();
 800201e:	f000 f90d 	bl	800223c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8002022:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <main+0xc8>)
 8002024:	0018      	movs	r0, r3
 8002026:	f002 f8ef 	bl	8004208 <HAL_TIM_Base_Start_IT>

  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &init, 7, 100);
 800202a:	4a2a      	ldr	r2, [pc, #168]	@ (80020d4 <main+0xcc>)
 800202c:	482a      	ldr	r0, [pc, #168]	@ (80020d8 <main+0xd0>)
 800202e:	2364      	movs	r3, #100	@ 0x64
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2307      	movs	r3, #7
 8002034:	217c      	movs	r1, #124	@ 0x7c
 8002036:	f000 ffbf 	bl	8002fb8 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &pin, 6, 100);
 800203a:	4a28      	ldr	r2, [pc, #160]	@ (80020dc <main+0xd4>)
 800203c:	4826      	ldr	r0, [pc, #152]	@ (80020d8 <main+0xd0>)
 800203e:	2364      	movs	r3, #100	@ 0x64
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2306      	movs	r3, #6
 8002044:	217c      	movs	r1, #124	@ 0x7c
 8002046:	f000 ffb7 	bl	8002fb8 <HAL_I2C_Master_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		if(send_ready == 1)
 800204a:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <main+0xd8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d118      	bne.n	8002084 <main+0x7c>
		{
			HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_0, 2, 100); // zmień linię na 2
 8002052:	4a24      	ldr	r2, [pc, #144]	@ (80020e4 <main+0xdc>)
 8002054:	4820      	ldr	r0, [pc, #128]	@ (80020d8 <main+0xd0>)
 8002056:	2364      	movs	r3, #100	@ 0x64
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2302      	movs	r3, #2
 800205c:	217c      	movs	r1, #124	@ 0x7c
 800205e:	f000 ffab 	bl	8002fb8 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &S_1, 3, 100);  // pin 1
 8002062:	4a21      	ldr	r2, [pc, #132]	@ (80020e8 <main+0xe0>)
 8002064:	481c      	ldr	r0, [pc, #112]	@ (80020d8 <main+0xd0>)
 8002066:	2364      	movs	r3, #100	@ 0x64
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2303      	movs	r3, #3
 800206c:	217c      	movs	r1, #124	@ 0x7c
 800206e:	f000 ffa3 	bl	8002fb8 <HAL_I2C_Master_Transmit>
			HAL_Delay(1000);
 8002072:	23fa      	movs	r3, #250	@ 0xfa
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fc24 	bl	80028c4 <HAL_Delay>
			send_ready = 0;
 800207c:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <main+0xd8>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e7e2      	b.n	800204a <main+0x42>

		}else if (temp == 0)
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <main+0xe4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1de      	bne.n	800204a <main+0x42>
		{

			HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_0, 2, 100);
 800208c:	4a15      	ldr	r2, [pc, #84]	@ (80020e4 <main+0xdc>)
 800208e:	4812      	ldr	r0, [pc, #72]	@ (80020d8 <main+0xd0>)
 8002090:	2364      	movs	r3, #100	@ 0x64
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2302      	movs	r3, #2
 8002096:	217c      	movs	r1, #124	@ 0x7c
 8002098:	f000 ff8e 	bl	8002fb8 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &space, 3, 100);
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <main+0xe8>)
 800209e:	480e      	ldr	r0, [pc, #56]	@ (80020d8 <main+0xd0>)
 80020a0:	2364      	movs	r3, #100	@ 0x64
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2303      	movs	r3, #3
 80020a6:	217c      	movs	r1, #124	@ 0x7c
 80020a8:	f000 ff86 	bl	8002fb8 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_3, 2, 100);
 80020ac:	4a11      	ldr	r2, [pc, #68]	@ (80020f4 <main+0xec>)
 80020ae:	480a      	ldr	r0, [pc, #40]	@ (80020d8 <main+0xd0>)
 80020b0:	2364      	movs	r3, #100	@ 0x64
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2302      	movs	r3, #2
 80020b6:	217c      	movs	r1, #124	@ 0x7c
 80020b8:	f000 ff7e 	bl	8002fb8 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &space, 3, 100);
 80020bc:	4a0c      	ldr	r2, [pc, #48]	@ (80020f0 <main+0xe8>)
 80020be:	4806      	ldr	r0, [pc, #24]	@ (80020d8 <main+0xd0>)
 80020c0:	2364      	movs	r3, #100	@ 0x64
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2303      	movs	r3, #3
 80020c6:	217c      	movs	r1, #124	@ 0x7c
 80020c8:	f000 ff76 	bl	8002fb8 <HAL_I2C_Master_Transmit>
		if(send_ready == 1)
 80020cc:	e7bd      	b.n	800204a <main+0x42>
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	20000108 	.word	0x20000108
 80020d4:	20000000 	.word	0x20000000
 80020d8:	200000b4 	.word	0x200000b4
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000168 	.word	0x20000168
 80020e4:	20000014 	.word	0x20000014
 80020e8:	2000001c 	.word	0x2000001c
 80020ec:	20000160 	.word	0x20000160
 80020f0:	20000024 	.word	0x20000024
 80020f4:	20000018 	.word	0x20000018

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b095      	sub	sp, #84	@ 0x54
 80020fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	2420      	movs	r4, #32
 8002100:	193b      	adds	r3, r7, r4
 8002102:	0018      	movs	r0, r3
 8002104:	2330      	movs	r3, #48	@ 0x30
 8002106:	001a      	movs	r2, r3
 8002108:	2100      	movs	r1, #0
 800210a:	f002 fc4b 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210e:	2310      	movs	r3, #16
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	0018      	movs	r0, r3
 8002114:	2310      	movs	r3, #16
 8002116:	001a      	movs	r2, r3
 8002118:	2100      	movs	r1, #0
 800211a:	f002 fc43 	bl	80049a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800211e:	003b      	movs	r3, r7
 8002120:	0018      	movs	r0, r3
 8002122:	2310      	movs	r3, #16
 8002124:	001a      	movs	r2, r3
 8002126:	2100      	movs	r1, #0
 8002128:	f002 fc3c 	bl	80049a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800212c:	0021      	movs	r1, r4
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2201      	movs	r2, #1
 8002138:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800213a:	187b      	adds	r3, r7, r1
 800213c:	2210      	movs	r2, #16
 800213e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002140:	187b      	adds	r3, r7, r1
 8002142:	2202      	movs	r2, #2
 8002144:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002146:	187b      	adds	r3, r7, r1
 8002148:	2200      	movs	r2, #0
 800214a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800214c:	187b      	adds	r3, r7, r1
 800214e:	22a0      	movs	r2, #160	@ 0xa0
 8002150:	0392      	lsls	r2, r2, #14
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002154:	187b      	adds	r3, r7, r1
 8002156:	2200      	movs	r2, #0
 8002158:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215a:	187b      	adds	r3, r7, r1
 800215c:	0018      	movs	r0, r3
 800215e:	f001 faf7 	bl	8003750 <HAL_RCC_OscConfig>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002166:	f000 fa4b 	bl	8002600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216a:	2110      	movs	r1, #16
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2207      	movs	r2, #7
 8002170:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002172:	187b      	adds	r3, r7, r1
 8002174:	2202      	movs	r2, #2
 8002176:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002178:	187b      	adds	r3, r7, r1
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800217e:	187b      	adds	r3, r7, r1
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002184:	187b      	adds	r3, r7, r1
 8002186:	2101      	movs	r1, #1
 8002188:	0018      	movs	r0, r3
 800218a:	f001 fdfb 	bl	8003d84 <HAL_RCC_ClockConfig>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d001      	beq.n	8002196 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002192:	f000 fa35 	bl	8002600 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002196:	003b      	movs	r3, r7
 8002198:	2220      	movs	r2, #32
 800219a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800219c:	003b      	movs	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a2:	003b      	movs	r3, r7
 80021a4:	0018      	movs	r0, r3
 80021a6:	f001 ff11 	bl	8003fcc <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80021ae:	f000 fa27 	bl	8002600 <Error_Handler>
  }
}
 80021b2:	46c0      	nop			@ (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b015      	add	sp, #84	@ 0x54
 80021b8:	bd90      	pop	{r4, r7, pc}
	...

080021bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002234 <MX_I2C1_Init+0x78>)
 80021c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x200009FE;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <MX_I2C1_Init+0x7c>)
 80021ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021de:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <MX_I2C1_Init+0x74>)
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 fe47 	bl	8002e8c <HAL_I2C_Init>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002202:	f000 f9fd 	bl	8002600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002206:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <MX_I2C1_Init+0x74>)
 8002208:	2100      	movs	r1, #0
 800220a:	0018      	movs	r0, r3
 800220c:	f001 fa08 	bl	8003620 <HAL_I2CEx_ConfigAnalogFilter>
 8002210:	1e03      	subs	r3, r0, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002214:	f000 f9f4 	bl	8002600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <MX_I2C1_Init+0x74>)
 800221a:	2100      	movs	r1, #0
 800221c:	0018      	movs	r0, r3
 800221e:	f001 fa4b 	bl	80036b8 <HAL_I2CEx_ConfigDigitalFilter>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002226:	f000 f9eb 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200000b4 	.word	0x200000b4
 8002234:	40005400 	.word	0x40005400
 8002238:	200009fe 	.word	0x200009fe

0800223c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002242:	2308      	movs	r3, #8
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	0018      	movs	r0, r3
 8002248:	2310      	movs	r3, #16
 800224a:	001a      	movs	r2, r3
 800224c:	2100      	movs	r1, #0
 800224e:	f002 fba9 	bl	80049a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002252:	003b      	movs	r3, r7
 8002254:	0018      	movs	r0, r3
 8002256:	2308      	movs	r3, #8
 8002258:	001a      	movs	r2, r3
 800225a:	2100      	movs	r1, #0
 800225c:	f002 fba2 	bl	80049a4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002260:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <MX_TIM3_Init+0xa0>)
 8002262:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <MX_TIM3_Init+0xa4>)
 8002264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8002266:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <MX_TIM3_Init+0xa0>)
 8002268:	222f      	movs	r2, #47	@ 0x2f
 800226a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <MX_TIM3_Init+0xa0>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_TIM3_Init+0xa0>)
 8002274:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <MX_TIM3_Init+0xa8>)
 8002276:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002278:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <MX_TIM3_Init+0xa0>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <MX_TIM3_Init+0xa0>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002284:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <MX_TIM3_Init+0xa0>)
 8002286:	0018      	movs	r0, r3
 8002288:	f001 ff6e 	bl	8004168 <HAL_TIM_Base_Init>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002290:	f000 f9b6 	bl	8002600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002294:	2108      	movs	r1, #8
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2280      	movs	r2, #128	@ 0x80
 800229a:	0152      	lsls	r2, r2, #5
 800229c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800229e:	187a      	adds	r2, r7, r1
 80022a0:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <MX_TIM3_Init+0xa0>)
 80022a2:	0011      	movs	r1, r2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f002 f911 	bl	80044cc <HAL_TIM_ConfigClockSource>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022ae:	f000 f9a7 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	003b      	movs	r3, r7
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b8:	003b      	movs	r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022be:	003a      	movs	r2, r7
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <MX_TIM3_Init+0xa0>)
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f002 fb05 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80022ce:	f000 f997 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b006      	add	sp, #24
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	20000108 	.word	0x20000108
 80022e0:	40000400 	.word	0x40000400
 80022e4:	0000c34f 	.word	0x0000c34f

080022e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b08b      	sub	sp, #44	@ 0x2c
 80022ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ee:	2414      	movs	r4, #20
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	2314      	movs	r3, #20
 80022f6:	001a      	movs	r2, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	f002 fb53 	bl	80049a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	4b53      	ldr	r3, [pc, #332]	@ (800244c <MX_GPIO_Init+0x164>)
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	4b52      	ldr	r3, [pc, #328]	@ (800244c <MX_GPIO_Init+0x164>)
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	0309      	lsls	r1, r1, #12
 8002308:	430a      	orrs	r2, r1
 800230a:	615a      	str	r2, [r3, #20]
 800230c:	4b4f      	ldr	r3, [pc, #316]	@ (800244c <MX_GPIO_Init+0x164>)
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	031b      	lsls	r3, r3, #12
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231a:	4b4c      	ldr	r3, [pc, #304]	@ (800244c <MX_GPIO_Init+0x164>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <MX_GPIO_Init+0x164>)
 8002320:	2180      	movs	r1, #128	@ 0x80
 8002322:	03c9      	lsls	r1, r1, #15
 8002324:	430a      	orrs	r2, r1
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	4b48      	ldr	r3, [pc, #288]	@ (800244c <MX_GPIO_Init+0x164>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	03db      	lsls	r3, r3, #15
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b45      	ldr	r3, [pc, #276]	@ (800244c <MX_GPIO_Init+0x164>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	4b44      	ldr	r3, [pc, #272]	@ (800244c <MX_GPIO_Init+0x164>)
 800233c:	2180      	movs	r1, #128	@ 0x80
 800233e:	0289      	lsls	r1, r1, #10
 8002340:	430a      	orrs	r2, r1
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	4b41      	ldr	r3, [pc, #260]	@ (800244c <MX_GPIO_Init+0x164>)
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	2380      	movs	r3, #128	@ 0x80
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4b3e      	ldr	r3, [pc, #248]	@ (800244c <MX_GPIO_Init+0x164>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <MX_GPIO_Init+0x164>)
 8002358:	2180      	movs	r1, #128	@ 0x80
 800235a:	02c9      	lsls	r1, r1, #11
 800235c:	430a      	orrs	r2, r1
 800235e:	615a      	str	r2, [r3, #20]
 8002360:	4b3a      	ldr	r3, [pc, #232]	@ (800244c <MX_GPIO_Init+0x164>)
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	02db      	lsls	r3, r3, #11
 8002368:	4013      	ands	r3, r2
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin, GPIO_PIN_RESET);
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <MX_GPIO_Init+0x168>)
 8002370:	2200      	movs	r2, #0
 8002372:	210f      	movs	r1, #15
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fd34 	bl	8002de2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800237a:	2390      	movs	r3, #144	@ 0x90
 800237c:	05db      	lsls	r3, r3, #23
 800237e:	2200      	movs	r2, #0
 8002380:	2120      	movs	r1, #32
 8002382:	0018      	movs	r0, r3
 8002384:	f000 fd2d 	bl	8002de2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002388:	193b      	adds	r3, r7, r4
 800238a:	2280      	movs	r2, #128	@ 0x80
 800238c:	0192      	lsls	r2, r2, #6
 800238e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002390:	193b      	adds	r3, r7, r4
 8002392:	2288      	movs	r2, #136	@ 0x88
 8002394:	0352      	lsls	r2, r2, #13
 8002396:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002398:	193b      	adds	r3, r7, r4
 800239a:	2201      	movs	r2, #1
 800239c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002450 <MX_GPIO_Init+0x168>)
 80023a2:	0019      	movs	r1, r3
 80023a4:	0010      	movs	r0, r2
 80023a6:	f000 fb8f 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR0_Pin ADDR1_Pin ADDR2_Pin ADDR3_Pin */
  GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin;
 80023aa:	193b      	adds	r3, r7, r4
 80023ac:	220f      	movs	r2, #15
 80023ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	2201      	movs	r2, #1
 80023b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	193b      	adds	r3, r7, r4
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c2:	193b      	adds	r3, r7, r4
 80023c4:	4a22      	ldr	r2, [pc, #136]	@ (8002450 <MX_GPIO_Init+0x168>)
 80023c6:	0019      	movs	r1, r3
 80023c8:	0010      	movs	r0, r2
 80023ca:	f000 fb7d 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin Input2_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|Input2_Pin;
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	2203      	movs	r2, #3
 80023d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	2202      	movs	r2, #2
 80023de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	193a      	adds	r2, r7, r4
 80023e2:	2390      	movs	r3, #144	@ 0x90
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 fb6d 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	2220      	movs	r2, #32
 80023f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	2201      	movs	r2, #1
 80023f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	193b      	adds	r3, r7, r4
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002406:	193a      	adds	r2, r7, r4
 8002408:	2390      	movs	r3, #144	@ 0x90
 800240a:	05db      	lsls	r3, r3, #23
 800240c:	0011      	movs	r1, r2
 800240e:	0018      	movs	r0, r3
 8002410:	f000 fb5a 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input3_Pin Input4_Pin */
  GPIO_InitStruct.Pin = Input3_Pin|Input4_Pin;
 8002414:	193b      	adds	r3, r7, r4
 8002416:	2230      	movs	r2, #48	@ 0x30
 8002418:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241a:	193b      	adds	r3, r7, r4
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002420:	193b      	adds	r3, r7, r4
 8002422:	2202      	movs	r2, #2
 8002424:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002426:	193b      	adds	r3, r7, r4
 8002428:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <MX_GPIO_Init+0x168>)
 800242a:	0019      	movs	r1, r3
 800242c:	0010      	movs	r0, r2
 800242e:	f000 fb4b 	bl	8002ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	2007      	movs	r0, #7
 8002438:	f000 fb14 	bl	8002a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800243c:	2007      	movs	r0, #7
 800243e:	f000 fb26 	bl	8002a8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b00b      	add	sp, #44	@ 0x2c
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	40021000 	.word	0x40021000
 8002450:	48000800 	.word	0x48000800

08002454 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af02      	add	r7, sp, #8
 800245a:	0002      	movs	r2, r0
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_13) {
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	019b      	lsls	r3, r3, #6
 8002468:	429a      	cmp	r2, r3
 800246a:	d116      	bne.n	800249a <HAL_GPIO_EXTI_Callback+0x46>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800246c:	2390      	movs	r3, #144	@ 0x90
 800246e:	05db      	lsls	r3, r3, #23
 8002470:	2120      	movs	r1, #32
 8002472:	0018      	movs	r0, r3
 8002474:	f000 fcd2 	bl	8002e1c <HAL_GPIO_TogglePin>

	  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_3, 2, 100); // zmień linię na 2
 8002478:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x50>)
 800247a:	480b      	ldr	r0, [pc, #44]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x54>)
 800247c:	2364      	movs	r3, #100	@ 0x64
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2302      	movs	r3, #2
 8002482:	217c      	movs	r1, #124	@ 0x7c
 8002484:	f000 fd98 	bl	8002fb8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &S_17, 3, 100);  // pin 1
 8002488:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_GPIO_EXTI_Callback+0x58>)
 800248a:	4807      	ldr	r0, [pc, #28]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x54>)
 800248c:	2364      	movs	r3, #100	@ 0x64
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2303      	movs	r3, #3
 8002492:	217c      	movs	r1, #124	@ 0x7c
 8002494:	f000 fd90 	bl	8002fb8 <HAL_I2C_Master_Transmit>
*/
  else {

      __NOP();
  }
}
 8002498:	e000      	b.n	800249c <HAL_GPIO_EXTI_Callback+0x48>
      __NOP();
 800249a:	46c0      	nop			@ (mov r8, r8)
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000018 	.word	0x20000018
 80024a8:	200000b4 	.word	0x200000b4
 80024ac:	20000020 	.word	0x20000020

080024b0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

	if(temp <= 15)
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	dd00      	ble.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x12>
 80024c0:	e088      	b.n	80025d4 <HAL_TIM_PeriodElapsedCallback+0x124>
	{
		  u_STR.member2=temp;
 80024c2:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	001a      	movs	r2, r3
 80024c8:	4b47      	ldr	r3, [pc, #284]	@ (80025e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024ca:	601a      	str	r2, [r3, #0]

		  binary_array[0] = u_STR.member1.A;
 80024cc:	4b46      	ldr	r3, [pc, #280]	@ (80025e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	07db      	lsls	r3, r3, #31
 80024d2:	0fdb      	lsrs	r3, r3, #31
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	001a      	movs	r2, r3
 80024d8:	4b44      	ldr	r3, [pc, #272]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80024da:	601a      	str	r2, [r3, #0]
		  binary_array[1] = u_STR.member1.B;
 80024dc:	4b42      	ldr	r3, [pc, #264]	@ (80025e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	079b      	lsls	r3, r3, #30
 80024e2:	0fdb      	lsrs	r3, r3, #31
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	001a      	movs	r2, r3
 80024e8:	4b40      	ldr	r3, [pc, #256]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80024ea:	605a      	str	r2, [r3, #4]
		  binary_array[2] = u_STR.member1.C;
 80024ec:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	075b      	lsls	r3, r3, #29
 80024f2:	0fdb      	lsrs	r3, r3, #31
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	001a      	movs	r2, r3
 80024f8:	4b3c      	ldr	r3, [pc, #240]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80024fa:	609a      	str	r2, [r3, #8]
		  binary_array[3] = u_STR.member1.D;
 80024fc:	4b3a      	ldr	r3, [pc, #232]	@ (80025e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	071b      	lsls	r3, r3, #28
 8002502:	0fdb      	lsrs	r3, r3, #31
 8002504:	b2db      	uxtb	r3, r3
 8002506:	001a      	movs	r2, r3
 8002508:	4b38      	ldr	r3, [pc, #224]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800250a:	60da      	str	r2, [r3, #12]

		  for (int i = 0; i < size; i++)
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e02c      	b.n	800256c <HAL_TIM_PeriodElapsedCallback+0xbc>
		  {
			n = pow(2, i);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fd2c 	bl	8001f70 <__aeabi_i2d>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	2000      	movs	r0, #0
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	05c9      	lsls	r1, r1, #23
 8002522:	f002 fa71 	bl	8004a08 <pow>
 8002526:	0002      	movs	r2, r0
 8002528:	000b      	movs	r3, r1
 800252a:	0010      	movs	r0, r2
 800252c:	0019      	movs	r1, r3
 800252e:	f7ff fce3 	bl	8001ef8 <__aeabi_d2iz>
 8002532:	0002      	movs	r2, r0
 8002534:	4b2e      	ldr	r3, [pc, #184]	@ (80025f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002536:	601a      	str	r2, [r3, #0]
			if (binary_array[i] == 1)
 8002538:	4b2c      	ldr	r3, [pc, #176]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	58d3      	ldr	r3, [r2, r3]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d108      	bne.n	8002556 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				HAL_GPIO_WritePin(GPIOC, n, GPIO_PIN_SET);
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	482a      	ldr	r0, [pc, #168]	@ (80025f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800254c:	2201      	movs	r2, #1
 800254e:	0019      	movs	r1, r3
 8002550:	f000 fc47 	bl	8002de2 <HAL_GPIO_WritePin>
 8002554:	e007      	b.n	8002566 <HAL_TIM_PeriodElapsedCallback+0xb6>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOC, n, GPIO_PIN_RESET);
 8002556:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	4825      	ldr	r0, [pc, #148]	@ (80025f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800255e:	2200      	movs	r2, #0
 8002560:	0019      	movs	r1, r3
 8002562:	f000 fc3e 	bl	8002de2 <HAL_GPIO_WritePin>
		  for (int i = 0; i < size; i++)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3301      	adds	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	2204      	movs	r2, #4
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4293      	cmp	r3, r2
 8002572:	dbce      	blt.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x62>
			}
		  }
		  if (HAL_GPIO_ReadPin(GPIOC, Input3_Pin)==GPIO_PIN_SET)
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002576:	2110      	movs	r1, #16
 8002578:	0018      	movs	r0, r3
 800257a:	f000 fc15 	bl	8002da8 <HAL_GPIO_ReadPin>
 800257e:	0003      	movs	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d121      	bne.n	80025c8 <HAL_TIM_PeriodElapsedCallback+0x118>
		  {
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002584:	2390      	movs	r3, #144	@ 0x90
 8002586:	05db      	lsls	r3, r3, #23
 8002588:	2120      	movs	r1, #32
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fc46 	bl	8002e1c <HAL_GPIO_TogglePin>
				if (temp <=9)
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b09      	cmp	r3, #9
 8002596:	dc0a      	bgt.n	80025ae <HAL_TIM_PeriodElapsedCallback+0xfe>
				{
					S_1[1] = 48 + temp;
 8002598:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3330      	adds	r3, #48	@ 0x30
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80025a4:	705a      	strb	r2, [r3, #1]
					S_1[2] = 32;
 80025a6:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80025a8:	2220      	movs	r2, #32
 80025aa:	709a      	strb	r2, [r3, #2]
 80025ac:	e009      	b.n	80025c2 <HAL_TIM_PeriodElapsedCallback+0x112>
				}
					else
				{
					S_1[1] = 49;
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80025b0:	2231      	movs	r2, #49	@ 0x31
 80025b2:	705a      	strb	r2, [r3, #1]
					S_1[2] = 48 + temp-10;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	3326      	adds	r3, #38	@ 0x26
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80025c0:	709a      	strb	r2, [r3, #2]
				}
				send_ready = 1;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

		  }

		  temp++;
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80025d0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_0, 2, 100);
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &space, 3, 100);
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_3, 2, 100);
	HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &space, 3, 100);
*/
}
 80025d2:	e002      	b.n	80025da <HAL_TIM_PeriodElapsedCallback+0x12a>
		temp = 0;
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b004      	add	sp, #16
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	20000160 	.word	0x20000160
 80025e8:	2000016c 	.word	0x2000016c
 80025ec:	20000150 	.word	0x20000150
 80025f0:	20000164 	.word	0x20000164
 80025f4:	48000800 	.word	0x48000800
 80025f8:	2000001c 	.word	0x2000001c
 80025fc:	20000168 	.word	0x20000168

08002600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
}
 8002606:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	e7fd      	b.n	8002608 <Error_Handler+0x8>

0800260c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_MspInit+0x44>)
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <HAL_MspInit+0x44>)
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	619a      	str	r2, [r3, #24]
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <HAL_MspInit+0x44>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <HAL_MspInit+0x44>)
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_MspInit+0x44>)
 8002630:	2180      	movs	r1, #128	@ 0x80
 8002632:	0549      	lsls	r1, r1, #21
 8002634:	430a      	orrs	r2, r1
 8002636:	61da      	str	r2, [r3, #28]
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_MspInit+0x44>)
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	055b      	lsls	r3, r3, #21
 8002640:	4013      	ands	r3, r2
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	40021000 	.word	0x40021000

08002654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b08b      	sub	sp, #44	@ 0x2c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	2414      	movs	r4, #20
 800265e:	193b      	adds	r3, r7, r4
 8002660:	0018      	movs	r0, r3
 8002662:	2314      	movs	r3, #20
 8002664:	001a      	movs	r2, r3
 8002666:	2100      	movs	r1, #0
 8002668:	f002 f99c 	bl	80049a4 <memset>
  if(hi2c->Instance==I2C1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1c      	ldr	r2, [pc, #112]	@ (80026e4 <HAL_I2C_MspInit+0x90>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d131      	bne.n	80026da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <HAL_I2C_MspInit+0x94>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <HAL_I2C_MspInit+0x94>)
 800267c:	2180      	movs	r1, #128	@ 0x80
 800267e:	02c9      	lsls	r1, r1, #11
 8002680:	430a      	orrs	r2, r1
 8002682:	615a      	str	r2, [r3, #20]
 8002684:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <HAL_I2C_MspInit+0x94>)
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	02db      	lsls	r3, r3, #11
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002692:	0021      	movs	r1, r4
 8002694:	187b      	adds	r3, r7, r1
 8002696:	22c0      	movs	r2, #192	@ 0xc0
 8002698:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2212      	movs	r2, #18
 800269e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2203      	movs	r2, #3
 80026aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2201      	movs	r2, #1
 80026b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <HAL_I2C_MspInit+0x98>)
 80026b6:	0019      	movs	r1, r3
 80026b8:	0010      	movs	r0, r2
 80026ba:	f000 fa05 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <HAL_I2C_MspInit+0x94>)
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_I2C_MspInit+0x94>)
 80026c4:	2180      	movs	r1, #128	@ 0x80
 80026c6:	0389      	lsls	r1, r1, #14
 80026c8:	430a      	orrs	r2, r1
 80026ca:	61da      	str	r2, [r3, #28]
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_I2C_MspInit+0x94>)
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	039b      	lsls	r3, r3, #14
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b00b      	add	sp, #44	@ 0x2c
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	40005400 	.word	0x40005400
 80026e8:	40021000 	.word	0x40021000
 80026ec:	48000400 	.word	0x48000400

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002734 <HAL_TIM_Base_MspInit+0x44>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d113      	bne.n	800272a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_TIM_Base_MspInit+0x48>)
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_TIM_Base_MspInit+0x48>)
 8002708:	2102      	movs	r1, #2
 800270a:	430a      	orrs	r2, r1
 800270c:	61da      	str	r2, [r3, #28]
 800270e:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <HAL_TIM_Base_MspInit+0x48>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2202      	movs	r2, #2
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	2010      	movs	r0, #16
 8002720:	f000 f9a0 	bl	8002a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002724:	2010      	movs	r0, #16
 8002726:	f000 f9b2 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	40000400 	.word	0x40000400
 8002738:	40021000 	.word	0x40021000

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	e7fd      	b.n	8002740 <NMI_Handler+0x4>

08002744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002748:	46c0      	nop			@ (mov r8, r8)
 800274a:	e7fd      	b.n	8002748 <HardFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002764:	f000 f892 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	0018      	movs	r0, r3
 8002778:	f000 fb6c 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800277c:	46c0      	nop			@ (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002788:	4b03      	ldr	r3, [pc, #12]	@ (8002798 <TIM3_IRQHandler+0x14>)
 800278a:	0018      	movs	r0, r3
 800278c:	f001 fd88 	bl	80042a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002790:	46c0      	nop			@ (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	20000108 	.word	0x20000108

0800279c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a8:	480d      	ldr	r0, [pc, #52]	@ (80027e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027ac:	f7ff fff6 	bl	800279c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027b2:	490d      	ldr	r1, [pc, #52]	@ (80027e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <LoopForever+0xe>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c8:	4c0a      	ldr	r4, [pc, #40]	@ (80027f4 <LoopForever+0x16>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027d6:	f002 f8f3 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7ff fc15 	bl	8002008 <main>

080027de <LoopForever>:

LoopForever:
    b LoopForever
 80027de:	e7fe      	b.n	80027de <LoopForever>
  ldr   r0, =_estack
 80027e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80027ec:	08005918 	.word	0x08005918
  ldr r2, =_sbss
 80027f0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80027f4:	200002ac 	.word	0x200002ac

080027f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC1_IRQHandler>
	...

080027fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002800:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <HAL_Init+0x24>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_Init+0x24>)
 8002806:	2110      	movs	r1, #16
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800280c:	2000      	movs	r0, #0
 800280e:	f000 f809 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002812:	f7ff fefb 	bl	800260c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_InitTick+0x5c>)
 800282e:	681c      	ldr	r4, [r3, #0]
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <HAL_InitTick+0x60>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	0019      	movs	r1, r3
 8002836:	23fa      	movs	r3, #250	@ 0xfa
 8002838:	0098      	lsls	r0, r3, #2
 800283a:	f7fd fc65 	bl	8000108 <__udivsi3>
 800283e:	0003      	movs	r3, r0
 8002840:	0019      	movs	r1, r3
 8002842:	0020      	movs	r0, r4
 8002844:	f7fd fc60 	bl	8000108 <__udivsi3>
 8002848:	0003      	movs	r3, r0
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f92f 	bl	8002aae <HAL_SYSTICK_Config>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e00f      	b.n	8002878 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d80b      	bhi.n	8002876 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	2301      	movs	r3, #1
 8002862:	425b      	negs	r3, r3
 8002864:	2200      	movs	r2, #0
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f8fc 	bl	8002a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_InitTick+0x64>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b003      	add	sp, #12
 800287e:	bd90      	pop	{r4, r7, pc}
 8002880:	20000028 	.word	0x20000028
 8002884:	20000030 	.word	0x20000030
 8002888:	2000002c 	.word	0x2000002c

0800288c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_IncTick+0x1c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	001a      	movs	r2, r3
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_IncTick+0x20>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	18d2      	adds	r2, r2, r3
 800289c:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <HAL_IncTick+0x20>)
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	20000030 	.word	0x20000030
 80028ac:	20000170 	.word	0x20000170

080028b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b02      	ldr	r3, [pc, #8]	@ (80028c0 <HAL_GetTick+0x10>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	20000170 	.word	0x20000170

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff fff0 	bl	80028b0 <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3301      	adds	r3, #1
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	001a      	movs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	f7ff ffe0 	bl	80028b0 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b004      	add	sp, #16
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	20000030 	.word	0x20000030

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	0002      	movs	r2, r0
 8002914:	1dfb      	adds	r3, r7, #7
 8002916:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b7f      	cmp	r3, #127	@ 0x7f
 800291e:	d809      	bhi.n	8002934 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002920:	1dfb      	adds	r3, r7, #7
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	001a      	movs	r2, r3
 8002926:	231f      	movs	r3, #31
 8002928:	401a      	ands	r2, r3
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <__NVIC_EnableIRQ+0x30>)
 800292c:	2101      	movs	r1, #1
 800292e:	4091      	lsls	r1, r2
 8002930:	000a      	movs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
  }
}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	0002      	movs	r2, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b7f      	cmp	r3, #127	@ 0x7f
 8002954:	d828      	bhi.n	80029a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002956:	4a2f      	ldr	r2, [pc, #188]	@ (8002a14 <__NVIC_SetPriority+0xd4>)
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b25b      	sxtb	r3, r3
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	33c0      	adds	r3, #192	@ 0xc0
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	589b      	ldr	r3, [r3, r2]
 8002966:	1dfa      	adds	r2, r7, #7
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	0011      	movs	r1, r2
 800296c:	2203      	movs	r2, #3
 800296e:	400a      	ands	r2, r1
 8002970:	00d2      	lsls	r2, r2, #3
 8002972:	21ff      	movs	r1, #255	@ 0xff
 8002974:	4091      	lsls	r1, r2
 8002976:	000a      	movs	r2, r1
 8002978:	43d2      	mvns	r2, r2
 800297a:	401a      	ands	r2, r3
 800297c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	22ff      	movs	r2, #255	@ 0xff
 8002984:	401a      	ands	r2, r3
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	0018      	movs	r0, r3
 800298c:	2303      	movs	r3, #3
 800298e:	4003      	ands	r3, r0
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002994:	481f      	ldr	r0, [pc, #124]	@ (8002a14 <__NVIC_SetPriority+0xd4>)
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b25b      	sxtb	r3, r3
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	430a      	orrs	r2, r1
 80029a0:	33c0      	adds	r3, #192	@ 0xc0
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029a6:	e031      	b.n	8002a0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <__NVIC_SetPriority+0xd8>)
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	0019      	movs	r1, r3
 80029b0:	230f      	movs	r3, #15
 80029b2:	400b      	ands	r3, r1
 80029b4:	3b08      	subs	r3, #8
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3306      	adds	r3, #6
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	18d3      	adds	r3, r2, r3
 80029be:	3304      	adds	r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1dfa      	adds	r2, r7, #7
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	0011      	movs	r1, r2
 80029c8:	2203      	movs	r2, #3
 80029ca:	400a      	ands	r2, r1
 80029cc:	00d2      	lsls	r2, r2, #3
 80029ce:	21ff      	movs	r1, #255	@ 0xff
 80029d0:	4091      	lsls	r1, r2
 80029d2:	000a      	movs	r2, r1
 80029d4:	43d2      	mvns	r2, r2
 80029d6:	401a      	ands	r2, r3
 80029d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	22ff      	movs	r2, #255	@ 0xff
 80029e0:	401a      	ands	r2, r3
 80029e2:	1dfb      	adds	r3, r7, #7
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	0018      	movs	r0, r3
 80029e8:	2303      	movs	r3, #3
 80029ea:	4003      	ands	r3, r0
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f0:	4809      	ldr	r0, [pc, #36]	@ (8002a18 <__NVIC_SetPriority+0xd8>)
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	001c      	movs	r4, r3
 80029f8:	230f      	movs	r3, #15
 80029fa:	4023      	ands	r3, r4
 80029fc:	3b08      	subs	r3, #8
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	430a      	orrs	r2, r1
 8002a02:	3306      	adds	r3, #6
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	18c3      	adds	r3, r0, r3
 8002a08:	3304      	adds	r3, #4
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b003      	add	sp, #12
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1e5a      	subs	r2, r3, #1
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	045b      	lsls	r3, r3, #17
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d301      	bcc.n	8002a34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a30:	2301      	movs	r3, #1
 8002a32:	e010      	b.n	8002a56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <SysTick_Config+0x44>)
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	425b      	negs	r3, r3
 8002a40:	2103      	movs	r1, #3
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff ff7c 	bl	8002940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <SysTick_Config+0x44>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <SysTick_Config+0x44>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	210f      	movs	r1, #15
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	1c02      	adds	r2, r0, #0
 8002a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b25b      	sxtb	r3, r3
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff ff5d 	bl	8002940 <__NVIC_SetPriority>
}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	0002      	movs	r2, r0
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	b25b      	sxtb	r3, r3
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ff33 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff ffaf 	bl	8002a1c <SysTick_Config>
 8002abe:	0003      	movs	r3, r0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	e14f      	b.n	8002d78 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4091      	lsls	r1, r2
 8002ae2:	000a      	movs	r2, r1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d100      	bne.n	8002af0 <HAL_GPIO_Init+0x28>
 8002aee:	e140      	b.n	8002d72 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2203      	movs	r2, #3
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d130      	bne.n	8002b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	409a      	lsls	r2, r3
 8002b16:	0013      	movs	r3, r2
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b3e:	2201      	movs	r2, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	43da      	mvns	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	2201      	movs	r2, #1
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d017      	beq.n	8002ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	409a      	lsls	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	43da      	mvns	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d123      	bne.n	8002bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	08da      	lsrs	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3208      	adds	r2, #8
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	58d3      	ldr	r3, [r2, r3]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2107      	movs	r1, #7
 8002bde:	400b      	ands	r3, r1
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	6939      	ldr	r1, [r7, #16]
 8002bf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	409a      	lsls	r2, r3
 8002c08:	0013      	movs	r3, r2
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2203      	movs	r2, #3
 8002c18:	401a      	ands	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	23c0      	movs	r3, #192	@ 0xc0
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	4013      	ands	r3, r2
 8002c38:	d100      	bne.n	8002c3c <HAL_GPIO_Init+0x174>
 8002c3a:	e09a      	b.n	8002d72 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3c:	4b54      	ldr	r3, [pc, #336]	@ (8002d90 <HAL_GPIO_Init+0x2c8>)
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_GPIO_Init+0x2c8>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	430a      	orrs	r2, r1
 8002c46:	619a      	str	r2, [r3, #24]
 8002c48:	4b51      	ldr	r3, [pc, #324]	@ (8002d90 <HAL_GPIO_Init+0x2c8>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c54:	4a4f      	ldr	r2, [pc, #316]	@ (8002d94 <HAL_GPIO_Init+0x2cc>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	589b      	ldr	r3, [r3, r2]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2203      	movs	r2, #3
 8002c66:	4013      	ands	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	0013      	movs	r3, r2
 8002c70:	43da      	mvns	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	2390      	movs	r3, #144	@ 0x90
 8002c7c:	05db      	lsls	r3, r3, #23
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x1e2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a44      	ldr	r2, [pc, #272]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x1de>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a43      	ldr	r2, [pc, #268]	@ (8002d9c <HAL_GPIO_Init+0x2d4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x1da>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a42      	ldr	r2, [pc, #264]	@ (8002da0 <HAL_GPIO_Init+0x2d8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x1d6>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002c9e:	2305      	movs	r3, #5
 8002ca0:	e004      	b.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002caa:	2300      	movs	r3, #0
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	2103      	movs	r1, #3
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4093      	lsls	r3, r2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cbc:	4935      	ldr	r1, [pc, #212]	@ (8002d94 <HAL_GPIO_Init+0x2cc>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	035b      	lsls	r3, r3, #13
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cee:	4b2d      	ldr	r3, [pc, #180]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	2380      	movs	r3, #128	@ 0x80
 8002d0a:	039b      	lsls	r3, r3, #14
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d18:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	029b      	lsls	r3, r3, #10
 8002d36:	4013      	ands	r3, r2
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d42:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002d48:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	4013      	ands	r3, r2
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_GPIO_Init+0x2dc>)
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	40da      	lsrs	r2, r3
 8002d80:	1e13      	subs	r3, r2, #0
 8002d82:	d000      	beq.n	8002d86 <HAL_GPIO_Init+0x2be>
 8002d84:	e6a8      	b.n	8002ad8 <HAL_GPIO_Init+0x10>
  } 
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b006      	add	sp, #24
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	48000400 	.word	0x48000400
 8002d9c:	48000800 	.word	0x48000800
 8002da0:	48000c00 	.word	0x48000c00
 8002da4:	40010400 	.word	0x40010400

08002da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	000a      	movs	r2, r1
 8002db2:	1cbb      	adds	r3, r7, #2
 8002db4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	1cba      	adds	r2, r7, #2
 8002dbc:	8812      	ldrh	r2, [r2, #0]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc2:	230f      	movs	r3, #15
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e003      	b.n	8002dd4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	781b      	ldrb	r3, [r3, #0]
  }
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	0008      	movs	r0, r1
 8002dec:	0011      	movs	r1, r2
 8002dee:	1cbb      	adds	r3, r7, #2
 8002df0:	1c02      	adds	r2, r0, #0
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	1c7b      	adds	r3, r7, #1
 8002df6:	1c0a      	adds	r2, r1, #0
 8002df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dfa:	1c7b      	adds	r3, r7, #1
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e02:	1cbb      	adds	r3, r7, #2
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e0a:	e003      	b.n	8002e14 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0c:	1cbb      	adds	r3, r7, #2
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e14:	46c0      	nop			@ (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	000a      	movs	r2, r1
 8002e26:	1cbb      	adds	r3, r7, #2
 8002e28:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e30:	1cbb      	adds	r3, r7, #2
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	1cb9      	adds	r1, r7, #2
 8002e40:	8809      	ldrh	r1, [r1, #0]
 8002e42:	400b      	ands	r3, r1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b004      	add	sp, #16
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	1dba      	adds	r2, r7, #6
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d008      	beq.n	8002e7e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e6e:	1dba      	adds	r2, r7, #6
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff faeb 	bl	8002454 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b002      	add	sp, #8
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	40010400 	.word	0x40010400

08002e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e082      	b.n	8002fa4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2241      	movs	r2, #65	@ 0x41
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d107      	bne.n	8002eba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2240      	movs	r2, #64	@ 0x40
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff fbcd 	bl	8002654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2241      	movs	r2, #65	@ 0x41
 8002ebe:	2124      	movs	r1, #36	@ 0x24
 8002ec0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4934      	ldr	r1, [pc, #208]	@ (8002fac <HAL_I2C_Init+0x120>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4931      	ldr	r1, [pc, #196]	@ (8002fb0 <HAL_I2C_Init+0x124>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2180      	movs	r1, #128	@ 0x80
 8002f02:	0209      	lsls	r1, r1, #8
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e007      	b.n	8002f1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2184      	movs	r1, #132	@ 0x84
 8002f14:	0209      	lsls	r1, r1, #8
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d104      	bne.n	8002f2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	491f      	ldr	r1, [pc, #124]	@ (8002fb4 <HAL_I2C_Init+0x128>)
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	491a      	ldr	r1, [pc, #104]	@ (8002fb0 <HAL_I2C_Init+0x124>)
 8002f48:	400a      	ands	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69d9      	ldr	r1, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2241      	movs	r2, #65	@ 0x41
 8002f90:	2120      	movs	r1, #32
 8002f92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2242      	movs	r2, #66	@ 0x42
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	f0ffffff 	.word	0xf0ffffff
 8002fb0:	ffff7fff 	.word	0xffff7fff
 8002fb4:	02008000 	.word	0x02008000

08002fb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	0008      	movs	r0, r1
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	230a      	movs	r3, #10
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	1c02      	adds	r2, r0, #0
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	2308      	movs	r3, #8
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	1c0a      	adds	r2, r1, #0
 8002fd4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2241      	movs	r2, #65	@ 0x41
 8002fda:	5c9b      	ldrb	r3, [r3, r2]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d000      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x2c>
 8002fe2:	e0e7      	b.n	80031b4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	5c9b      	ldrb	r3, [r3, r2]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0x3a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0e1      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1fe>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2240      	movs	r2, #64	@ 0x40
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ffa:	f7ff fc59 	bl	80028b0 <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	0219      	lsls	r1, r3, #8
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2319      	movs	r3, #25
 800300e:	2201      	movs	r2, #1
 8003010:	f000 f8fc 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8003014:	1e03      	subs	r3, r0, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2241      	movs	r2, #65	@ 0x41
 8003020:	2121      	movs	r1, #33	@ 0x21
 8003022:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2242      	movs	r2, #66	@ 0x42
 8003028:	2110      	movs	r1, #16
 800302a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2208      	movs	r2, #8
 800303c:	18ba      	adds	r2, r7, r2
 800303e:	8812      	ldrh	r2, [r2, #0]
 8003040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2bff      	cmp	r3, #255	@ 0xff
 8003050:	d911      	bls.n	8003076 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	22ff      	movs	r2, #255	@ 0xff
 8003056:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305c:	b2da      	uxtb	r2, r3
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	045c      	lsls	r4, r3, #17
 8003062:	230a      	movs	r3, #10
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	8819      	ldrh	r1, [r3, #0]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	4b55      	ldr	r3, [pc, #340]	@ (80031c0 <HAL_I2C_Master_Transmit+0x208>)
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	0023      	movs	r3, r4
 8003070:	f000 fa9c 	bl	80035ac <I2C_TransferConfig>
 8003074:	e075      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	b2da      	uxtb	r2, r3
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	049c      	lsls	r4, r3, #18
 800308a:	230a      	movs	r3, #10
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	8819      	ldrh	r1, [r3, #0]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	4b4b      	ldr	r3, [pc, #300]	@ (80031c0 <HAL_I2C_Master_Transmit+0x208>)
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	0023      	movs	r3, r4
 8003098:	f000 fa88 	bl	80035ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800309c:	e061      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 f8ff 	bl	80032a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e081      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d03a      	beq.n	8003162 <HAL_I2C_Master_Transmit+0x1aa>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d136      	bne.n	8003162 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	0013      	movs	r3, r2
 80030fe:	2200      	movs	r2, #0
 8003100:	2180      	movs	r1, #128	@ 0x80
 8003102:	f000 f883 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e053      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2bff      	cmp	r3, #255	@ 0xff
 8003116:	d911      	bls.n	800313c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	22ff      	movs	r2, #255	@ 0xff
 800311c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003122:	b2da      	uxtb	r2, r3
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	045c      	lsls	r4, r3, #17
 8003128:	230a      	movs	r3, #10
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	8819      	ldrh	r1, [r3, #0]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	0023      	movs	r3, r4
 8003136:	f000 fa39 	bl	80035ac <I2C_TransferConfig>
 800313a:	e012      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314a:	b2da      	uxtb	r2, r3
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	049c      	lsls	r4, r3, #18
 8003150:	230a      	movs	r3, #10
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	8819      	ldrh	r1, [r3, #0]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	2300      	movs	r3, #0
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	0023      	movs	r3, r4
 800315e:	f000 fa25 	bl	80035ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d198      	bne.n	800309e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	0018      	movs	r0, r3
 8003174:	f000 f8de 	bl	8003334 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01a      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	490c      	ldr	r1, [pc, #48]	@ (80031c4 <HAL_I2C_Master_Transmit+0x20c>)
 8003194:	400a      	ands	r2, r1
 8003196:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2241      	movs	r2, #65	@ 0x41
 800319c:	2120      	movs	r1, #32
 800319e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2242      	movs	r2, #66	@ 0x42
 80031a4:	2100      	movs	r1, #0
 80031a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2240      	movs	r2, #64	@ 0x40
 80031ac:	2100      	movs	r1, #0
 80031ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b007      	add	sp, #28
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	80002000 	.word	0x80002000
 80031c4:	fe00e800 	.word	0xfe00e800

080031c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2202      	movs	r2, #2
 80031d8:	4013      	ands	r3, r2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d103      	bne.n	80031e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d007      	beq.n	8003204 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	430a      	orrs	r2, r1
 8003202:	619a      	str	r2, [r3, #24]
  }
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b002      	add	sp, #8
 800320a:	bd80      	pop	{r7, pc}

0800320c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	e030      	b.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	d02d      	beq.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003224:	f7ff fb44 	bl	80028b0 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d302      	bcc.n	800323a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d122      	bne.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	425a      	negs	r2, r3
 800324a:	4153      	adcs	r3, r2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	001a      	movs	r2, r3
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d113      	bne.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	2220      	movs	r2, #32
 800325e:	431a      	orrs	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2241      	movs	r2, #65	@ 0x41
 8003268:	2120      	movs	r1, #32
 800326a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2242      	movs	r2, #66	@ 0x42
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	2100      	movs	r1, #0
 800327a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e00f      	b.n	80032a0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	425a      	negs	r2, r3
 8003290:	4153      	adcs	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	001a      	movs	r2, r3
 8003296:	1dfb      	adds	r3, r7, #7
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d0bf      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032b4:	e032      	b.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f87d 	bl	80033bc <I2C_IsErrorOccurred>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e030      	b.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3301      	adds	r3, #1
 80032ce:	d025      	beq.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d0:	f7ff faee 	bl	80028b0 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d302      	bcc.n	80032e6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11a      	bne.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2202      	movs	r2, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d013      	beq.n	800331c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f8:	2220      	movs	r2, #32
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2241      	movs	r2, #65	@ 0x41
 8003304:	2120      	movs	r1, #32
 8003306:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2242      	movs	r2, #66	@ 0x42
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2240      	movs	r2, #64	@ 0x40
 8003314:	2100      	movs	r1, #0
 8003316:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e007      	b.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d1c5      	bne.n	80032b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b004      	add	sp, #16
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003340:	e02f      	b.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 f837 	bl	80033bc <I2C_IsErrorOccurred>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d001      	beq.n	8003356 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e02d      	b.n	80033b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7ff faab 	bl	80028b0 <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d11a      	bne.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2220      	movs	r2, #32
 8003374:	4013      	ands	r3, r2
 8003376:	2b20      	cmp	r3, #32
 8003378:	d013      	beq.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	2220      	movs	r2, #32
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2241      	movs	r2, #65	@ 0x41
 800338a:	2120      	movs	r1, #32
 800338c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2242      	movs	r2, #66	@ 0x42
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2220      	movs	r2, #32
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d1c8      	bne.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b004      	add	sp, #16
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	@ 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2327      	movs	r3, #39	@ 0x27
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2210      	movs	r2, #16
 80033e4:	4013      	ands	r3, r2
 80033e6:	d100      	bne.n	80033ea <I2C_IsErrorOccurred+0x2e>
 80033e8:	e079      	b.n	80034de <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033f2:	e057      	b.n	80034a4 <I2C_IsErrorOccurred+0xe8>
 80033f4:	2227      	movs	r2, #39	@ 0x27
 80033f6:	18bb      	adds	r3, r7, r2
 80033f8:	18ba      	adds	r2, r7, r2
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3301      	adds	r3, #1
 8003402:	d04f      	beq.n	80034a4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7ff fa54 	bl	80028b0 <HAL_GetTick>
 8003408:	0002      	movs	r2, r0
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <I2C_IsErrorOccurred+0x5e>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d144      	bne.n	80034a4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	01db      	lsls	r3, r3, #7
 8003424:	4013      	ands	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003428:	2013      	movs	r0, #19
 800342a:	183b      	adds	r3, r7, r0
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	2142      	movs	r1, #66	@ 0x42
 8003430:	5c52      	ldrb	r2, [r2, r1]
 8003432:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	401a      	ands	r2, r3
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	429a      	cmp	r2, r3
 8003446:	d126      	bne.n	8003496 <I2C_IsErrorOccurred+0xda>
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	01db      	lsls	r3, r3, #7
 800344e:	429a      	cmp	r2, r3
 8003450:	d021      	beq.n	8003496 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003452:	183b      	adds	r3, r7, r0
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b20      	cmp	r3, #32
 8003458:	d01d      	beq.n	8003496 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2180      	movs	r1, #128	@ 0x80
 8003466:	01c9      	lsls	r1, r1, #7
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800346c:	f7ff fa20 	bl	80028b0 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003474:	e00f      	b.n	8003496 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003476:	f7ff fa1b 	bl	80028b0 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b19      	cmp	r3, #25
 8003482:	d908      	bls.n	8003496 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2220      	movs	r2, #32
 8003488:	4313      	orrs	r3, r2
 800348a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800348c:	2327      	movs	r3, #39	@ 0x27
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]

              break;
 8003494:	e006      	b.n	80034a4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2220      	movs	r2, #32
 800349e:	4013      	ands	r3, r2
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d1e8      	bne.n	8003476 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2220      	movs	r2, #32
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d004      	beq.n	80034bc <I2C_IsErrorOccurred+0x100>
 80034b2:	2327      	movs	r3, #39	@ 0x27
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d09b      	beq.n	80033f4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034bc:	2327      	movs	r3, #39	@ 0x27
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2220      	movs	r2, #32
 80034cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2204      	movs	r2, #4
 80034d2:	4313      	orrs	r3, r2
 80034d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034d6:	2327      	movs	r3, #39	@ 0x27
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d00c      	beq.n	800350a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4313      	orrs	r3, r2
 80034f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	0052      	lsls	r2, r2, #1
 8003500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003502:	2327      	movs	r3, #39	@ 0x27
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4013      	ands	r3, r2
 8003512:	d00c      	beq.n	800352e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2208      	movs	r2, #8
 8003518:	4313      	orrs	r3, r2
 800351a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2280      	movs	r2, #128	@ 0x80
 8003522:	00d2      	lsls	r2, r2, #3
 8003524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003526:	2327      	movs	r3, #39	@ 0x27
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4013      	ands	r3, r2
 8003536:	d00c      	beq.n	8003552 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	2202      	movs	r2, #2
 800353c:	4313      	orrs	r3, r2
 800353e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2280      	movs	r2, #128	@ 0x80
 8003546:	0092      	lsls	r2, r2, #2
 8003548:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800354a:	2327      	movs	r3, #39	@ 0x27
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003552:	2327      	movs	r3, #39	@ 0x27
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01d      	beq.n	8003598 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	0018      	movs	r0, r3
 8003560:	f7ff fe32 	bl	80031c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	490e      	ldr	r1, [pc, #56]	@ (80035a8 <I2C_IsErrorOccurred+0x1ec>)
 8003570:	400a      	ands	r2, r1
 8003572:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2241      	movs	r2, #65	@ 0x41
 8003584:	2120      	movs	r1, #32
 8003586:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2242      	movs	r2, #66	@ 0x42
 800358c:	2100      	movs	r1, #0
 800358e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2240      	movs	r2, #64	@ 0x40
 8003594:	2100      	movs	r1, #0
 8003596:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003598:	2327      	movs	r3, #39	@ 0x27
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	781b      	ldrb	r3, [r3, #0]
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b00a      	add	sp, #40	@ 0x28
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	fe00e800 	.word	0xfe00e800

080035ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	0008      	movs	r0, r1
 80035b6:	0011      	movs	r1, r2
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	240a      	movs	r4, #10
 80035bc:	193b      	adds	r3, r7, r4
 80035be:	1c02      	adds	r2, r0, #0
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	2009      	movs	r0, #9
 80035c4:	183b      	adds	r3, r7, r0
 80035c6:	1c0a      	adds	r2, r1, #0
 80035c8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	059b      	lsls	r3, r3, #22
 80035d0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035d2:	183b      	adds	r3, r7, r0
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	0419      	lsls	r1, r3, #16
 80035d8:	23ff      	movs	r3, #255	@ 0xff
 80035da:	041b      	lsls	r3, r3, #16
 80035dc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035de:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	4313      	orrs	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035f6:	0d51      	lsrs	r1, r2, #21
 80035f8:	2280      	movs	r2, #128	@ 0x80
 80035fa:	00d2      	lsls	r2, r2, #3
 80035fc:	400a      	ands	r2, r1
 80035fe:	4907      	ldr	r1, [pc, #28]	@ (800361c <I2C_TransferConfig+0x70>)
 8003600:	430a      	orrs	r2, r1
 8003602:	43d2      	mvns	r2, r2
 8003604:	401a      	ands	r2, r3
 8003606:	0011      	movs	r1, r2
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b007      	add	sp, #28
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	03ff63ff 	.word	0x03ff63ff

08003620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2241      	movs	r2, #65	@ 0x41
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d138      	bne.n	80036a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	5c9b      	ldrb	r3, [r3, r2]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003640:	2302      	movs	r3, #2
 8003642:	e032      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2240      	movs	r2, #64	@ 0x40
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2241      	movs	r2, #65	@ 0x41
 8003650:	2124      	movs	r1, #36	@ 0x24
 8003652:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	438a      	bics	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4911      	ldr	r1, [pc, #68]	@ (80036b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003670:	400a      	ands	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2241      	movs	r2, #65	@ 0x41
 8003698:	2120      	movs	r1, #32
 800369a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b002      	add	sp, #8
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	ffffefff 	.word	0xffffefff

080036b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2241      	movs	r2, #65	@ 0x41
 80036c6:	5c9b      	ldrb	r3, [r3, r2]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d139      	bne.n	8003742 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2240      	movs	r2, #64	@ 0x40
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036d8:	2302      	movs	r3, #2
 80036da:	e033      	b.n	8003744 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2240      	movs	r2, #64	@ 0x40
 80036e0:	2101      	movs	r1, #1
 80036e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2241      	movs	r2, #65	@ 0x41
 80036e8:	2124      	movs	r1, #36	@ 0x24
 80036ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2101      	movs	r1, #1
 80036f8:	438a      	bics	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a11      	ldr	r2, [pc, #68]	@ (800374c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2241      	movs	r2, #65	@ 0x41
 8003732:	2120      	movs	r1, #32
 8003734:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2240      	movs	r2, #64	@ 0x40
 800373a:	2100      	movs	r1, #0
 800373c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
  }
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b004      	add	sp, #16
 800374a:	bd80      	pop	{r7, pc}
 800374c:	fffff0ff 	.word	0xfffff0ff

08003750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e301      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	4013      	ands	r3, r2
 800376a:	d100      	bne.n	800376e <HAL_RCC_OscConfig+0x1e>
 800376c:	e08d      	b.n	800388a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800376e:	4bc3      	ldr	r3, [pc, #780]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	220c      	movs	r2, #12
 8003774:	4013      	ands	r3, r2
 8003776:	2b04      	cmp	r3, #4
 8003778:	d00e      	beq.n	8003798 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800377a:	4bc0      	ldr	r3, [pc, #768]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	220c      	movs	r2, #12
 8003780:	4013      	ands	r3, r2
 8003782:	2b08      	cmp	r3, #8
 8003784:	d116      	bne.n	80037b4 <HAL_RCC_OscConfig+0x64>
 8003786:	4bbd      	ldr	r3, [pc, #756]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	025b      	lsls	r3, r3, #9
 800378e:	401a      	ands	r2, r3
 8003790:	2380      	movs	r3, #128	@ 0x80
 8003792:	025b      	lsls	r3, r3, #9
 8003794:	429a      	cmp	r2, r3
 8003796:	d10d      	bne.n	80037b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	4bb8      	ldr	r3, [pc, #736]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	029b      	lsls	r3, r3, #10
 80037a0:	4013      	ands	r3, r2
 80037a2:	d100      	bne.n	80037a6 <HAL_RCC_OscConfig+0x56>
 80037a4:	e070      	b.n	8003888 <HAL_RCC_OscConfig+0x138>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d000      	beq.n	80037b0 <HAL_RCC_OscConfig+0x60>
 80037ae:	e06b      	b.n	8003888 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e2d8      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x7c>
 80037bc:	4baf      	ldr	r3, [pc, #700]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4bae      	ldr	r3, [pc, #696]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037c2:	2180      	movs	r1, #128	@ 0x80
 80037c4:	0249      	lsls	r1, r1, #9
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e02f      	b.n	800382c <HAL_RCC_OscConfig+0xdc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10c      	bne.n	80037ee <HAL_RCC_OscConfig+0x9e>
 80037d4:	4ba9      	ldr	r3, [pc, #676]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4ba8      	ldr	r3, [pc, #672]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037da:	49a9      	ldr	r1, [pc, #676]	@ (8003a80 <HAL_RCC_OscConfig+0x330>)
 80037dc:	400a      	ands	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4ba6      	ldr	r3, [pc, #664]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4ba5      	ldr	r3, [pc, #660]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037e6:	49a7      	ldr	r1, [pc, #668]	@ (8003a84 <HAL_RCC_OscConfig+0x334>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e01e      	b.n	800382c <HAL_RCC_OscConfig+0xdc>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10e      	bne.n	8003814 <HAL_RCC_OscConfig+0xc4>
 80037f6:	4ba1      	ldr	r3, [pc, #644]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4ba0      	ldr	r3, [pc, #640]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80037fc:	2180      	movs	r1, #128	@ 0x80
 80037fe:	02c9      	lsls	r1, r1, #11
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	4b9d      	ldr	r3, [pc, #628]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b9c      	ldr	r3, [pc, #624]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800380a:	2180      	movs	r1, #128	@ 0x80
 800380c:	0249      	lsls	r1, r1, #9
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xdc>
 8003814:	4b99      	ldr	r3, [pc, #612]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b98      	ldr	r3, [pc, #608]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800381a:	4999      	ldr	r1, [pc, #612]	@ (8003a80 <HAL_RCC_OscConfig+0x330>)
 800381c:	400a      	ands	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	4b96      	ldr	r3, [pc, #600]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b95      	ldr	r3, [pc, #596]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003826:	4997      	ldr	r1, [pc, #604]	@ (8003a84 <HAL_RCC_OscConfig+0x334>)
 8003828:	400a      	ands	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d014      	beq.n	800385e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7ff f83c 	bl	80028b0 <HAL_GetTick>
 8003838:	0003      	movs	r3, r0
 800383a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800383e:	f7ff f837 	bl	80028b0 <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	@ 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e28a      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	4b8a      	ldr	r3, [pc, #552]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	@ 0x80
 8003856:	029b      	lsls	r3, r3, #10
 8003858:	4013      	ands	r3, r2
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0xee>
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7ff f827 	bl	80028b0 <HAL_GetTick>
 8003862:	0003      	movs	r3, r0
 8003864:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7ff f822 	bl	80028b0 <HAL_GetTick>
 800386c:	0002      	movs	r2, r0
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	@ 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e275      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b80      	ldr	r3, [pc, #512]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	029b      	lsls	r3, r3, #10
 8003882:	4013      	ands	r3, r2
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x118>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2202      	movs	r2, #2
 8003890:	4013      	ands	r3, r2
 8003892:	d100      	bne.n	8003896 <HAL_RCC_OscConfig+0x146>
 8003894:	e069      	b.n	800396a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003896:	4b79      	ldr	r3, [pc, #484]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	220c      	movs	r2, #12
 800389c:	4013      	ands	r3, r2
 800389e:	d00b      	beq.n	80038b8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038a0:	4b76      	ldr	r3, [pc, #472]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	220c      	movs	r2, #12
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d11c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x196>
 80038ac:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	025b      	lsls	r3, r3, #9
 80038b4:	4013      	ands	r3, r2
 80038b6:	d116      	bne.n	80038e6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b8:	4b70      	ldr	r3, [pc, #448]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2202      	movs	r2, #2
 80038be:	4013      	ands	r3, r2
 80038c0:	d005      	beq.n	80038ce <HAL_RCC_OscConfig+0x17e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e24b      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ce:	4b6b      	ldr	r3, [pc, #428]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	22f8      	movs	r2, #248	@ 0xf8
 80038d4:	4393      	bics	r3, r2
 80038d6:	0019      	movs	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00da      	lsls	r2, r3, #3
 80038de:	4b67      	ldr	r3, [pc, #412]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e4:	e041      	b.n	800396a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d024      	beq.n	8003938 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ee:	4b63      	ldr	r3, [pc, #396]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b62      	ldr	r3, [pc, #392]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fe ffd9 	bl	80028b0 <HAL_GetTick>
 80038fe:	0003      	movs	r3, r0
 8003900:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003904:	f7fe ffd4 	bl	80028b0 <HAL_GetTick>
 8003908:	0002      	movs	r2, r0
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e227      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2202      	movs	r2, #2
 800391c:	4013      	ands	r3, r2
 800391e:	d0f1      	beq.n	8003904 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b56      	ldr	r3, [pc, #344]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	22f8      	movs	r2, #248	@ 0xf8
 8003926:	4393      	bics	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00da      	lsls	r2, r3, #3
 8003930:	4b52      	ldr	r3, [pc, #328]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e018      	b.n	800396a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe ffb4 	bl	80028b0 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394e:	f7fe ffaf 	bl	80028b0 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e202      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003960:	4b46      	ldr	r3, [pc, #280]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	d1f1      	bne.n	800394e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2208      	movs	r2, #8
 8003970:	4013      	ands	r3, r2
 8003972:	d036      	beq.n	80039e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d019      	beq.n	80039b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 800397e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003980:	4b3e      	ldr	r3, [pc, #248]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003982:	2101      	movs	r1, #1
 8003984:	430a      	orrs	r2, r1
 8003986:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003988:	f7fe ff92 	bl	80028b0 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe ff8d 	bl	80028b0 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e1e0      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a4:	4b35      	ldr	r3, [pc, #212]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	2202      	movs	r2, #2
 80039aa:	4013      	ands	r3, r2
 80039ac:	d0f1      	beq.n	8003992 <HAL_RCC_OscConfig+0x242>
 80039ae:	e018      	b.n	80039e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b32      	ldr	r3, [pc, #200]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80039b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039b4:	4b31      	ldr	r3, [pc, #196]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80039b6:	2101      	movs	r1, #1
 80039b8:	438a      	bics	r2, r1
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fe ff78 	bl	80028b0 <HAL_GetTick>
 80039c0:	0003      	movs	r3, r0
 80039c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fe ff73 	bl	80028b0 <HAL_GetTick>
 80039ca:	0002      	movs	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1c6      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	4b28      	ldr	r3, [pc, #160]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	2202      	movs	r2, #2
 80039de:	4013      	ands	r3, r2
 80039e0:	d1f1      	bne.n	80039c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2204      	movs	r2, #4
 80039e8:	4013      	ands	r3, r2
 80039ea:	d100      	bne.n	80039ee <HAL_RCC_OscConfig+0x29e>
 80039ec:	e0b4      	b.n	8003b58 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	201f      	movs	r0, #31
 80039f0:	183b      	adds	r3, r7, r0
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b21      	ldr	r3, [pc, #132]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	055b      	lsls	r3, r3, #21
 80039fe:	4013      	ands	r3, r2
 8003a00:	d110      	bne.n	8003a24 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003a08:	2180      	movs	r1, #128	@ 0x80
 8003a0a:	0549      	lsls	r1, r1, #21
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	055b      	lsls	r3, r3, #21
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d11a      	bne.n	8003a66 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a30:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b14      	ldr	r3, [pc, #80]	@ (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003a36:	2180      	movs	r1, #128	@ 0x80
 8003a38:	0049      	lsls	r1, r1, #1
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe ff37 	bl	80028b0 <HAL_GetTick>
 8003a42:	0003      	movs	r3, r0
 8003a44:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fe ff32 	bl	80028b0 <HAL_GetTick>
 8003a4c:	0002      	movs	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e185      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4013      	ands	r3, r2
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10e      	bne.n	8003a8c <HAL_RCC_OscConfig+0x33c>
 8003a6e:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	4b02      	ldr	r3, [pc, #8]	@ (8003a7c <HAL_RCC_OscConfig+0x32c>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	430a      	orrs	r2, r1
 8003a78:	621a      	str	r2, [r3, #32]
 8003a7a:	e035      	b.n	8003ae8 <HAL_RCC_OscConfig+0x398>
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	fffeffff 	.word	0xfffeffff
 8003a84:	fffbffff 	.word	0xfffbffff
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10c      	bne.n	8003aae <HAL_RCC_OscConfig+0x35e>
 8003a94:	4bb6      	ldr	r3, [pc, #728]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003a96:	6a1a      	ldr	r2, [r3, #32]
 8003a98:	4bb5      	ldr	r3, [pc, #724]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	621a      	str	r2, [r3, #32]
 8003aa0:	4bb3      	ldr	r3, [pc, #716]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	4bb2      	ldr	r3, [pc, #712]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003aa6:	2104      	movs	r1, #4
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	621a      	str	r2, [r3, #32]
 8003aac:	e01c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x398>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x380>
 8003ab6:	4bae      	ldr	r3, [pc, #696]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	4bad      	ldr	r3, [pc, #692]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003abc:	2104      	movs	r1, #4
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	621a      	str	r2, [r3, #32]
 8003ac2:	4bab      	ldr	r3, [pc, #684]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ac4:	6a1a      	ldr	r2, [r3, #32]
 8003ac6:	4baa      	ldr	r3, [pc, #680]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ac8:	2101      	movs	r1, #1
 8003aca:	430a      	orrs	r2, r1
 8003acc:	621a      	str	r2, [r3, #32]
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0x398>
 8003ad0:	4ba7      	ldr	r3, [pc, #668]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ad2:	6a1a      	ldr	r2, [r3, #32]
 8003ad4:	4ba6      	ldr	r3, [pc, #664]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	438a      	bics	r2, r1
 8003ada:	621a      	str	r2, [r3, #32]
 8003adc:	4ba4      	ldr	r3, [pc, #656]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ae2:	2104      	movs	r1, #4
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d014      	beq.n	8003b1a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe fede 	bl	80028b0 <HAL_GetTick>
 8003af4:	0003      	movs	r3, r0
 8003af6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e009      	b.n	8003b0e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fed9 	bl	80028b0 <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	4a9b      	ldr	r2, [pc, #620]	@ (8003d74 <HAL_RCC_OscConfig+0x624>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e12b      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	4b98      	ldr	r3, [pc, #608]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	2202      	movs	r2, #2
 8003b14:	4013      	ands	r3, r2
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x3aa>
 8003b18:	e013      	b.n	8003b42 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fec9 	bl	80028b0 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	e009      	b.n	8003b38 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe fec4 	bl	80028b0 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	4a91      	ldr	r2, [pc, #580]	@ (8003d74 <HAL_RCC_OscConfig+0x624>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e116      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b38:	4b8d      	ldr	r3, [pc, #564]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b42:	231f      	movs	r3, #31
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4c:	4b88      	ldr	r3, [pc, #544]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	4b87      	ldr	r3, [pc, #540]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b52:	4989      	ldr	r1, [pc, #548]	@ (8003d78 <HAL_RCC_OscConfig+0x628>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d063      	beq.n	8003c2a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d12a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b6a:	4b81      	ldr	r3, [pc, #516]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b6e:	4b80      	ldr	r3, [pc, #512]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b70:	2104      	movs	r1, #4
 8003b72:	430a      	orrs	r2, r1
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003b76:	4b7e      	ldr	r3, [pc, #504]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fe fe95 	bl	80028b0 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b8c:	f7fe fe90 	bl	80028b0 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0e3      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b9e:	4b74      	ldr	r3, [pc, #464]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d0f1      	beq.n	8003b8c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ba8:	4b71      	ldr	r3, [pc, #452]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	22f8      	movs	r2, #248	@ 0xf8
 8003bae:	4393      	bics	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	00da      	lsls	r2, r3, #3
 8003bb8:	4b6d      	ldr	r3, [pc, #436]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bbe:	e034      	b.n	8003c2a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	3305      	adds	r3, #5
 8003bc6:	d111      	bne.n	8003bec <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003bc8:	4b69      	ldr	r3, [pc, #420]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bcc:	4b68      	ldr	r3, [pc, #416]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bce:	2104      	movs	r1, #4
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003bd4:	4b66      	ldr	r3, [pc, #408]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd8:	22f8      	movs	r2, #248	@ 0xf8
 8003bda:	4393      	bics	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	00da      	lsls	r2, r3, #3
 8003be4:	4b62      	ldr	r3, [pc, #392]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003be6:	430a      	orrs	r2, r1
 8003be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bea:	e01e      	b.n	8003c2a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bec:	4b60      	ldr	r3, [pc, #384]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf0:	4b5f      	ldr	r3, [pc, #380]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003bfe:	2101      	movs	r1, #1
 8003c00:	438a      	bics	r2, r1
 8003c02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7fe fe54 	bl	80028b0 <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c0e:	f7fe fe4f 	bl	80028b0 <HAL_GetTick>
 8003c12:	0002      	movs	r2, r0
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0a2      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003c20:	4b53      	ldr	r3, [pc, #332]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c24:	2202      	movs	r2, #2
 8003c26:	4013      	ands	r3, r2
 8003c28:	d1f1      	bne.n	8003c0e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d100      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4e4>
 8003c32:	e097      	b.n	8003d64 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c34:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	220c      	movs	r2, #12
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d100      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4f2>
 8003c40:	e06b      	b.n	8003d1a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d14c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b49      	ldr	r3, [pc, #292]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c50:	494a      	ldr	r1, [pc, #296]	@ (8003d7c <HAL_RCC_OscConfig+0x62c>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe fe2b 	bl	80028b0 <HAL_GetTick>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fe fe26 	bl	80028b0 <HAL_GetTick>
 8003c64:	0002      	movs	r2, r0
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e079      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c72:	4b3f      	ldr	r3, [pc, #252]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	049b      	lsls	r3, r3, #18
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	220f      	movs	r2, #15
 8003c84:	4393      	bics	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8c:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c92:	4b37      	ldr	r3, [pc, #220]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4a3a      	ldr	r2, [pc, #232]	@ (8003d80 <HAL_RCC_OscConfig+0x630>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	4b32      	ldr	r3, [pc, #200]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cac:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003cb2:	2180      	movs	r1, #128	@ 0x80
 8003cb4:	0449      	lsls	r1, r1, #17
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7fe fdf9 	bl	80028b0 <HAL_GetTick>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fe fdf4 	bl	80028b0 <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e047      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd6:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	049b      	lsls	r3, r3, #18
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x574>
 8003ce2:	e03f      	b.n	8003d64 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b22      	ldr	r3, [pc, #136]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b21      	ldr	r3, [pc, #132]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003cea:	4924      	ldr	r1, [pc, #144]	@ (8003d7c <HAL_RCC_OscConfig+0x62c>)
 8003cec:	400a      	ands	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fdde 	bl	80028b0 <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe fdd9 	bl	80028b0 <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e02c      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0c:	4b18      	ldr	r3, [pc, #96]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	049b      	lsls	r3, r3, #18
 8003d14:	4013      	ands	r3, r2
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x5aa>
 8003d18:	e024      	b.n	8003d64 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e01f      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003d26:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003d2c:	4b10      	ldr	r3, [pc, #64]	@ (8003d70 <HAL_RCC_OscConfig+0x620>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	025b      	lsls	r3, r3, #9
 8003d38:	401a      	ands	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d10e      	bne.n	8003d60 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	220f      	movs	r2, #15
 8003d46:	401a      	ands	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	23f0      	movs	r3, #240	@ 0xf0
 8003d54:	039b      	lsls	r3, r3, #14
 8003d56:	401a      	ands	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b008      	add	sp, #32
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	40021000 	.word	0x40021000
 8003d74:	00001388 	.word	0x00001388
 8003d78:	efffffff 	.word	0xefffffff
 8003d7c:	feffffff 	.word	0xfeffffff
 8003d80:	ffc2ffff 	.word	0xffc2ffff

08003d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0b3      	b.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b5b      	ldr	r3, [pc, #364]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	4013      	ands	r3, r2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d911      	bls.n	8003dca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b58      	ldr	r3, [pc, #352]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	4393      	bics	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	4b55      	ldr	r3, [pc, #340]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db8:	4b53      	ldr	r3, [pc, #332]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e09a      	b.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d006      	beq.n	8003dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003dde:	4b4b      	ldr	r3, [pc, #300]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4b4a      	ldr	r3, [pc, #296]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003de4:	21e0      	movs	r1, #224	@ 0xe0
 8003de6:	00c9      	lsls	r1, r1, #3
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b47      	ldr	r3, [pc, #284]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	22f0      	movs	r2, #240	@ 0xf0
 8003df2:	4393      	bics	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	4b44      	ldr	r3, [pc, #272]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2201      	movs	r2, #1
 8003e06:	4013      	ands	r3, r2
 8003e08:	d040      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b3e      	ldr	r3, [pc, #248]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d114      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06e      	b.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	4b38      	ldr	r3, [pc, #224]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	049b      	lsls	r3, r3, #18
 8003e32:	4013      	ands	r3, r2
 8003e34:	d108      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e062      	b.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b34      	ldr	r3, [pc, #208]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e05b      	b.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e48:	4b30      	ldr	r3, [pc, #192]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4393      	bics	r3, r2
 8003e50:	0019      	movs	r1, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	4b2d      	ldr	r3, [pc, #180]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e5c:	f7fe fd28 	bl	80028b0 <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e64:	e009      	b.n	8003e7a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e66:	f7fe fd23 	bl	80028b0 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	4a27      	ldr	r2, [pc, #156]	@ (8003f10 <HAL_RCC_ClockConfig+0x18c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e042      	b.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	4b24      	ldr	r3, [pc, #144]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	220c      	movs	r2, #12
 8003e80:	401a      	ands	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d1ec      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4013      	ands	r3, r2
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d211      	bcs.n	8003ebe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4393      	bics	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eac:	4b16      	ldr	r3, [pc, #88]	@ (8003f08 <HAL_RCC_ClockConfig+0x184>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e020      	b.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <HAL_RCC_ClockConfig+0x190>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003edc:	f000 f820 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ee0:	0001      	movs	r1, r0
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <HAL_RCC_ClockConfig+0x188>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	220f      	movs	r2, #15
 8003eea:	4013      	ands	r3, r2
 8003eec:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <HAL_RCC_ClockConfig+0x194>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	000a      	movs	r2, r1
 8003ef2:	40da      	lsrs	r2, r3
 8003ef4:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCC_ClockConfig+0x198>)
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fe fc93 	bl	8002824 <HAL_InitTick>
  
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b004      	add	sp, #16
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	00001388 	.word	0x00001388
 8003f14:	fffff8ff 	.word	0xfffff8ff
 8003f18:	080058b0 	.word	0x080058b0
 8003f1c:	20000028 	.word	0x20000028

08003f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f3a:	4b20      	ldr	r3, [pc, #128]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	220c      	movs	r2, #12
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x30>
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x36>
 8003f4e:	e02c      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f50:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f52:	613b      	str	r3, [r7, #16]
      break;
 8003f54:	e02c      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	0c9b      	lsrs	r3, r3, #18
 8003f5a:	220f      	movs	r2, #15
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	4a19      	ldr	r2, [pc, #100]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003f64:	4b15      	ldr	r3, [pc, #84]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	220f      	movs	r2, #15
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	4a16      	ldr	r2, [pc, #88]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	2380      	movs	r3, #128	@ 0x80
 8003f76:	025b      	lsls	r3, r3, #9
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	4810      	ldr	r0, [pc, #64]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f80:	f7fc f8c2 	bl	8000108 <__udivsi3>
 8003f84:	0003      	movs	r3, r0
 8003f86:	001a      	movs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4353      	muls	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e009      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	000a      	movs	r2, r1
 8003f94:	0152      	lsls	r2, r2, #5
 8003f96:	1a52      	subs	r2, r2, r1
 8003f98:	0193      	lsls	r3, r2, #6
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	185b      	adds	r3, r3, r1
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	613b      	str	r3, [r7, #16]
      break;
 8003fa8:	e002      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fac:	613b      	str	r3, [r7, #16]
      break;
 8003fae:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003fb0:	693b      	ldr	r3, [r7, #16]
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b006      	add	sp, #24
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	007a1200 	.word	0x007a1200
 8003fc4:	080058c0 	.word	0x080058c0
 8003fc8:	080058d0 	.word	0x080058d0

08003fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d100      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003fe8:	e08e      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2017      	movs	r0, #23
 8003fec:	183b      	adds	r3, r7, r0
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff2:	4b57      	ldr	r3, [pc, #348]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	2380      	movs	r3, #128	@ 0x80
 8003ff8:	055b      	lsls	r3, r3, #21
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d110      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	4b54      	ldr	r3, [pc, #336]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004000:	69da      	ldr	r2, [r3, #28]
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004004:	2180      	movs	r1, #128	@ 0x80
 8004006:	0549      	lsls	r1, r1, #21
 8004008:	430a      	orrs	r2, r1
 800400a:	61da      	str	r2, [r3, #28]
 800400c:	4b50      	ldr	r3, [pc, #320]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	055b      	lsls	r3, r3, #21
 8004014:	4013      	ands	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401a:	183b      	adds	r3, r7, r0
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b4c      	ldr	r3, [pc, #304]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	@ 0x80
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d11a      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402c:	4b49      	ldr	r3, [pc, #292]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b48      	ldr	r3, [pc, #288]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	0049      	lsls	r1, r1, #1
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe fc39 	bl	80028b0 <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fe fc34 	bl	80028b0 <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e077      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b3f      	ldr	r3, [pc, #252]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4013      	ands	r3, r2
 8004060:	d0f0      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004062:	4b3b      	ldr	r3, [pc, #236]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	23c0      	movs	r3, #192	@ 0xc0
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d034      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	23c0      	movs	r3, #192	@ 0xc0
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4013      	ands	r3, r2
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	429a      	cmp	r2, r3
 8004082:	d02c      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004084:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4a33      	ldr	r2, [pc, #204]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800408e:	4b30      	ldr	r3, [pc, #192]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	4b2f      	ldr	r3, [pc, #188]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004094:	2180      	movs	r1, #128	@ 0x80
 8004096:	0249      	lsls	r1, r1, #9
 8004098:	430a      	orrs	r2, r1
 800409a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800409c:	4b2c      	ldr	r3, [pc, #176]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040a2:	492e      	ldr	r1, [pc, #184]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040a8:	4b29      	ldr	r3, [pc, #164]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe fbfb 	bl	80028b0 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	e009      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe fbf6 	bl	80028b0 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4a25      	ldr	r2, [pc, #148]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e038      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040de:	4b1c      	ldr	r3, [pc, #112]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	4b18      	ldr	r3, [pc, #96]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040ee:	430a      	orrs	r2, r1
 80040f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040f2:	2317      	movs	r3, #23
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d105      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fc:	4b14      	ldr	r3, [pc, #80]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004102:	4918      	ldr	r1, [pc, #96]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004104:	400a      	ands	r2, r1
 8004106:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	4013      	ands	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004112:	4b0f      	ldr	r3, [pc, #60]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	2203      	movs	r2, #3
 8004118:	4393      	bics	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004122:	430a      	orrs	r2, r1
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2220      	movs	r2, #32
 800412c:	4013      	ands	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004130:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	2210      	movs	r2, #16
 8004136:	4393      	bics	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004140:	430a      	orrs	r2, r1
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b006      	add	sp, #24
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	40021000 	.word	0x40021000
 8004154:	40007000 	.word	0x40007000
 8004158:	fffffcff 	.word	0xfffffcff
 800415c:	fffeffff 	.word	0xfffeffff
 8004160:	00001388 	.word	0x00001388
 8004164:	efffffff 	.word	0xefffffff

08004168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e042      	b.n	8004200 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	223d      	movs	r2, #61	@ 0x3d
 800417e:	5c9b      	ldrb	r3, [r3, r2]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d107      	bne.n	8004196 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	223c      	movs	r2, #60	@ 0x3c
 800418a:	2100      	movs	r1, #0
 800418c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	0018      	movs	r0, r3
 8004192:	f7fe faad 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	223d      	movs	r2, #61	@ 0x3d
 800419a:	2102      	movs	r1, #2
 800419c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	0019      	movs	r1, r3
 80041a8:	0010      	movs	r0, r2
 80041aa:	f000 fa83 	bl	80046b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2246      	movs	r2, #70	@ 0x46
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	223e      	movs	r2, #62	@ 0x3e
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	223f      	movs	r2, #63	@ 0x3f
 80041c2:	2101      	movs	r1, #1
 80041c4:	5499      	strb	r1, [r3, r2]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2240      	movs	r2, #64	@ 0x40
 80041ca:	2101      	movs	r1, #1
 80041cc:	5499      	strb	r1, [r3, r2]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2241      	movs	r2, #65	@ 0x41
 80041d2:	2101      	movs	r1, #1
 80041d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2242      	movs	r2, #66	@ 0x42
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2243      	movs	r2, #67	@ 0x43
 80041e2:	2101      	movs	r1, #1
 80041e4:	5499      	strb	r1, [r3, r2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2244      	movs	r2, #68	@ 0x44
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2245      	movs	r2, #69	@ 0x45
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	223d      	movs	r2, #61	@ 0x3d
 80041fa:	2101      	movs	r1, #1
 80041fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	223d      	movs	r2, #61	@ 0x3d
 8004214:	5c9b      	ldrb	r3, [r3, r2]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d001      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e035      	b.n	800428c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	223d      	movs	r2, #61	@ 0x3d
 8004224:	2102      	movs	r1, #2
 8004226:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2101      	movs	r1, #1
 8004234:	430a      	orrs	r2, r1
 8004236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a15      	ldr	r2, [pc, #84]	@ (8004294 <HAL_TIM_Base_Start_IT+0x8c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0x4e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	@ (8004298 <HAL_TIM_Base_Start_IT+0x90>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0x4e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a12      	ldr	r2, [pc, #72]	@ (800429c <HAL_TIM_Base_Start_IT+0x94>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2207      	movs	r2, #7
 800425e:	4013      	ands	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b06      	cmp	r3, #6
 8004266:	d010      	beq.n	800428a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2101      	movs	r1, #1
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	e007      	b.n	800428a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40000400 	.word	0x40000400
 800429c:	40014000 	.word	0x40014000

080042a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2202      	movs	r2, #2
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d124      	bne.n	8004300 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2202      	movs	r2, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d11d      	bne.n	8004300 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2203      	movs	r2, #3
 80042ca:	4252      	negs	r2, r2
 80042cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2203      	movs	r2, #3
 80042dc:	4013      	ands	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	0018      	movs	r0, r3
 80042e4:	f000 f9ce 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e007      	b.n	80042fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 f9c1 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f000 f9cd 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2204      	movs	r2, #4
 8004308:	4013      	ands	r3, r2
 800430a:	2b04      	cmp	r3, #4
 800430c:	d125      	bne.n	800435a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2204      	movs	r2, #4
 8004316:	4013      	ands	r3, r2
 8004318:	2b04      	cmp	r3, #4
 800431a:	d11e      	bne.n	800435a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2205      	movs	r2, #5
 8004322:	4252      	negs	r2, r2
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	23c0      	movs	r3, #192	@ 0xc0
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f000 f9a1 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 8004342:	e007      	b.n	8004354 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0018      	movs	r0, r3
 8004348:	f000 f994 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f9a0 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2208      	movs	r2, #8
 8004362:	4013      	ands	r3, r2
 8004364:	2b08      	cmp	r3, #8
 8004366:	d124      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2208      	movs	r2, #8
 8004370:	4013      	ands	r3, r2
 8004372:	2b08      	cmp	r3, #8
 8004374:	d11d      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2209      	movs	r2, #9
 800437c:	4252      	negs	r2, r2
 800437e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2204      	movs	r2, #4
 8004384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2203      	movs	r2, #3
 800438e:	4013      	ands	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f000 f975 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 800439a:	e007      	b.n	80043ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f968 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 f974 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2210      	movs	r2, #16
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d125      	bne.n	800440c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2210      	movs	r2, #16
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d11e      	bne.n	800440c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2211      	movs	r2, #17
 80043d4:	4252      	negs	r2, r2
 80043d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2208      	movs	r2, #8
 80043dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	23c0      	movs	r3, #192	@ 0xc0
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4013      	ands	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 f948 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e007      	b.n	8004406 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 f93b 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f947 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2201      	movs	r2, #1
 8004414:	4013      	ands	r3, r2
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10f      	bne.n	800443a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	2b01      	cmp	r3, #1
 8004426:	d108      	bne.n	800443a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2202      	movs	r2, #2
 800442e:	4252      	negs	r2, r2
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0018      	movs	r0, r3
 8004436:	f7fe f83b 	bl	80024b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	4013      	ands	r3, r2
 8004444:	2b80      	cmp	r3, #128	@ 0x80
 8004446:	d10f      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2280      	movs	r2, #128	@ 0x80
 8004450:	4013      	ands	r3, r2
 8004452:	2b80      	cmp	r3, #128	@ 0x80
 8004454:	d108      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2281      	movs	r2, #129	@ 0x81
 800445c:	4252      	negs	r2, r2
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 fa96 	bl	8004994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2240      	movs	r2, #64	@ 0x40
 8004470:	4013      	ands	r3, r2
 8004472:	2b40      	cmp	r3, #64	@ 0x40
 8004474:	d10f      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2240      	movs	r2, #64	@ 0x40
 800447e:	4013      	ands	r3, r2
 8004480:	2b40      	cmp	r3, #64	@ 0x40
 8004482:	d108      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2241      	movs	r2, #65	@ 0x41
 800448a:	4252      	negs	r2, r2
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f000 f907 	bl	80046a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2220      	movs	r2, #32
 800449e:	4013      	ands	r3, r2
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d10f      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d108      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2221      	movs	r2, #33	@ 0x21
 80044b8:	4252      	negs	r2, r2
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0018      	movs	r0, r3
 80044c0:	f000 fa60 	bl	8004984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	230f      	movs	r3, #15
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	223c      	movs	r2, #60	@ 0x3c
 80044e2:	5c9b      	ldrb	r3, [r3, r2]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIM_ConfigClockSource+0x20>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e0bc      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x19a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	223c      	movs	r2, #60	@ 0x3c
 80044f0:	2101      	movs	r1, #1
 80044f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	223d      	movs	r2, #61	@ 0x3d
 80044f8:	2102      	movs	r1, #2
 80044fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2277      	movs	r2, #119	@ 0x77
 8004508:	4393      	bics	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a58      	ldr	r2, [pc, #352]	@ (8004670 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	0192      	lsls	r2, r2, #6
 8004524:	4293      	cmp	r3, r2
 8004526:	d040      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0xde>
 8004528:	2280      	movs	r2, #128	@ 0x80
 800452a:	0192      	lsls	r2, r2, #6
 800452c:	4293      	cmp	r3, r2
 800452e:	d900      	bls.n	8004532 <HAL_TIM_ConfigClockSource+0x66>
 8004530:	e088      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004532:	2280      	movs	r2, #128	@ 0x80
 8004534:	0152      	lsls	r2, r2, #5
 8004536:	4293      	cmp	r3, r2
 8004538:	d100      	bne.n	800453c <HAL_TIM_ConfigClockSource+0x70>
 800453a:	e088      	b.n	800464e <HAL_TIM_ConfigClockSource+0x182>
 800453c:	2280      	movs	r2, #128	@ 0x80
 800453e:	0152      	lsls	r2, r2, #5
 8004540:	4293      	cmp	r3, r2
 8004542:	d900      	bls.n	8004546 <HAL_TIM_ConfigClockSource+0x7a>
 8004544:	e07e      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004546:	2b70      	cmp	r3, #112	@ 0x70
 8004548:	d018      	beq.n	800457c <HAL_TIM_ConfigClockSource+0xb0>
 800454a:	d900      	bls.n	800454e <HAL_TIM_ConfigClockSource+0x82>
 800454c:	e07a      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 800454e:	2b60      	cmp	r3, #96	@ 0x60
 8004550:	d04f      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x126>
 8004552:	d900      	bls.n	8004556 <HAL_TIM_ConfigClockSource+0x8a>
 8004554:	e076      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004556:	2b50      	cmp	r3, #80	@ 0x50
 8004558:	d03b      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x106>
 800455a:	d900      	bls.n	800455e <HAL_TIM_ConfigClockSource+0x92>
 800455c:	e072      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	d057      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x146>
 8004562:	d900      	bls.n	8004566 <HAL_TIM_ConfigClockSource+0x9a>
 8004564:	e06e      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004566:	2b30      	cmp	r3, #48	@ 0x30
 8004568:	d063      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 800456a:	d86b      	bhi.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 800456c:	2b20      	cmp	r3, #32
 800456e:	d060      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 8004570:	d868      	bhi.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d05d      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 8004576:	2b10      	cmp	r3, #16
 8004578:	d05b      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 800457a:	e063      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	f000 f982 	bl	8004894 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2277      	movs	r2, #119	@ 0x77
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
      break;
 80045a8:	e052      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	f000 f96b 	bl	8004894 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2180      	movs	r1, #128	@ 0x80
 80045ca:	01c9      	lsls	r1, r1, #7
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
      break;
 80045d0:	e03e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	001a      	movs	r2, r3
 80045e0:	f000 f8de 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2150      	movs	r1, #80	@ 0x50
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 f938 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 80045f0:	e02e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fe:	001a      	movs	r2, r3
 8004600:	f000 f8fc 	bl	80047fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2160      	movs	r1, #96	@ 0x60
 800460a:	0018      	movs	r0, r3
 800460c:	f000 f928 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 8004610:	e01e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	001a      	movs	r2, r3
 8004620:	f000 f8be 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2140      	movs	r1, #64	@ 0x40
 800462a:	0018      	movs	r0, r3
 800462c:	f000 f918 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 8004630:	e00e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0019      	movs	r1, r3
 800463c:	0010      	movs	r0, r2
 800463e:	f000 f90f 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 8004642:	e005      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004644:	230f      	movs	r3, #15
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
      break;
 800464c:	e000      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800464e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	223d      	movs	r2, #61	@ 0x3d
 8004654:	2101      	movs	r1, #1
 8004656:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	223c      	movs	r2, #60	@ 0x3c
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]

  return status;
 8004660:	230f      	movs	r3, #15
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b004      	add	sp, #16
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	ffff00ff 	.word	0xffff00ff

08004674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b002      	add	sp, #8
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800469c:	46c0      	nop			@ (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b002      	add	sp, #8
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ac:	46c0      	nop			@ (mov r8, r8)
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004784 <TIM_Base_SetConfig+0xd0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0x20>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004788 <TIM_Base_SetConfig+0xd4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2270      	movs	r2, #112	@ 0x70
 80046d8:	4393      	bics	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a26      	ldr	r2, [pc, #152]	@ (8004784 <TIM_Base_SetConfig+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <TIM_Base_SetConfig+0x62>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a25      	ldr	r2, [pc, #148]	@ (8004788 <TIM_Base_SetConfig+0xd4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00f      	beq.n	8004716 <TIM_Base_SetConfig+0x62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a24      	ldr	r2, [pc, #144]	@ (800478c <TIM_Base_SetConfig+0xd8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_Base_SetConfig+0x62>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a23      	ldr	r2, [pc, #140]	@ (8004790 <TIM_Base_SetConfig+0xdc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_Base_SetConfig+0x62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a22      	ldr	r2, [pc, #136]	@ (8004794 <TIM_Base_SetConfig+0xe0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_Base_SetConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a21      	ldr	r2, [pc, #132]	@ (8004798 <TIM_Base_SetConfig+0xe4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a20      	ldr	r2, [pc, #128]	@ (800479c <TIM_Base_SetConfig+0xe8>)
 800471a:	4013      	ands	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2280      	movs	r2, #128	@ 0x80
 800472c:	4393      	bics	r3, r2
 800472e:	001a      	movs	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a0c      	ldr	r2, [pc, #48]	@ (8004784 <TIM_Base_SetConfig+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_Base_SetConfig+0xba>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a0d      	ldr	r2, [pc, #52]	@ (8004790 <TIM_Base_SetConfig+0xdc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0xba>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a0c      	ldr	r2, [pc, #48]	@ (8004794 <TIM_Base_SetConfig+0xe0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0xba>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a0b      	ldr	r2, [pc, #44]	@ (8004798 <TIM_Base_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d103      	bne.n	8004776 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	615a      	str	r2, [r3, #20]
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b004      	add	sp, #16
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40000400 	.word	0x40000400
 800478c:	40002000 	.word	0x40002000
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800
 800479c:	fffffcff 	.word	0xfffffcff

080047a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	2201      	movs	r2, #1
 80047b8:	4393      	bics	r3, r2
 80047ba:	001a      	movs	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	22f0      	movs	r2, #240	@ 0xf0
 80047ca:	4393      	bics	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	220a      	movs	r2, #10
 80047dc:	4393      	bics	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	46c0      	nop			@ (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b006      	add	sp, #24
 80047fa:	bd80      	pop	{r7, pc}

080047fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	2210      	movs	r2, #16
 800480e:	4393      	bics	r3, r2
 8004810:	001a      	movs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4a0d      	ldr	r2, [pc, #52]	@ (800485c <TIM_TI2_ConfigInputStage+0x60>)
 8004826:	4013      	ands	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	031b      	lsls	r3, r3, #12
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	22a0      	movs	r2, #160	@ 0xa0
 8004838:	4393      	bics	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b006      	add	sp, #24
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	ffff0fff 	.word	0xffff0fff

08004860 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2270      	movs	r2, #112	@ 0x70
 8004874:	4393      	bics	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	2207      	movs	r2, #7
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b004      	add	sp, #16
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4a09      	ldr	r2, [pc, #36]	@ (80048d0 <TIM_ETR_SetConfig+0x3c>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b006      	add	sp, #24
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	ffff00ff 	.word	0xffff00ff

080048d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	223c      	movs	r2, #60	@ 0x3c
 80048e2:	5c9b      	ldrb	r3, [r3, r2]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e041      	b.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	223c      	movs	r2, #60	@ 0x3c
 80048f0:	2101      	movs	r1, #1
 80048f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	223d      	movs	r2, #61	@ 0x3d
 80048f8:	2102      	movs	r1, #2
 80048fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2270      	movs	r2, #112	@ 0x70
 8004910:	4393      	bics	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a13      	ldr	r2, [pc, #76]	@ (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a11      	ldr	r2, [pc, #68]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a10      	ldr	r2, [pc, #64]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10c      	bne.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2280      	movs	r2, #128	@ 0x80
 8004948:	4393      	bics	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	4313      	orrs	r3, r2
 8004954:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	223d      	movs	r2, #61	@ 0x3d
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223c      	movs	r2, #60	@ 0x3c
 800496a:	2100      	movs	r1, #0
 800496c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	0018      	movs	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	b004      	add	sp, #16
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40000400 	.word	0x40000400
 8004980:	40014000 	.word	0x40014000

08004984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <memset>:
 80049a4:	0003      	movs	r3, r0
 80049a6:	1882      	adds	r2, r0, r2
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	7019      	strb	r1, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	@ (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	20000034 	.word	0x20000034

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	2600      	movs	r6, #0
 80049c4:	4c0c      	ldr	r4, [pc, #48]	@ (80049f8 <__libc_init_array+0x38>)
 80049c6:	4d0d      	ldr	r5, [pc, #52]	@ (80049fc <__libc_init_array+0x3c>)
 80049c8:	1b64      	subs	r4, r4, r5
 80049ca:	10a4      	asrs	r4, r4, #2
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	2600      	movs	r6, #0
 80049d2:	f000 ff41 	bl	8005858 <_init>
 80049d6:	4c0a      	ldr	r4, [pc, #40]	@ (8004a00 <__libc_init_array+0x40>)
 80049d8:	4d0a      	ldr	r5, [pc, #40]	@ (8004a04 <__libc_init_array+0x44>)
 80049da:	1b64      	subs	r4, r4, r5
 80049dc:	10a4      	asrs	r4, r4, #2
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	00b3      	lsls	r3, r6, #2
 80049e6:	58eb      	ldr	r3, [r5, r3]
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	00b3      	lsls	r3, r6, #2
 80049f0:	58eb      	ldr	r3, [r5, r3]
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08005910 	.word	0x08005910
 80049fc:	08005910 	.word	0x08005910
 8004a00:	08005914 	.word	0x08005914
 8004a04:	08005910 	.word	0x08005910

08004a08 <pow>:
 8004a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0a:	0014      	movs	r4, r2
 8004a0c:	001d      	movs	r5, r3
 8004a0e:	9000      	str	r0, [sp, #0]
 8004a10:	9101      	str	r1, [sp, #4]
 8004a12:	f000 f86f 	bl	8004af4 <__ieee754_pow>
 8004a16:	0022      	movs	r2, r4
 8004a18:	0006      	movs	r6, r0
 8004a1a:	000f      	movs	r7, r1
 8004a1c:	002b      	movs	r3, r5
 8004a1e:	0020      	movs	r0, r4
 8004a20:	0029      	movs	r1, r5
 8004a22:	f7fd fa47 	bl	8001eb4 <__aeabi_dcmpun>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d13f      	bne.n	8004aaa <pow+0xa2>
 8004a2a:	9800      	ldr	r0, [sp, #0]
 8004a2c:	9901      	ldr	r1, [sp, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2300      	movs	r3, #0
 8004a32:	f7fb fc05 	bl	8000240 <__aeabi_dcmpeq>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d019      	beq.n	8004a6e <pow+0x66>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	0020      	movs	r0, r4
 8004a40:	0029      	movs	r1, r5
 8004a42:	f7fb fbfd 	bl	8000240 <__aeabi_dcmpeq>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d146      	bne.n	8004ad8 <pow+0xd0>
 8004a4a:	0020      	movs	r0, r4
 8004a4c:	0029      	movs	r1, r5
 8004a4e:	f000 f849 	bl	8004ae4 <finite>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d029      	beq.n	8004aaa <pow+0xa2>
 8004a56:	2200      	movs	r2, #0
 8004a58:	2300      	movs	r3, #0
 8004a5a:	0020      	movs	r0, r4
 8004a5c:	0029      	movs	r1, r5
 8004a5e:	f7fb fbf5 	bl	800024c <__aeabi_dcmplt>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d021      	beq.n	8004aaa <pow+0xa2>
 8004a66:	f7ff ffa5 	bl	80049b4 <__errno>
 8004a6a:	2322      	movs	r3, #34	@ 0x22
 8004a6c:	e01c      	b.n	8004aa8 <pow+0xa0>
 8004a6e:	0030      	movs	r0, r6
 8004a70:	0039      	movs	r1, r7
 8004a72:	f000 f837 	bl	8004ae4 <finite>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d11b      	bne.n	8004ab2 <pow+0xaa>
 8004a7a:	9800      	ldr	r0, [sp, #0]
 8004a7c:	9901      	ldr	r1, [sp, #4]
 8004a7e:	f000 f831 	bl	8004ae4 <finite>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d015      	beq.n	8004ab2 <pow+0xaa>
 8004a86:	0020      	movs	r0, r4
 8004a88:	0029      	movs	r1, r5
 8004a8a:	f000 f82b 	bl	8004ae4 <finite>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d00f      	beq.n	8004ab2 <pow+0xaa>
 8004a92:	0032      	movs	r2, r6
 8004a94:	003b      	movs	r3, r7
 8004a96:	0030      	movs	r0, r6
 8004a98:	0039      	movs	r1, r7
 8004a9a:	f7fd fa0b 	bl	8001eb4 <__aeabi_dcmpun>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d0e1      	beq.n	8004a66 <pow+0x5e>
 8004aa2:	f7ff ff87 	bl	80049b4 <__errno>
 8004aa6:	2321      	movs	r3, #33	@ 0x21
 8004aa8:	6003      	str	r3, [r0, #0]
 8004aaa:	0030      	movs	r0, r6
 8004aac:	0039      	movs	r1, r7
 8004aae:	b003      	add	sp, #12
 8004ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	0030      	movs	r0, r6
 8004ab8:	0039      	movs	r1, r7
 8004aba:	f7fb fbc1 	bl	8000240 <__aeabi_dcmpeq>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d0f3      	beq.n	8004aaa <pow+0xa2>
 8004ac2:	9800      	ldr	r0, [sp, #0]
 8004ac4:	9901      	ldr	r1, [sp, #4]
 8004ac6:	f000 f80d 	bl	8004ae4 <finite>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d0ed      	beq.n	8004aaa <pow+0xa2>
 8004ace:	0020      	movs	r0, r4
 8004ad0:	0029      	movs	r1, r5
 8004ad2:	f000 f807 	bl	8004ae4 <finite>
 8004ad6:	e7c4      	b.n	8004a62 <pow+0x5a>
 8004ad8:	2600      	movs	r6, #0
 8004ada:	4f01      	ldr	r7, [pc, #4]	@ (8004ae0 <pow+0xd8>)
 8004adc:	e7e5      	b.n	8004aaa <pow+0xa2>
 8004ade:	46c0      	nop			@ (mov r8, r8)
 8004ae0:	3ff00000 	.word	0x3ff00000

08004ae4 <finite>:
 8004ae4:	4b02      	ldr	r3, [pc, #8]	@ (8004af0 <finite+0xc>)
 8004ae6:	0048      	lsls	r0, r1, #1
 8004ae8:	0840      	lsrs	r0, r0, #1
 8004aea:	18c0      	adds	r0, r0, r3
 8004aec:	0fc0      	lsrs	r0, r0, #31
 8004aee:	4770      	bx	lr
 8004af0:	80100000 	.word	0x80100000

08004af4 <__ieee754_pow>:
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b095      	sub	sp, #84	@ 0x54
 8004af8:	9202      	str	r2, [sp, #8]
 8004afa:	9303      	str	r3, [sp, #12]
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	9a03      	ldr	r2, [sp, #12]
 8004b00:	9306      	str	r3, [sp, #24]
 8004b02:	0052      	lsls	r2, r2, #1
 8004b04:	9b02      	ldr	r3, [sp, #8]
 8004b06:	0852      	lsrs	r2, r2, #1
 8004b08:	9204      	str	r2, [sp, #16]
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	000f      	movs	r7, r1
 8004b0e:	9904      	ldr	r1, [sp, #16]
 8004b10:	0006      	movs	r6, r0
 8004b12:	430a      	orrs	r2, r1
 8004b14:	d119      	bne.n	8004b4a <__ieee754_pow+0x56>
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	0309      	lsls	r1, r1, #12
 8004b1a:	4079      	eors	r1, r7
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	000b      	movs	r3, r1
 8004b20:	1892      	adds	r2, r2, r2
 8004b22:	415b      	adcs	r3, r3
 8004b24:	499b      	ldr	r1, [pc, #620]	@ (8004d94 <__ieee754_pow+0x2a0>)
 8004b26:	428b      	cmp	r3, r1
 8004b28:	d806      	bhi.n	8004b38 <__ieee754_pow+0x44>
 8004b2a:	d001      	beq.n	8004b30 <__ieee754_pow+0x3c>
 8004b2c:	f000 fcde 	bl	80054ec <__ieee754_pow+0x9f8>
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d101      	bne.n	8004b38 <__ieee754_pow+0x44>
 8004b34:	f000 fcda 	bl	80054ec <__ieee754_pow+0x9f8>
 8004b38:	9a02      	ldr	r2, [sp, #8]
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	0030      	movs	r0, r6
 8004b3e:	0039      	movs	r1, r7
 8004b40:	f7fb fbac 	bl	800029c <__aeabi_dadd>
 8004b44:	9000      	str	r0, [sp, #0]
 8004b46:	9101      	str	r1, [sp, #4]
 8004b48:	e0af      	b.n	8004caa <__ieee754_pow+0x1b6>
 8004b4a:	4a93      	ldr	r2, [pc, #588]	@ (8004d98 <__ieee754_pow+0x2a4>)
 8004b4c:	007c      	lsls	r4, r7, #1
 8004b4e:	9708      	str	r7, [sp, #32]
 8004b50:	900e      	str	r0, [sp, #56]	@ 0x38
 8004b52:	0864      	lsrs	r4, r4, #1
 8004b54:	4294      	cmp	r4, r2
 8004b56:	d809      	bhi.n	8004b6c <__ieee754_pow+0x78>
 8004b58:	d101      	bne.n	8004b5e <__ieee754_pow+0x6a>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1ec      	bne.n	8004b38 <__ieee754_pow+0x44>
 8004b5e:	9904      	ldr	r1, [sp, #16]
 8004b60:	4a8d      	ldr	r2, [pc, #564]	@ (8004d98 <__ieee754_pow+0x2a4>)
 8004b62:	4291      	cmp	r1, r2
 8004b64:	d802      	bhi.n	8004b6c <__ieee754_pow+0x78>
 8004b66:	d10c      	bne.n	8004b82 <__ieee754_pow+0x8e>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <__ieee754_pow+0x8e>
 8004b6c:	4b8b      	ldr	r3, [pc, #556]	@ (8004d9c <__ieee754_pow+0x2a8>)
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	4333      	orrs	r3, r6
 8004b72:	d1e1      	bne.n	8004b38 <__ieee754_pow+0x44>
 8004b74:	2180      	movs	r1, #128	@ 0x80
 8004b76:	9803      	ldr	r0, [sp, #12]
 8004b78:	0309      	lsls	r1, r1, #12
 8004b7a:	4048      	eors	r0, r1
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	9a02      	ldr	r2, [sp, #8]
 8004b80:	e7ce      	b.n	8004b20 <__ieee754_pow+0x2c>
 8004b82:	2500      	movs	r5, #0
 8004b84:	9a08      	ldr	r2, [sp, #32]
 8004b86:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b88:	42aa      	cmp	r2, r5
 8004b8a:	da68      	bge.n	8004c5e <__ieee754_pow+0x16a>
 8004b8c:	4a84      	ldr	r2, [pc, #528]	@ (8004da0 <__ieee754_pow+0x2ac>)
 8004b8e:	9904      	ldr	r1, [sp, #16]
 8004b90:	4291      	cmp	r1, r2
 8004b92:	d863      	bhi.n	8004c5c <__ieee754_pow+0x168>
 8004b94:	4a83      	ldr	r2, [pc, #524]	@ (8004da4 <__ieee754_pow+0x2b0>)
 8004b96:	4291      	cmp	r1, r2
 8004b98:	d910      	bls.n	8004bbc <__ieee754_pow+0xc8>
 8004b9a:	150a      	asrs	r2, r1, #20
 8004b9c:	4982      	ldr	r1, [pc, #520]	@ (8004da8 <__ieee754_pow+0x2b4>)
 8004b9e:	1852      	adds	r2, r2, r1
 8004ba0:	2a14      	cmp	r2, #20
 8004ba2:	dd3b      	ble.n	8004c1c <__ieee754_pow+0x128>
 8004ba4:	2134      	movs	r1, #52	@ 0x34
 8004ba6:	1a89      	subs	r1, r1, r2
 8004ba8:	9a02      	ldr	r2, [sp, #8]
 8004baa:	40ca      	lsrs	r2, r1
 8004bac:	0010      	movs	r0, r2
 8004bae:	4088      	lsls	r0, r1
 8004bb0:	4298      	cmp	r0, r3
 8004bb2:	d103      	bne.n	8004bbc <__ieee754_pow+0xc8>
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	3502      	adds	r5, #2
 8004bb8:	400a      	ands	r2, r1
 8004bba:	1aad      	subs	r5, r5, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d03d      	beq.n	8004c3c <__ieee754_pow+0x148>
 8004bc0:	0030      	movs	r0, r6
 8004bc2:	0039      	movs	r1, r7
 8004bc4:	f000 fcc2 	bl	800554c <fabs>
 8004bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bca:	9000      	str	r0, [sp, #0]
 8004bcc:	9101      	str	r1, [sp, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d000      	beq.n	8004bd4 <__ieee754_pow+0xe0>
 8004bd2:	e093      	b.n	8004cfc <__ieee754_pow+0x208>
 8004bd4:	4a75      	ldr	r2, [pc, #468]	@ (8004dac <__ieee754_pow+0x2b8>)
 8004bd6:	00bb      	lsls	r3, r7, #2
 8004bd8:	089b      	lsrs	r3, r3, #2
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d002      	beq.n	8004be4 <__ieee754_pow+0xf0>
 8004bde:	2c00      	cmp	r4, #0
 8004be0:	d000      	beq.n	8004be4 <__ieee754_pow+0xf0>
 8004be2:	e08b      	b.n	8004cfc <__ieee754_pow+0x208>
 8004be4:	9b06      	ldr	r3, [sp, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da07      	bge.n	8004bfa <__ieee754_pow+0x106>
 8004bea:	9a00      	ldr	r2, [sp, #0]
 8004bec:	9b01      	ldr	r3, [sp, #4]
 8004bee:	2000      	movs	r0, #0
 8004bf0:	496e      	ldr	r1, [pc, #440]	@ (8004dac <__ieee754_pow+0x2b8>)
 8004bf2:	f7fb feb7 	bl	8000964 <__aeabi_ddiv>
 8004bf6:	9000      	str	r0, [sp, #0]
 8004bf8:	9101      	str	r1, [sp, #4]
 8004bfa:	9b08      	ldr	r3, [sp, #32]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	da54      	bge.n	8004caa <__ieee754_pow+0x1b6>
 8004c00:	4b66      	ldr	r3, [pc, #408]	@ (8004d9c <__ieee754_pow+0x2a8>)
 8004c02:	18e4      	adds	r4, r4, r3
 8004c04:	432c      	orrs	r4, r5
 8004c06:	d000      	beq.n	8004c0a <__ieee754_pow+0x116>
 8004c08:	e06d      	b.n	8004ce6 <__ieee754_pow+0x1f2>
 8004c0a:	9a00      	ldr	r2, [sp, #0]
 8004c0c:	9b01      	ldr	r3, [sp, #4]
 8004c0e:	0010      	movs	r0, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	f7fc fdb3 	bl	800177c <__aeabi_dsub>
 8004c16:	0002      	movs	r2, r0
 8004c18:	000b      	movs	r3, r1
 8004c1a:	e01c      	b.n	8004c56 <__ieee754_pow+0x162>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1cf      	bne.n	8004bc0 <__ieee754_pow+0xcc>
 8004c20:	3314      	adds	r3, #20
 8004c22:	1a9a      	subs	r2, r3, r2
 8004c24:	9b04      	ldr	r3, [sp, #16]
 8004c26:	4113      	asrs	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	4091      	lsls	r1, r2
 8004c2c:	000a      	movs	r2, r1
 8004c2e:	9904      	ldr	r1, [sp, #16]
 8004c30:	428a      	cmp	r2, r1
 8004c32:	d103      	bne.n	8004c3c <__ieee754_pow+0x148>
 8004c34:	2201      	movs	r2, #1
 8004c36:	2502      	movs	r5, #2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	1aed      	subs	r5, r5, r3
 8004c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dac <__ieee754_pow+0x2b8>)
 8004c3e:	9a04      	ldr	r2, [sp, #16]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d136      	bne.n	8004cb2 <__ieee754_pow+0x1be>
 8004c44:	9b06      	ldr	r3, [sp, #24]
 8004c46:	9600      	str	r6, [sp, #0]
 8004c48:	9701      	str	r7, [sp, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da2d      	bge.n	8004caa <__ieee754_pow+0x1b6>
 8004c4e:	0032      	movs	r2, r6
 8004c50:	003b      	movs	r3, r7
 8004c52:	2000      	movs	r0, #0
 8004c54:	4955      	ldr	r1, [pc, #340]	@ (8004dac <__ieee754_pow+0x2b8>)
 8004c56:	f7fb fe85 	bl	8000964 <__aeabi_ddiv>
 8004c5a:	e773      	b.n	8004b44 <__ieee754_pow+0x50>
 8004c5c:	2502      	movs	r5, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1ae      	bne.n	8004bc0 <__ieee754_pow+0xcc>
 8004c62:	9b04      	ldr	r3, [sp, #16]
 8004c64:	4a4c      	ldr	r2, [pc, #304]	@ (8004d98 <__ieee754_pow+0x2a4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d1e8      	bne.n	8004c3c <__ieee754_pow+0x148>
 8004c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <__ieee754_pow+0x2a8>)
 8004c6c:	18e3      	adds	r3, r4, r3
 8004c6e:	4333      	orrs	r3, r6
 8004c70:	d101      	bne.n	8004c76 <__ieee754_pow+0x182>
 8004c72:	f000 fc3b 	bl	80054ec <__ieee754_pow+0x9f8>
 8004c76:	4b4b      	ldr	r3, [pc, #300]	@ (8004da4 <__ieee754_pow+0x2b0>)
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d909      	bls.n	8004c90 <__ieee754_pow+0x19c>
 8004c7c:	9b06      	ldr	r3, [sp, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	da01      	bge.n	8004c86 <__ieee754_pow+0x192>
 8004c82:	f000 fc37 	bl	80054f4 <__ieee754_pow+0xa00>
 8004c86:	9b02      	ldr	r3, [sp, #8]
 8004c88:	9c03      	ldr	r4, [sp, #12]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	9401      	str	r4, [sp, #4]
 8004c8e:	e00c      	b.n	8004caa <__ieee754_pow+0x1b6>
 8004c90:	9b06      	ldr	r3, [sp, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db01      	blt.n	8004c9a <__ieee754_pow+0x1a6>
 8004c96:	f000 fc2d 	bl	80054f4 <__ieee754_pow+0xa00>
 8004c9a:	2280      	movs	r2, #128	@ 0x80
 8004c9c:	0612      	lsls	r2, r2, #24
 8004c9e:	4694      	mov	ip, r2
 8004ca0:	9b02      	ldr	r3, [sp, #8]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	4463      	add	r3, ip
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	9800      	ldr	r0, [sp, #0]
 8004cac:	9901      	ldr	r1, [sp, #4]
 8004cae:	b015      	add	sp, #84	@ 0x54
 8004cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb2:	2380      	movs	r3, #128	@ 0x80
 8004cb4:	9a06      	ldr	r2, [sp, #24]
 8004cb6:	05db      	lsls	r3, r3, #23
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d106      	bne.n	8004cca <__ieee754_pow+0x1d6>
 8004cbc:	0032      	movs	r2, r6
 8004cbe:	003b      	movs	r3, r7
 8004cc0:	0030      	movs	r0, r6
 8004cc2:	0039      	movs	r1, r7
 8004cc4:	f7fc fa92 	bl	80011ec <__aeabi_dmul>
 8004cc8:	e73c      	b.n	8004b44 <__ieee754_pow+0x50>
 8004cca:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <__ieee754_pow+0x2bc>)
 8004ccc:	9a06      	ldr	r2, [sp, #24]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d000      	beq.n	8004cd4 <__ieee754_pow+0x1e0>
 8004cd2:	e775      	b.n	8004bc0 <__ieee754_pow+0xcc>
 8004cd4:	9b08      	ldr	r3, [sp, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da00      	bge.n	8004cdc <__ieee754_pow+0x1e8>
 8004cda:	e771      	b.n	8004bc0 <__ieee754_pow+0xcc>
 8004cdc:	0030      	movs	r0, r6
 8004cde:	0039      	movs	r1, r7
 8004ce0:	f000 fcd2 	bl	8005688 <__ieee754_sqrt>
 8004ce4:	e72e      	b.n	8004b44 <__ieee754_pow+0x50>
 8004ce6:	2d01      	cmp	r5, #1
 8004ce8:	d1df      	bne.n	8004caa <__ieee754_pow+0x1b6>
 8004cea:	9800      	ldr	r0, [sp, #0]
 8004cec:	2180      	movs	r1, #128	@ 0x80
 8004cee:	0002      	movs	r2, r0
 8004cf0:	9801      	ldr	r0, [sp, #4]
 8004cf2:	0609      	lsls	r1, r1, #24
 8004cf4:	1843      	adds	r3, r0, r1
 8004cf6:	9200      	str	r2, [sp, #0]
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	e7d6      	b.n	8004caa <__ieee754_pow+0x1b6>
 8004cfc:	0ffb      	lsrs	r3, r7, #31
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	001a      	movs	r2, r3
 8004d02:	432a      	orrs	r2, r5
 8004d04:	d104      	bne.n	8004d10 <__ieee754_pow+0x21c>
 8004d06:	0032      	movs	r2, r6
 8004d08:	003b      	movs	r3, r7
 8004d0a:	0030      	movs	r0, r6
 8004d0c:	0039      	movs	r1, r7
 8004d0e:	e780      	b.n	8004c12 <__ieee754_pow+0x11e>
 8004d10:	3d01      	subs	r5, #1
 8004d12:	2200      	movs	r2, #0
 8004d14:	431d      	orrs	r5, r3
 8004d16:	d015      	beq.n	8004d44 <__ieee754_pow+0x250>
 8004d18:	4b24      	ldr	r3, [pc, #144]	@ (8004dac <__ieee754_pow+0x2b8>)
 8004d1a:	9208      	str	r2, [sp, #32]
 8004d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d1e:	2384      	movs	r3, #132	@ 0x84
 8004d20:	9a04      	ldr	r2, [sp, #16]
 8004d22:	05db      	lsls	r3, r3, #23
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d800      	bhi.n	8004d2a <__ieee754_pow+0x236>
 8004d28:	e102      	b.n	8004f30 <__ieee754_pow+0x43c>
 8004d2a:	4b22      	ldr	r3, [pc, #136]	@ (8004db4 <__ieee754_pow+0x2c0>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d912      	bls.n	8004d56 <__ieee754_pow+0x262>
 8004d30:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <__ieee754_pow+0x2b0>)
 8004d32:	429c      	cmp	r4, r3
 8004d34:	d808      	bhi.n	8004d48 <__ieee754_pow+0x254>
 8004d36:	9b06      	ldr	r3, [sp, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da08      	bge.n	8004d4e <__ieee754_pow+0x25a>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f000 fc9b 	bl	8005678 <__math_oflow>
 8004d42:	e6ff      	b.n	8004b44 <__ieee754_pow+0x50>
 8004d44:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <__ieee754_pow+0x2c4>)
 8004d46:	e7e8      	b.n	8004d1a <__ieee754_pow+0x226>
 8004d48:	9b06      	ldr	r3, [sp, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	dcf6      	bgt.n	8004d3c <__ieee754_pow+0x248>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f000 fc8b 	bl	800566a <__math_uflow>
 8004d54:	e6f6      	b.n	8004b44 <__ieee754_pow+0x50>
 8004d56:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <__ieee754_pow+0x2c8>)
 8004d58:	429c      	cmp	r4, r3
 8004d5a:	d80b      	bhi.n	8004d74 <__ieee754_pow+0x280>
 8004d5c:	9808      	ldr	r0, [sp, #32]
 8004d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d60:	2300      	movs	r3, #0
 8004d62:	2200      	movs	r2, #0
 8004d64:	f7fb fa72 	bl	800024c <__aeabi_dcmplt>
 8004d68:	1e43      	subs	r3, r0, #1
 8004d6a:	4198      	sbcs	r0, r3
 8004d6c:	9b06      	ldr	r3, [sp, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	daee      	bge.n	8004d50 <__ieee754_pow+0x25c>
 8004d72:	e7e4      	b.n	8004d3e <__ieee754_pow+0x24a>
 8004d74:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <__ieee754_pow+0x2b8>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	d921      	bls.n	8004dc0 <__ieee754_pow+0x2cc>
 8004d7c:	9808      	ldr	r0, [sp, #32]
 8004d7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d80:	2300      	movs	r3, #0
 8004d82:	f7fb fa63 	bl	800024c <__aeabi_dcmplt>
 8004d86:	1e43      	subs	r3, r0, #1
 8004d88:	4198      	sbcs	r0, r3
 8004d8a:	9b06      	ldr	r3, [sp, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	dcd6      	bgt.n	8004d3e <__ieee754_pow+0x24a>
 8004d90:	e7de      	b.n	8004d50 <__ieee754_pow+0x25c>
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	fff00000 	.word	0xfff00000
 8004d98:	7ff00000 	.word	0x7ff00000
 8004d9c:	c0100000 	.word	0xc0100000
 8004da0:	433fffff 	.word	0x433fffff
 8004da4:	3fefffff 	.word	0x3fefffff
 8004da8:	fffffc01 	.word	0xfffffc01
 8004dac:	3ff00000 	.word	0x3ff00000
 8004db0:	3fe00000 	.word	0x3fe00000
 8004db4:	43f00000 	.word	0x43f00000
 8004db8:	bff00000 	.word	0xbff00000
 8004dbc:	3feffffe 	.word	0x3feffffe
 8004dc0:	9800      	ldr	r0, [sp, #0]
 8004dc2:	9901      	ldr	r1, [sp, #4]
 8004dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004f04 <__ieee754_pow+0x410>)
 8004dc6:	f7fc fcd9 	bl	800177c <__aeabi_dsub>
 8004dca:	22c0      	movs	r2, #192	@ 0xc0
 8004dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8004f08 <__ieee754_pow+0x414>)
 8004dce:	05d2      	lsls	r2, r2, #23
 8004dd0:	0006      	movs	r6, r0
 8004dd2:	000f      	movs	r7, r1
 8004dd4:	f7fc fa0a 	bl	80011ec <__aeabi_dmul>
 8004dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8004f0c <__ieee754_pow+0x418>)
 8004dda:	9004      	str	r0, [sp, #16]
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	4b4c      	ldr	r3, [pc, #304]	@ (8004f10 <__ieee754_pow+0x41c>)
 8004de0:	0030      	movs	r0, r6
 8004de2:	0039      	movs	r1, r7
 8004de4:	f7fc fa02 	bl	80011ec <__aeabi_dmul>
 8004de8:	2200      	movs	r2, #0
 8004dea:	9000      	str	r0, [sp, #0]
 8004dec:	9101      	str	r1, [sp, #4]
 8004dee:	4b49      	ldr	r3, [pc, #292]	@ (8004f14 <__ieee754_pow+0x420>)
 8004df0:	0030      	movs	r0, r6
 8004df2:	0039      	movs	r1, r7
 8004df4:	f7fc f9fa 	bl	80011ec <__aeabi_dmul>
 8004df8:	0002      	movs	r2, r0
 8004dfa:	000b      	movs	r3, r1
 8004dfc:	4846      	ldr	r0, [pc, #280]	@ (8004f18 <__ieee754_pow+0x424>)
 8004dfe:	4947      	ldr	r1, [pc, #284]	@ (8004f1c <__ieee754_pow+0x428>)
 8004e00:	f7fc fcbc 	bl	800177c <__aeabi_dsub>
 8004e04:	0032      	movs	r2, r6
 8004e06:	003b      	movs	r3, r7
 8004e08:	f7fc f9f0 	bl	80011ec <__aeabi_dmul>
 8004e0c:	0002      	movs	r2, r0
 8004e0e:	000b      	movs	r3, r1
 8004e10:	2000      	movs	r0, #0
 8004e12:	4943      	ldr	r1, [pc, #268]	@ (8004f20 <__ieee754_pow+0x42c>)
 8004e14:	f7fc fcb2 	bl	800177c <__aeabi_dsub>
 8004e18:	0032      	movs	r2, r6
 8004e1a:	0004      	movs	r4, r0
 8004e1c:	000d      	movs	r5, r1
 8004e1e:	003b      	movs	r3, r7
 8004e20:	0030      	movs	r0, r6
 8004e22:	0039      	movs	r1, r7
 8004e24:	f7fc f9e2 	bl	80011ec <__aeabi_dmul>
 8004e28:	0002      	movs	r2, r0
 8004e2a:	000b      	movs	r3, r1
 8004e2c:	0020      	movs	r0, r4
 8004e2e:	0029      	movs	r1, r5
 8004e30:	f7fc f9dc 	bl	80011ec <__aeabi_dmul>
 8004e34:	4a3b      	ldr	r2, [pc, #236]	@ (8004f24 <__ieee754_pow+0x430>)
 8004e36:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <__ieee754_pow+0x414>)
 8004e38:	f7fc f9d8 	bl	80011ec <__aeabi_dmul>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	000b      	movs	r3, r1
 8004e40:	9800      	ldr	r0, [sp, #0]
 8004e42:	9901      	ldr	r1, [sp, #4]
 8004e44:	f7fc fc9a 	bl	800177c <__aeabi_dsub>
 8004e48:	0002      	movs	r2, r0
 8004e4a:	000b      	movs	r3, r1
 8004e4c:	0004      	movs	r4, r0
 8004e4e:	000d      	movs	r5, r1
 8004e50:	9804      	ldr	r0, [sp, #16]
 8004e52:	9905      	ldr	r1, [sp, #20]
 8004e54:	f7fb fa22 	bl	800029c <__aeabi_dadd>
 8004e58:	9a04      	ldr	r2, [sp, #16]
 8004e5a:	9b05      	ldr	r3, [sp, #20]
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	9000      	str	r0, [sp, #0]
 8004e60:	9101      	str	r1, [sp, #4]
 8004e62:	f7fc fc8b 	bl	800177c <__aeabi_dsub>
 8004e66:	0002      	movs	r2, r0
 8004e68:	000b      	movs	r3, r1
 8004e6a:	0020      	movs	r0, r4
 8004e6c:	0029      	movs	r1, r5
 8004e6e:	f7fc fc85 	bl	800177c <__aeabi_dsub>
 8004e72:	9b02      	ldr	r3, [sp, #8]
 8004e74:	9c03      	ldr	r4, [sp, #12]
 8004e76:	9304      	str	r3, [sp, #16]
 8004e78:	9405      	str	r4, [sp, #20]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	9c04      	ldr	r4, [sp, #16]
 8004e80:	9d05      	ldr	r5, [sp, #20]
 8004e82:	0006      	movs	r6, r0
 8004e84:	000f      	movs	r7, r1
 8004e86:	9802      	ldr	r0, [sp, #8]
 8004e88:	9903      	ldr	r1, [sp, #12]
 8004e8a:	0022      	movs	r2, r4
 8004e8c:	002b      	movs	r3, r5
 8004e8e:	f7fc fc75 	bl	800177c <__aeabi_dsub>
 8004e92:	9a00      	ldr	r2, [sp, #0]
 8004e94:	9b01      	ldr	r3, [sp, #4]
 8004e96:	f7fc f9a9 	bl	80011ec <__aeabi_dmul>
 8004e9a:	9a02      	ldr	r2, [sp, #8]
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	9006      	str	r0, [sp, #24]
 8004ea0:	9107      	str	r1, [sp, #28]
 8004ea2:	0030      	movs	r0, r6
 8004ea4:	0039      	movs	r1, r7
 8004ea6:	f7fc f9a1 	bl	80011ec <__aeabi_dmul>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	000b      	movs	r3, r1
 8004eae:	9806      	ldr	r0, [sp, #24]
 8004eb0:	9907      	ldr	r1, [sp, #28]
 8004eb2:	f7fb f9f3 	bl	800029c <__aeabi_dadd>
 8004eb6:	0022      	movs	r2, r4
 8004eb8:	002b      	movs	r3, r5
 8004eba:	9002      	str	r0, [sp, #8]
 8004ebc:	9103      	str	r1, [sp, #12]
 8004ebe:	9800      	ldr	r0, [sp, #0]
 8004ec0:	9901      	ldr	r1, [sp, #4]
 8004ec2:	f7fc f993 	bl	80011ec <__aeabi_dmul>
 8004ec6:	000b      	movs	r3, r1
 8004ec8:	0002      	movs	r2, r0
 8004eca:	0006      	movs	r6, r0
 8004ecc:	000f      	movs	r7, r1
 8004ece:	9802      	ldr	r0, [sp, #8]
 8004ed0:	9903      	ldr	r1, [sp, #12]
 8004ed2:	f7fb f9e3 	bl	800029c <__aeabi_dadd>
 8004ed6:	9000      	str	r0, [sp, #0]
 8004ed8:	9101      	str	r1, [sp, #4]
 8004eda:	9c01      	ldr	r4, [sp, #4]
 8004edc:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <__ieee754_pow+0x434>)
 8004ede:	9406      	str	r4, [sp, #24]
 8004ee0:	429c      	cmp	r4, r3
 8004ee2:	dc00      	bgt.n	8004ee6 <__ieee754_pow+0x3f2>
 8004ee4:	e222      	b.n	800532c <__ieee754_pow+0x838>
 8004ee6:	4a11      	ldr	r2, [pc, #68]	@ (8004f2c <__ieee754_pow+0x438>)
 8004ee8:	18a3      	adds	r3, r4, r2
 8004eea:	9a00      	ldr	r2, [sp, #0]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d100      	bne.n	8004ef2 <__ieee754_pow+0x3fe>
 8004ef0:	e1a0      	b.n	8005234 <__ieee754_pow+0x740>
 8004ef2:	9808      	ldr	r0, [sp, #32]
 8004ef4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f7fb f9a7 	bl	800024c <__aeabi_dcmplt>
 8004efe:	1e43      	subs	r3, r0, #1
 8004f00:	4198      	sbcs	r0, r3
 8004f02:	e71c      	b.n	8004d3e <__ieee754_pow+0x24a>
 8004f04:	3ff00000 	.word	0x3ff00000
 8004f08:	3ff71547 	.word	0x3ff71547
 8004f0c:	f85ddf44 	.word	0xf85ddf44
 8004f10:	3e54ae0b 	.word	0x3e54ae0b
 8004f14:	3fd00000 	.word	0x3fd00000
 8004f18:	55555555 	.word	0x55555555
 8004f1c:	3fd55555 	.word	0x3fd55555
 8004f20:	3fe00000 	.word	0x3fe00000
 8004f24:	652b82fe 	.word	0x652b82fe
 8004f28:	408fffff 	.word	0x408fffff
 8004f2c:	bf700000 	.word	0xbf700000
 8004f30:	4be0      	ldr	r3, [pc, #896]	@ (80052b4 <__ieee754_pow+0x7c0>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	423b      	tst	r3, r7
 8004f36:	d10b      	bne.n	8004f50 <__ieee754_pow+0x45c>
 8004f38:	9800      	ldr	r0, [sp, #0]
 8004f3a:	9901      	ldr	r1, [sp, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4bde      	ldr	r3, [pc, #888]	@ (80052b8 <__ieee754_pow+0x7c4>)
 8004f40:	f7fc f954 	bl	80011ec <__aeabi_dmul>
 8004f44:	2235      	movs	r2, #53	@ 0x35
 8004f46:	9000      	str	r0, [sp, #0]
 8004f48:	9101      	str	r1, [sp, #4]
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	4252      	negs	r2, r2
 8004f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f52:	49da      	ldr	r1, [pc, #872]	@ (80052bc <__ieee754_pow+0x7c8>)
 8004f54:	151b      	asrs	r3, r3, #20
 8004f56:	185b      	adds	r3, r3, r1
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f5e:	4dd8      	ldr	r5, [pc, #864]	@ (80052c0 <__ieee754_pow+0x7cc>)
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	4ad8      	ldr	r2, [pc, #864]	@ (80052c4 <__ieee754_pow+0x7d0>)
 8004f64:	0b1b      	lsrs	r3, r3, #12
 8004f66:	2600      	movs	r6, #0
 8004f68:	431d      	orrs	r5, r3
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	dd09      	ble.n	8004f82 <__ieee754_pow+0x48e>
 8004f6e:	4ad6      	ldr	r2, [pc, #856]	@ (80052c8 <__ieee754_pow+0x7d4>)
 8004f70:	3601      	adds	r6, #1
 8004f72:	4293      	cmp	r3, r2
 8004f74:	dd05      	ble.n	8004f82 <__ieee754_pow+0x48e>
 8004f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f78:	199b      	adds	r3, r3, r6
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f7e:	4bd3      	ldr	r3, [pc, #844]	@ (80052cc <__ieee754_pow+0x7d8>)
 8004f80:	18ed      	adds	r5, r5, r3
 8004f82:	9800      	ldr	r0, [sp, #0]
 8004f84:	9901      	ldr	r1, [sp, #4]
 8004f86:	0029      	movs	r1, r5
 8004f88:	4bd1      	ldr	r3, [pc, #836]	@ (80052d0 <__ieee754_pow+0x7dc>)
 8004f8a:	00f2      	lsls	r2, r6, #3
 8004f8c:	189b      	adds	r3, r3, r2
 8004f8e:	685c      	ldr	r4, [r3, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004f94:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f98:	001a      	movs	r2, r3
 8004f9a:	0023      	movs	r3, r4
 8004f9c:	900c      	str	r0, [sp, #48]	@ 0x30
 8004f9e:	910d      	str	r1, [sp, #52]	@ 0x34
 8004fa0:	f7fc fbec 	bl	800177c <__aeabi_dsub>
 8004fa4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fa8:	9010      	str	r0, [sp, #64]	@ 0x40
 8004faa:	9111      	str	r1, [sp, #68]	@ 0x44
 8004fac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fb0:	f7fb f974 	bl	800029c <__aeabi_dadd>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	000b      	movs	r3, r1
 8004fb8:	2000      	movs	r0, #0
 8004fba:	49c1      	ldr	r1, [pc, #772]	@ (80052c0 <__ieee754_pow+0x7cc>)
 8004fbc:	f7fb fcd2 	bl	8000964 <__aeabi_ddiv>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	000b      	movs	r3, r1
 8004fc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8004fc6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004fc8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004fca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004fcc:	f7fc f90e 	bl	80011ec <__aeabi_dmul>
 8004fd0:	9006      	str	r0, [sp, #24]
 8004fd2:	9107      	str	r1, [sp, #28]
 8004fd4:	9b06      	ldr	r3, [sp, #24]
 8004fd6:	9c07      	ldr	r4, [sp, #28]
 8004fd8:	2180      	movs	r1, #128	@ 0x80
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	9405      	str	r4, [sp, #20]
 8004fde:	2080      	movs	r0, #128	@ 0x80
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	106d      	asrs	r5, r5, #1
 8004fe6:	0589      	lsls	r1, r1, #22
 8004fe8:	9304      	str	r3, [sp, #16]
 8004fea:	4329      	orrs	r1, r5
 8004fec:	0300      	lsls	r0, r0, #12
 8004fee:	9b04      	ldr	r3, [sp, #16]
 8004ff0:	9c05      	ldr	r4, [sp, #20]
 8004ff2:	1809      	adds	r1, r1, r0
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	9401      	str	r4, [sp, #4]
 8004ff8:	04b6      	lsls	r6, r6, #18
 8004ffa:	198b      	adds	r3, r1, r6
 8004ffc:	9800      	ldr	r0, [sp, #0]
 8004ffe:	9901      	ldr	r1, [sp, #4]
 8005000:	0014      	movs	r4, r2
 8005002:	001d      	movs	r5, r3
 8005004:	f7fc f8f2 	bl	80011ec <__aeabi_dmul>
 8005008:	0002      	movs	r2, r0
 800500a:	000b      	movs	r3, r1
 800500c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800500e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005010:	f7fc fbb4 	bl	800177c <__aeabi_dsub>
 8005014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005018:	0006      	movs	r6, r0
 800501a:	000f      	movs	r7, r1
 800501c:	0020      	movs	r0, r4
 800501e:	0029      	movs	r1, r5
 8005020:	f7fc fbac 	bl	800177c <__aeabi_dsub>
 8005024:	0002      	movs	r2, r0
 8005026:	000b      	movs	r3, r1
 8005028:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800502a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800502c:	f7fc fba6 	bl	800177c <__aeabi_dsub>
 8005030:	9a00      	ldr	r2, [sp, #0]
 8005032:	9b01      	ldr	r3, [sp, #4]
 8005034:	f7fc f8da 	bl	80011ec <__aeabi_dmul>
 8005038:	0002      	movs	r2, r0
 800503a:	000b      	movs	r3, r1
 800503c:	0030      	movs	r0, r6
 800503e:	0039      	movs	r1, r7
 8005040:	f7fc fb9c 	bl	800177c <__aeabi_dsub>
 8005044:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005046:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005048:	f7fc f8d0 	bl	80011ec <__aeabi_dmul>
 800504c:	9a06      	ldr	r2, [sp, #24]
 800504e:	9b07      	ldr	r3, [sp, #28]
 8005050:	900a      	str	r0, [sp, #40]	@ 0x28
 8005052:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005054:	0010      	movs	r0, r2
 8005056:	0019      	movs	r1, r3
 8005058:	f7fc f8c8 	bl	80011ec <__aeabi_dmul>
 800505c:	0006      	movs	r6, r0
 800505e:	000f      	movs	r7, r1
 8005060:	4a9c      	ldr	r2, [pc, #624]	@ (80052d4 <__ieee754_pow+0x7e0>)
 8005062:	4b9d      	ldr	r3, [pc, #628]	@ (80052d8 <__ieee754_pow+0x7e4>)
 8005064:	f7fc f8c2 	bl	80011ec <__aeabi_dmul>
 8005068:	4a9c      	ldr	r2, [pc, #624]	@ (80052dc <__ieee754_pow+0x7e8>)
 800506a:	4b9d      	ldr	r3, [pc, #628]	@ (80052e0 <__ieee754_pow+0x7ec>)
 800506c:	f7fb f916 	bl	800029c <__aeabi_dadd>
 8005070:	0032      	movs	r2, r6
 8005072:	003b      	movs	r3, r7
 8005074:	f7fc f8ba 	bl	80011ec <__aeabi_dmul>
 8005078:	4a9a      	ldr	r2, [pc, #616]	@ (80052e4 <__ieee754_pow+0x7f0>)
 800507a:	4b9b      	ldr	r3, [pc, #620]	@ (80052e8 <__ieee754_pow+0x7f4>)
 800507c:	f7fb f90e 	bl	800029c <__aeabi_dadd>
 8005080:	0032      	movs	r2, r6
 8005082:	003b      	movs	r3, r7
 8005084:	f7fc f8b2 	bl	80011ec <__aeabi_dmul>
 8005088:	4a98      	ldr	r2, [pc, #608]	@ (80052ec <__ieee754_pow+0x7f8>)
 800508a:	4b99      	ldr	r3, [pc, #612]	@ (80052f0 <__ieee754_pow+0x7fc>)
 800508c:	f7fb f906 	bl	800029c <__aeabi_dadd>
 8005090:	0032      	movs	r2, r6
 8005092:	003b      	movs	r3, r7
 8005094:	f7fc f8aa 	bl	80011ec <__aeabi_dmul>
 8005098:	4a96      	ldr	r2, [pc, #600]	@ (80052f4 <__ieee754_pow+0x800>)
 800509a:	4b97      	ldr	r3, [pc, #604]	@ (80052f8 <__ieee754_pow+0x804>)
 800509c:	f7fb f8fe 	bl	800029c <__aeabi_dadd>
 80050a0:	0032      	movs	r2, r6
 80050a2:	003b      	movs	r3, r7
 80050a4:	f7fc f8a2 	bl	80011ec <__aeabi_dmul>
 80050a8:	4a94      	ldr	r2, [pc, #592]	@ (80052fc <__ieee754_pow+0x808>)
 80050aa:	4b95      	ldr	r3, [pc, #596]	@ (8005300 <__ieee754_pow+0x80c>)
 80050ac:	f7fb f8f6 	bl	800029c <__aeabi_dadd>
 80050b0:	0032      	movs	r2, r6
 80050b2:	0004      	movs	r4, r0
 80050b4:	000d      	movs	r5, r1
 80050b6:	003b      	movs	r3, r7
 80050b8:	0030      	movs	r0, r6
 80050ba:	0039      	movs	r1, r7
 80050bc:	f7fc f896 	bl	80011ec <__aeabi_dmul>
 80050c0:	0002      	movs	r2, r0
 80050c2:	000b      	movs	r3, r1
 80050c4:	0020      	movs	r0, r4
 80050c6:	0029      	movs	r1, r5
 80050c8:	f7fc f890 	bl	80011ec <__aeabi_dmul>
 80050cc:	9a00      	ldr	r2, [sp, #0]
 80050ce:	9b01      	ldr	r3, [sp, #4]
 80050d0:	0004      	movs	r4, r0
 80050d2:	000d      	movs	r5, r1
 80050d4:	9806      	ldr	r0, [sp, #24]
 80050d6:	9907      	ldr	r1, [sp, #28]
 80050d8:	f7fb f8e0 	bl	800029c <__aeabi_dadd>
 80050dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050e0:	f7fc f884 	bl	80011ec <__aeabi_dmul>
 80050e4:	0022      	movs	r2, r4
 80050e6:	002b      	movs	r3, r5
 80050e8:	f7fb f8d8 	bl	800029c <__aeabi_dadd>
 80050ec:	9a00      	ldr	r2, [sp, #0]
 80050ee:	9b01      	ldr	r3, [sp, #4]
 80050f0:	900c      	str	r0, [sp, #48]	@ 0x30
 80050f2:	910d      	str	r1, [sp, #52]	@ 0x34
 80050f4:	0010      	movs	r0, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	f7fc f878 	bl	80011ec <__aeabi_dmul>
 80050fc:	2200      	movs	r2, #0
 80050fe:	4b81      	ldr	r3, [pc, #516]	@ (8005304 <__ieee754_pow+0x810>)
 8005100:	0004      	movs	r4, r0
 8005102:	000d      	movs	r5, r1
 8005104:	f7fb f8ca 	bl	800029c <__aeabi_dadd>
 8005108:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800510a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800510c:	f7fb f8c6 	bl	800029c <__aeabi_dadd>
 8005110:	2000      	movs	r0, #0
 8005112:	000f      	movs	r7, r1
 8005114:	0006      	movs	r6, r0
 8005116:	0002      	movs	r2, r0
 8005118:	000b      	movs	r3, r1
 800511a:	9800      	ldr	r0, [sp, #0]
 800511c:	9901      	ldr	r1, [sp, #4]
 800511e:	f7fc f865 	bl	80011ec <__aeabi_dmul>
 8005122:	2200      	movs	r2, #0
 8005124:	9000      	str	r0, [sp, #0]
 8005126:	9101      	str	r1, [sp, #4]
 8005128:	4b76      	ldr	r3, [pc, #472]	@ (8005304 <__ieee754_pow+0x810>)
 800512a:	0030      	movs	r0, r6
 800512c:	0039      	movs	r1, r7
 800512e:	f7fc fb25 	bl	800177c <__aeabi_dsub>
 8005132:	0022      	movs	r2, r4
 8005134:	002b      	movs	r3, r5
 8005136:	f7fc fb21 	bl	800177c <__aeabi_dsub>
 800513a:	0002      	movs	r2, r0
 800513c:	000b      	movs	r3, r1
 800513e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005140:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005142:	f7fc fb1b 	bl	800177c <__aeabi_dsub>
 8005146:	9a06      	ldr	r2, [sp, #24]
 8005148:	9b07      	ldr	r3, [sp, #28]
 800514a:	f7fc f84f 	bl	80011ec <__aeabi_dmul>
 800514e:	0032      	movs	r2, r6
 8005150:	0004      	movs	r4, r0
 8005152:	000d      	movs	r5, r1
 8005154:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005156:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005158:	003b      	movs	r3, r7
 800515a:	f7fc f847 	bl	80011ec <__aeabi_dmul>
 800515e:	0002      	movs	r2, r0
 8005160:	000b      	movs	r3, r1
 8005162:	0020      	movs	r0, r4
 8005164:	0029      	movs	r1, r5
 8005166:	f7fb f899 	bl	800029c <__aeabi_dadd>
 800516a:	0004      	movs	r4, r0
 800516c:	000d      	movs	r5, r1
 800516e:	0002      	movs	r2, r0
 8005170:	000b      	movs	r3, r1
 8005172:	9800      	ldr	r0, [sp, #0]
 8005174:	9901      	ldr	r1, [sp, #4]
 8005176:	f7fb f891 	bl	800029c <__aeabi_dadd>
 800517a:	22e0      	movs	r2, #224	@ 0xe0
 800517c:	2000      	movs	r0, #0
 800517e:	4b62      	ldr	r3, [pc, #392]	@ (8005308 <__ieee754_pow+0x814>)
 8005180:	0612      	lsls	r2, r2, #24
 8005182:	0006      	movs	r6, r0
 8005184:	000f      	movs	r7, r1
 8005186:	f7fc f831 	bl	80011ec <__aeabi_dmul>
 800518a:	9006      	str	r0, [sp, #24]
 800518c:	9107      	str	r1, [sp, #28]
 800518e:	9a00      	ldr	r2, [sp, #0]
 8005190:	9b01      	ldr	r3, [sp, #4]
 8005192:	0030      	movs	r0, r6
 8005194:	0039      	movs	r1, r7
 8005196:	f7fc faf1 	bl	800177c <__aeabi_dsub>
 800519a:	0002      	movs	r2, r0
 800519c:	000b      	movs	r3, r1
 800519e:	0020      	movs	r0, r4
 80051a0:	0029      	movs	r1, r5
 80051a2:	f7fc faeb 	bl	800177c <__aeabi_dsub>
 80051a6:	4a59      	ldr	r2, [pc, #356]	@ (800530c <__ieee754_pow+0x818>)
 80051a8:	4b57      	ldr	r3, [pc, #348]	@ (8005308 <__ieee754_pow+0x814>)
 80051aa:	f7fc f81f 	bl	80011ec <__aeabi_dmul>
 80051ae:	4a58      	ldr	r2, [pc, #352]	@ (8005310 <__ieee754_pow+0x81c>)
 80051b0:	0004      	movs	r4, r0
 80051b2:	000d      	movs	r5, r1
 80051b4:	0030      	movs	r0, r6
 80051b6:	0039      	movs	r1, r7
 80051b8:	4b56      	ldr	r3, [pc, #344]	@ (8005314 <__ieee754_pow+0x820>)
 80051ba:	f7fc f817 	bl	80011ec <__aeabi_dmul>
 80051be:	0002      	movs	r2, r0
 80051c0:	000b      	movs	r3, r1
 80051c2:	0020      	movs	r0, r4
 80051c4:	0029      	movs	r1, r5
 80051c6:	f7fb f869 	bl	800029c <__aeabi_dadd>
 80051ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80051cc:	4b52      	ldr	r3, [pc, #328]	@ (8005318 <__ieee754_pow+0x824>)
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f7fb f862 	bl	800029c <__aeabi_dadd>
 80051d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80051da:	910b      	str	r1, [sp, #44]	@ 0x2c
 80051dc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80051de:	f7fc fec7 	bl	8001f70 <__aeabi_i2d>
 80051e2:	0004      	movs	r4, r0
 80051e4:	000d      	movs	r5, r1
 80051e6:	9806      	ldr	r0, [sp, #24]
 80051e8:	9907      	ldr	r1, [sp, #28]
 80051ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80051ec:	4b4b      	ldr	r3, [pc, #300]	@ (800531c <__ieee754_pow+0x828>)
 80051ee:	189b      	adds	r3, r3, r2
 80051f0:	681e      	ldr	r6, [r3, #0]
 80051f2:	685f      	ldr	r7, [r3, #4]
 80051f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051f8:	f7fb f850 	bl	800029c <__aeabi_dadd>
 80051fc:	0032      	movs	r2, r6
 80051fe:	003b      	movs	r3, r7
 8005200:	f7fb f84c 	bl	800029c <__aeabi_dadd>
 8005204:	0022      	movs	r2, r4
 8005206:	002b      	movs	r3, r5
 8005208:	f7fb f848 	bl	800029c <__aeabi_dadd>
 800520c:	2000      	movs	r0, #0
 800520e:	0022      	movs	r2, r4
 8005210:	002b      	movs	r3, r5
 8005212:	9000      	str	r0, [sp, #0]
 8005214:	9101      	str	r1, [sp, #4]
 8005216:	f7fc fab1 	bl	800177c <__aeabi_dsub>
 800521a:	0032      	movs	r2, r6
 800521c:	003b      	movs	r3, r7
 800521e:	f7fc faad 	bl	800177c <__aeabi_dsub>
 8005222:	9a06      	ldr	r2, [sp, #24]
 8005224:	9b07      	ldr	r3, [sp, #28]
 8005226:	f7fc faa9 	bl	800177c <__aeabi_dsub>
 800522a:	0002      	movs	r2, r0
 800522c:	000b      	movs	r3, r1
 800522e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005232:	e61c      	b.n	8004e6e <__ieee754_pow+0x37a>
 8005234:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <__ieee754_pow+0x82c>)
 8005236:	4b3b      	ldr	r3, [pc, #236]	@ (8005324 <__ieee754_pow+0x830>)
 8005238:	9802      	ldr	r0, [sp, #8]
 800523a:	9903      	ldr	r1, [sp, #12]
 800523c:	f7fb f82e 	bl	800029c <__aeabi_dadd>
 8005240:	0032      	movs	r2, r6
 8005242:	003b      	movs	r3, r7
 8005244:	9004      	str	r0, [sp, #16]
 8005246:	9105      	str	r1, [sp, #20]
 8005248:	9800      	ldr	r0, [sp, #0]
 800524a:	9901      	ldr	r1, [sp, #4]
 800524c:	f7fc fa96 	bl	800177c <__aeabi_dsub>
 8005250:	0002      	movs	r2, r0
 8005252:	000b      	movs	r3, r1
 8005254:	9804      	ldr	r0, [sp, #16]
 8005256:	9905      	ldr	r1, [sp, #20]
 8005258:	f7fb f80c 	bl	8000274 <__aeabi_dcmpgt>
 800525c:	2800      	cmp	r0, #0
 800525e:	d000      	beq.n	8005262 <__ieee754_pow+0x76e>
 8005260:	e647      	b.n	8004ef2 <__ieee754_pow+0x3fe>
 8005262:	2580      	movs	r5, #128	@ 0x80
 8005264:	4b30      	ldr	r3, [pc, #192]	@ (8005328 <__ieee754_pow+0x834>)
 8005266:	036d      	lsls	r5, r5, #13
 8005268:	1524      	asrs	r4, r4, #20
 800526a:	18e4      	adds	r4, r4, r3
 800526c:	002b      	movs	r3, r5
 800526e:	4123      	asrs	r3, r4
 8005270:	9a06      	ldr	r2, [sp, #24]
 8005272:	4912      	ldr	r1, [pc, #72]	@ (80052bc <__ieee754_pow+0x7c8>)
 8005274:	189b      	adds	r3, r3, r2
 8005276:	005a      	lsls	r2, r3, #1
 8005278:	4c14      	ldr	r4, [pc, #80]	@ (80052cc <__ieee754_pow+0x7d8>)
 800527a:	0d52      	lsrs	r2, r2, #21
 800527c:	1852      	adds	r2, r2, r1
 800527e:	4114      	asrs	r4, r2
 8005280:	401c      	ands	r4, r3
 8005282:	0021      	movs	r1, r4
 8005284:	2414      	movs	r4, #20
 8005286:	031b      	lsls	r3, r3, #12
 8005288:	0b1b      	lsrs	r3, r3, #12
 800528a:	432b      	orrs	r3, r5
 800528c:	1aa2      	subs	r2, r4, r2
 800528e:	4113      	asrs	r3, r2
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	9b06      	ldr	r3, [sp, #24]
 8005294:	2000      	movs	r0, #0
 8005296:	2b00      	cmp	r3, #0
 8005298:	da02      	bge.n	80052a0 <__ieee754_pow+0x7ac>
 800529a:	9b00      	ldr	r3, [sp, #0]
 800529c:	425b      	negs	r3, r3
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	0002      	movs	r2, r0
 80052a2:	000b      	movs	r3, r1
 80052a4:	0030      	movs	r0, r6
 80052a6:	0039      	movs	r1, r7
 80052a8:	f7fc fa68 	bl	800177c <__aeabi_dsub>
 80052ac:	0006      	movs	r6, r0
 80052ae:	000f      	movs	r7, r1
 80052b0:	e065      	b.n	800537e <__ieee754_pow+0x88a>
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	7ff00000 	.word	0x7ff00000
 80052b8:	43400000 	.word	0x43400000
 80052bc:	fffffc01 	.word	0xfffffc01
 80052c0:	3ff00000 	.word	0x3ff00000
 80052c4:	0003988e 	.word	0x0003988e
 80052c8:	000bb679 	.word	0x000bb679
 80052cc:	fff00000 	.word	0xfff00000
 80052d0:	08005900 	.word	0x08005900
 80052d4:	4a454eef 	.word	0x4a454eef
 80052d8:	3fca7e28 	.word	0x3fca7e28
 80052dc:	93c9db65 	.word	0x93c9db65
 80052e0:	3fcd864a 	.word	0x3fcd864a
 80052e4:	a91d4101 	.word	0xa91d4101
 80052e8:	3fd17460 	.word	0x3fd17460
 80052ec:	518f264d 	.word	0x518f264d
 80052f0:	3fd55555 	.word	0x3fd55555
 80052f4:	db6fabff 	.word	0xdb6fabff
 80052f8:	3fdb6db6 	.word	0x3fdb6db6
 80052fc:	33333303 	.word	0x33333303
 8005300:	3fe33333 	.word	0x3fe33333
 8005304:	40080000 	.word	0x40080000
 8005308:	3feec709 	.word	0x3feec709
 800530c:	dc3a03fd 	.word	0xdc3a03fd
 8005310:	145b01f5 	.word	0x145b01f5
 8005314:	be3e2fe0 	.word	0xbe3e2fe0
 8005318:	080058e0 	.word	0x080058e0
 800531c:	080058f0 	.word	0x080058f0
 8005320:	652b82fe 	.word	0x652b82fe
 8005324:	3c971547 	.word	0x3c971547
 8005328:	fffffc02 	.word	0xfffffc02
 800532c:	9b01      	ldr	r3, [sp, #4]
 800532e:	005c      	lsls	r4, r3, #1
 8005330:	4b72      	ldr	r3, [pc, #456]	@ (80054fc <__ieee754_pow+0xa08>)
 8005332:	0864      	lsrs	r4, r4, #1
 8005334:	429c      	cmp	r4, r3
 8005336:	d91c      	bls.n	8005372 <__ieee754_pow+0x87e>
 8005338:	4a71      	ldr	r2, [pc, #452]	@ (8005500 <__ieee754_pow+0xa0c>)
 800533a:	9b01      	ldr	r3, [sp, #4]
 800533c:	189b      	adds	r3, r3, r2
 800533e:	9a00      	ldr	r2, [sp, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	d008      	beq.n	8005356 <__ieee754_pow+0x862>
 8005344:	9808      	ldr	r0, [sp, #32]
 8005346:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005348:	2300      	movs	r3, #0
 800534a:	2200      	movs	r2, #0
 800534c:	f7fa ff7e 	bl	800024c <__aeabi_dcmplt>
 8005350:	1e43      	subs	r3, r0, #1
 8005352:	4198      	sbcs	r0, r3
 8005354:	e4fc      	b.n	8004d50 <__ieee754_pow+0x25c>
 8005356:	0032      	movs	r2, r6
 8005358:	9800      	ldr	r0, [sp, #0]
 800535a:	9901      	ldr	r1, [sp, #4]
 800535c:	003b      	movs	r3, r7
 800535e:	f7fc fa0d 	bl	800177c <__aeabi_dsub>
 8005362:	9a02      	ldr	r2, [sp, #8]
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	f7fa ff8f 	bl	8000288 <__aeabi_dcmpge>
 800536a:	2800      	cmp	r0, #0
 800536c:	d1ea      	bne.n	8005344 <__ieee754_pow+0x850>
 800536e:	4c65      	ldr	r4, [pc, #404]	@ (8005504 <__ieee754_pow+0xa10>)
 8005370:	e777      	b.n	8005262 <__ieee754_pow+0x76e>
 8005372:	9a04      	ldr	r2, [sp, #16]
 8005374:	4b64      	ldr	r3, [pc, #400]	@ (8005508 <__ieee754_pow+0xa14>)
 8005376:	9200      	str	r2, [sp, #0]
 8005378:	429c      	cmp	r4, r3
 800537a:	d900      	bls.n	800537e <__ieee754_pow+0x88a>
 800537c:	e771      	b.n	8005262 <__ieee754_pow+0x76e>
 800537e:	9a02      	ldr	r2, [sp, #8]
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	0030      	movs	r0, r6
 8005384:	0039      	movs	r1, r7
 8005386:	f7fa ff89 	bl	800029c <__aeabi_dadd>
 800538a:	2000      	movs	r0, #0
 800538c:	2200      	movs	r2, #0
 800538e:	4b5f      	ldr	r3, [pc, #380]	@ (800550c <__ieee754_pow+0xa18>)
 8005390:	9004      	str	r0, [sp, #16]
 8005392:	9105      	str	r1, [sp, #20]
 8005394:	f7fb ff2a 	bl	80011ec <__aeabi_dmul>
 8005398:	0032      	movs	r2, r6
 800539a:	003b      	movs	r3, r7
 800539c:	9006      	str	r0, [sp, #24]
 800539e:	9107      	str	r1, [sp, #28]
 80053a0:	9804      	ldr	r0, [sp, #16]
 80053a2:	9905      	ldr	r1, [sp, #20]
 80053a4:	f7fc f9ea 	bl	800177c <__aeabi_dsub>
 80053a8:	0002      	movs	r2, r0
 80053aa:	000b      	movs	r3, r1
 80053ac:	9802      	ldr	r0, [sp, #8]
 80053ae:	9903      	ldr	r1, [sp, #12]
 80053b0:	f7fc f9e4 	bl	800177c <__aeabi_dsub>
 80053b4:	4a56      	ldr	r2, [pc, #344]	@ (8005510 <__ieee754_pow+0xa1c>)
 80053b6:	4b57      	ldr	r3, [pc, #348]	@ (8005514 <__ieee754_pow+0xa20>)
 80053b8:	f7fb ff18 	bl	80011ec <__aeabi_dmul>
 80053bc:	4a56      	ldr	r2, [pc, #344]	@ (8005518 <__ieee754_pow+0xa24>)
 80053be:	0004      	movs	r4, r0
 80053c0:	000d      	movs	r5, r1
 80053c2:	9804      	ldr	r0, [sp, #16]
 80053c4:	9905      	ldr	r1, [sp, #20]
 80053c6:	4b55      	ldr	r3, [pc, #340]	@ (800551c <__ieee754_pow+0xa28>)
 80053c8:	f7fb ff10 	bl	80011ec <__aeabi_dmul>
 80053cc:	0002      	movs	r2, r0
 80053ce:	000b      	movs	r3, r1
 80053d0:	0020      	movs	r0, r4
 80053d2:	0029      	movs	r1, r5
 80053d4:	f7fa ff62 	bl	800029c <__aeabi_dadd>
 80053d8:	0004      	movs	r4, r0
 80053da:	000d      	movs	r5, r1
 80053dc:	0002      	movs	r2, r0
 80053de:	000b      	movs	r3, r1
 80053e0:	9806      	ldr	r0, [sp, #24]
 80053e2:	9907      	ldr	r1, [sp, #28]
 80053e4:	f7fa ff5a 	bl	800029c <__aeabi_dadd>
 80053e8:	9a06      	ldr	r2, [sp, #24]
 80053ea:	9b07      	ldr	r3, [sp, #28]
 80053ec:	0006      	movs	r6, r0
 80053ee:	000f      	movs	r7, r1
 80053f0:	f7fc f9c4 	bl	800177c <__aeabi_dsub>
 80053f4:	0002      	movs	r2, r0
 80053f6:	000b      	movs	r3, r1
 80053f8:	0020      	movs	r0, r4
 80053fa:	0029      	movs	r1, r5
 80053fc:	f7fc f9be 	bl	800177c <__aeabi_dsub>
 8005400:	0032      	movs	r2, r6
 8005402:	9002      	str	r0, [sp, #8]
 8005404:	9103      	str	r1, [sp, #12]
 8005406:	003b      	movs	r3, r7
 8005408:	0030      	movs	r0, r6
 800540a:	0039      	movs	r1, r7
 800540c:	f7fb feee 	bl	80011ec <__aeabi_dmul>
 8005410:	0004      	movs	r4, r0
 8005412:	000d      	movs	r5, r1
 8005414:	4a42      	ldr	r2, [pc, #264]	@ (8005520 <__ieee754_pow+0xa2c>)
 8005416:	4b43      	ldr	r3, [pc, #268]	@ (8005524 <__ieee754_pow+0xa30>)
 8005418:	f7fb fee8 	bl	80011ec <__aeabi_dmul>
 800541c:	4a42      	ldr	r2, [pc, #264]	@ (8005528 <__ieee754_pow+0xa34>)
 800541e:	4b43      	ldr	r3, [pc, #268]	@ (800552c <__ieee754_pow+0xa38>)
 8005420:	f7fc f9ac 	bl	800177c <__aeabi_dsub>
 8005424:	0022      	movs	r2, r4
 8005426:	002b      	movs	r3, r5
 8005428:	f7fb fee0 	bl	80011ec <__aeabi_dmul>
 800542c:	4a40      	ldr	r2, [pc, #256]	@ (8005530 <__ieee754_pow+0xa3c>)
 800542e:	4b41      	ldr	r3, [pc, #260]	@ (8005534 <__ieee754_pow+0xa40>)
 8005430:	f7fa ff34 	bl	800029c <__aeabi_dadd>
 8005434:	0022      	movs	r2, r4
 8005436:	002b      	movs	r3, r5
 8005438:	f7fb fed8 	bl	80011ec <__aeabi_dmul>
 800543c:	4a3e      	ldr	r2, [pc, #248]	@ (8005538 <__ieee754_pow+0xa44>)
 800543e:	4b3f      	ldr	r3, [pc, #252]	@ (800553c <__ieee754_pow+0xa48>)
 8005440:	f7fc f99c 	bl	800177c <__aeabi_dsub>
 8005444:	0022      	movs	r2, r4
 8005446:	002b      	movs	r3, r5
 8005448:	f7fb fed0 	bl	80011ec <__aeabi_dmul>
 800544c:	4a3c      	ldr	r2, [pc, #240]	@ (8005540 <__ieee754_pow+0xa4c>)
 800544e:	4b3d      	ldr	r3, [pc, #244]	@ (8005544 <__ieee754_pow+0xa50>)
 8005450:	f7fa ff24 	bl	800029c <__aeabi_dadd>
 8005454:	0022      	movs	r2, r4
 8005456:	002b      	movs	r3, r5
 8005458:	f7fb fec8 	bl	80011ec <__aeabi_dmul>
 800545c:	0002      	movs	r2, r0
 800545e:	000b      	movs	r3, r1
 8005460:	0030      	movs	r0, r6
 8005462:	0039      	movs	r1, r7
 8005464:	f7fc f98a 	bl	800177c <__aeabi_dsub>
 8005468:	0004      	movs	r4, r0
 800546a:	000d      	movs	r5, r1
 800546c:	0002      	movs	r2, r0
 800546e:	000b      	movs	r3, r1
 8005470:	0030      	movs	r0, r6
 8005472:	0039      	movs	r1, r7
 8005474:	f7fb feba 	bl	80011ec <__aeabi_dmul>
 8005478:	2380      	movs	r3, #128	@ 0x80
 800547a:	9004      	str	r0, [sp, #16]
 800547c:	9105      	str	r1, [sp, #20]
 800547e:	2200      	movs	r2, #0
 8005480:	0020      	movs	r0, r4
 8005482:	0029      	movs	r1, r5
 8005484:	05db      	lsls	r3, r3, #23
 8005486:	f7fc f979 	bl	800177c <__aeabi_dsub>
 800548a:	0002      	movs	r2, r0
 800548c:	000b      	movs	r3, r1
 800548e:	9804      	ldr	r0, [sp, #16]
 8005490:	9905      	ldr	r1, [sp, #20]
 8005492:	f7fb fa67 	bl	8000964 <__aeabi_ddiv>
 8005496:	9a02      	ldr	r2, [sp, #8]
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	0004      	movs	r4, r0
 800549c:	000d      	movs	r5, r1
 800549e:	0030      	movs	r0, r6
 80054a0:	0039      	movs	r1, r7
 80054a2:	f7fb fea3 	bl	80011ec <__aeabi_dmul>
 80054a6:	9a02      	ldr	r2, [sp, #8]
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	f7fa fef7 	bl	800029c <__aeabi_dadd>
 80054ae:	0002      	movs	r2, r0
 80054b0:	000b      	movs	r3, r1
 80054b2:	0020      	movs	r0, r4
 80054b4:	0029      	movs	r1, r5
 80054b6:	f7fc f961 	bl	800177c <__aeabi_dsub>
 80054ba:	0032      	movs	r2, r6
 80054bc:	003b      	movs	r3, r7
 80054be:	f7fc f95d 	bl	800177c <__aeabi_dsub>
 80054c2:	0002      	movs	r2, r0
 80054c4:	000b      	movs	r3, r1
 80054c6:	2000      	movs	r0, #0
 80054c8:	491f      	ldr	r1, [pc, #124]	@ (8005548 <__ieee754_pow+0xa54>)
 80054ca:	f7fc f957 	bl	800177c <__aeabi_dsub>
 80054ce:	9b00      	ldr	r3, [sp, #0]
 80054d0:	051b      	lsls	r3, r3, #20
 80054d2:	185b      	adds	r3, r3, r1
 80054d4:	151a      	asrs	r2, r3, #20
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	dc06      	bgt.n	80054e8 <__ieee754_pow+0x9f4>
 80054da:	9a00      	ldr	r2, [sp, #0]
 80054dc:	f000 f83a 	bl	8005554 <scalbn>
 80054e0:	9a08      	ldr	r2, [sp, #32]
 80054e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e4:	f7ff fbee 	bl	8004cc4 <__ieee754_pow+0x1d0>
 80054e8:	0019      	movs	r1, r3
 80054ea:	e7f9      	b.n	80054e0 <__ieee754_pow+0x9ec>
 80054ec:	2300      	movs	r3, #0
 80054ee:	4c16      	ldr	r4, [pc, #88]	@ (8005548 <__ieee754_pow+0xa54>)
 80054f0:	f7ff fbcb 	bl	8004c8a <__ieee754_pow+0x196>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2400      	movs	r4, #0
 80054f8:	f7ff fbc7 	bl	8004c8a <__ieee754_pow+0x196>
 80054fc:	4090cbff 	.word	0x4090cbff
 8005500:	3f6f3400 	.word	0x3f6f3400
 8005504:	4090cc00 	.word	0x4090cc00
 8005508:	3fe00000 	.word	0x3fe00000
 800550c:	3fe62e43 	.word	0x3fe62e43
 8005510:	fefa39ef 	.word	0xfefa39ef
 8005514:	3fe62e42 	.word	0x3fe62e42
 8005518:	0ca86c39 	.word	0x0ca86c39
 800551c:	be205c61 	.word	0xbe205c61
 8005520:	72bea4d0 	.word	0x72bea4d0
 8005524:	3e663769 	.word	0x3e663769
 8005528:	c5d26bf1 	.word	0xc5d26bf1
 800552c:	3ebbbd41 	.word	0x3ebbbd41
 8005530:	af25de2c 	.word	0xaf25de2c
 8005534:	3f11566a 	.word	0x3f11566a
 8005538:	16bebd93 	.word	0x16bebd93
 800553c:	3f66c16c 	.word	0x3f66c16c
 8005540:	5555553e 	.word	0x5555553e
 8005544:	3fc55555 	.word	0x3fc55555
 8005548:	3ff00000 	.word	0x3ff00000

0800554c <fabs>:
 800554c:	0049      	lsls	r1, r1, #1
 800554e:	084b      	lsrs	r3, r1, #1
 8005550:	0019      	movs	r1, r3
 8005552:	4770      	bx	lr

08005554 <scalbn>:
 8005554:	004b      	lsls	r3, r1, #1
 8005556:	b570      	push	{r4, r5, r6, lr}
 8005558:	0d5b      	lsrs	r3, r3, #21
 800555a:	0014      	movs	r4, r2
 800555c:	000d      	movs	r5, r1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10f      	bne.n	8005582 <scalbn+0x2e>
 8005562:	004b      	lsls	r3, r1, #1
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	4303      	orrs	r3, r0
 8005568:	d012      	beq.n	8005590 <scalbn+0x3c>
 800556a:	4b23      	ldr	r3, [pc, #140]	@ (80055f8 <scalbn+0xa4>)
 800556c:	2200      	movs	r2, #0
 800556e:	f7fb fe3d 	bl	80011ec <__aeabi_dmul>
 8005572:	4b22      	ldr	r3, [pc, #136]	@ (80055fc <scalbn+0xa8>)
 8005574:	429c      	cmp	r4, r3
 8005576:	da0c      	bge.n	8005592 <scalbn+0x3e>
 8005578:	4a21      	ldr	r2, [pc, #132]	@ (8005600 <scalbn+0xac>)
 800557a:	4b22      	ldr	r3, [pc, #136]	@ (8005604 <scalbn+0xb0>)
 800557c:	f7fb fe36 	bl	80011ec <__aeabi_dmul>
 8005580:	e006      	b.n	8005590 <scalbn+0x3c>
 8005582:	4a21      	ldr	r2, [pc, #132]	@ (8005608 <scalbn+0xb4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d108      	bne.n	800559a <scalbn+0x46>
 8005588:	0002      	movs	r2, r0
 800558a:	000b      	movs	r3, r1
 800558c:	f7fa fe86 	bl	800029c <__aeabi_dadd>
 8005590:	bd70      	pop	{r4, r5, r6, pc}
 8005592:	000d      	movs	r5, r1
 8005594:	004b      	lsls	r3, r1, #1
 8005596:	0d5b      	lsrs	r3, r3, #21
 8005598:	3b36      	subs	r3, #54	@ 0x36
 800559a:	4a1c      	ldr	r2, [pc, #112]	@ (800560c <scalbn+0xb8>)
 800559c:	4294      	cmp	r4, r2
 800559e:	dd0a      	ble.n	80055b6 <scalbn+0x62>
 80055a0:	4c1b      	ldr	r4, [pc, #108]	@ (8005610 <scalbn+0xbc>)
 80055a2:	4d1c      	ldr	r5, [pc, #112]	@ (8005614 <scalbn+0xc0>)
 80055a4:	2900      	cmp	r1, #0
 80055a6:	da01      	bge.n	80055ac <scalbn+0x58>
 80055a8:	4c19      	ldr	r4, [pc, #100]	@ (8005610 <scalbn+0xbc>)
 80055aa:	4d1b      	ldr	r5, [pc, #108]	@ (8005618 <scalbn+0xc4>)
 80055ac:	4a18      	ldr	r2, [pc, #96]	@ (8005610 <scalbn+0xbc>)
 80055ae:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <scalbn+0xc0>)
 80055b0:	0020      	movs	r0, r4
 80055b2:	0029      	movs	r1, r5
 80055b4:	e7e2      	b.n	800557c <scalbn+0x28>
 80055b6:	18e2      	adds	r2, r4, r3
 80055b8:	4b18      	ldr	r3, [pc, #96]	@ (800561c <scalbn+0xc8>)
 80055ba:	429a      	cmp	r2, r3
 80055bc:	dcf0      	bgt.n	80055a0 <scalbn+0x4c>
 80055be:	2a00      	cmp	r2, #0
 80055c0:	dd05      	ble.n	80055ce <scalbn+0x7a>
 80055c2:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <scalbn+0xcc>)
 80055c4:	0512      	lsls	r2, r2, #20
 80055c6:	402b      	ands	r3, r5
 80055c8:	431a      	orrs	r2, r3
 80055ca:	0011      	movs	r1, r2
 80055cc:	e7e0      	b.n	8005590 <scalbn+0x3c>
 80055ce:	0013      	movs	r3, r2
 80055d0:	3335      	adds	r3, #53	@ 0x35
 80055d2:	da08      	bge.n	80055e6 <scalbn+0x92>
 80055d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005600 <scalbn+0xac>)
 80055d6:	4d0b      	ldr	r5, [pc, #44]	@ (8005604 <scalbn+0xb0>)
 80055d8:	2900      	cmp	r1, #0
 80055da:	da01      	bge.n	80055e0 <scalbn+0x8c>
 80055dc:	4c08      	ldr	r4, [pc, #32]	@ (8005600 <scalbn+0xac>)
 80055de:	4d11      	ldr	r5, [pc, #68]	@ (8005624 <scalbn+0xd0>)
 80055e0:	4a07      	ldr	r2, [pc, #28]	@ (8005600 <scalbn+0xac>)
 80055e2:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <scalbn+0xb0>)
 80055e4:	e7e4      	b.n	80055b0 <scalbn+0x5c>
 80055e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005620 <scalbn+0xcc>)
 80055e8:	3236      	adds	r2, #54	@ 0x36
 80055ea:	401d      	ands	r5, r3
 80055ec:	0512      	lsls	r2, r2, #20
 80055ee:	432a      	orrs	r2, r5
 80055f0:	0011      	movs	r1, r2
 80055f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <scalbn+0xd4>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	e7c1      	b.n	800557c <scalbn+0x28>
 80055f8:	43500000 	.word	0x43500000
 80055fc:	ffff3cb0 	.word	0xffff3cb0
 8005600:	c2f8f359 	.word	0xc2f8f359
 8005604:	01a56e1f 	.word	0x01a56e1f
 8005608:	000007ff 	.word	0x000007ff
 800560c:	0000c350 	.word	0x0000c350
 8005610:	8800759c 	.word	0x8800759c
 8005614:	7e37e43c 	.word	0x7e37e43c
 8005618:	fe37e43c 	.word	0xfe37e43c
 800561c:	000007fe 	.word	0x000007fe
 8005620:	800fffff 	.word	0x800fffff
 8005624:	81a56e1f 	.word	0x81a56e1f
 8005628:	3c900000 	.word	0x3c900000

0800562c <with_errno>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	000d      	movs	r5, r1
 8005630:	0016      	movs	r6, r2
 8005632:	0004      	movs	r4, r0
 8005634:	f7ff f9be 	bl	80049b4 <__errno>
 8005638:	0029      	movs	r1, r5
 800563a:	6006      	str	r6, [r0, #0]
 800563c:	0020      	movs	r0, r4
 800563e:	bd70      	pop	{r4, r5, r6, pc}

08005640 <xflow>:
 8005640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005642:	0014      	movs	r4, r2
 8005644:	001d      	movs	r5, r3
 8005646:	2800      	cmp	r0, #0
 8005648:	d002      	beq.n	8005650 <xflow+0x10>
 800564a:	2180      	movs	r1, #128	@ 0x80
 800564c:	0609      	lsls	r1, r1, #24
 800564e:	185b      	adds	r3, r3, r1
 8005650:	9200      	str	r2, [sp, #0]
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	9a00      	ldr	r2, [sp, #0]
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	0020      	movs	r0, r4
 800565a:	0029      	movs	r1, r5
 800565c:	f7fb fdc6 	bl	80011ec <__aeabi_dmul>
 8005660:	2222      	movs	r2, #34	@ 0x22
 8005662:	f7ff ffe3 	bl	800562c <with_errno>
 8005666:	b003      	add	sp, #12
 8005668:	bd30      	pop	{r4, r5, pc}

0800566a <__math_uflow>:
 800566a:	2380      	movs	r3, #128	@ 0x80
 800566c:	b510      	push	{r4, lr}
 800566e:	2200      	movs	r2, #0
 8005670:	055b      	lsls	r3, r3, #21
 8005672:	f7ff ffe5 	bl	8005640 <xflow>
 8005676:	bd10      	pop	{r4, pc}

08005678 <__math_oflow>:
 8005678:	23e0      	movs	r3, #224	@ 0xe0
 800567a:	b510      	push	{r4, lr}
 800567c:	2200      	movs	r2, #0
 800567e:	05db      	lsls	r3, r3, #23
 8005680:	f7ff ffde 	bl	8005640 <xflow>
 8005684:	bd10      	pop	{r4, pc}
	...

08005688 <__ieee754_sqrt>:
 8005688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568a:	000a      	movs	r2, r1
 800568c:	000d      	movs	r5, r1
 800568e:	496d      	ldr	r1, [pc, #436]	@ (8005844 <__ieee754_sqrt+0x1bc>)
 8005690:	0004      	movs	r4, r0
 8005692:	0003      	movs	r3, r0
 8005694:	0008      	movs	r0, r1
 8005696:	b087      	sub	sp, #28
 8005698:	4028      	ands	r0, r5
 800569a:	4288      	cmp	r0, r1
 800569c:	d111      	bne.n	80056c2 <__ieee754_sqrt+0x3a>
 800569e:	0022      	movs	r2, r4
 80056a0:	002b      	movs	r3, r5
 80056a2:	0020      	movs	r0, r4
 80056a4:	0029      	movs	r1, r5
 80056a6:	f7fb fda1 	bl	80011ec <__aeabi_dmul>
 80056aa:	0002      	movs	r2, r0
 80056ac:	000b      	movs	r3, r1
 80056ae:	0020      	movs	r0, r4
 80056b0:	0029      	movs	r1, r5
 80056b2:	f7fa fdf3 	bl	800029c <__aeabi_dadd>
 80056b6:	0004      	movs	r4, r0
 80056b8:	000d      	movs	r5, r1
 80056ba:	0020      	movs	r0, r4
 80056bc:	0029      	movs	r1, r5
 80056be:	b007      	add	sp, #28
 80056c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	dc11      	bgt.n	80056ea <__ieee754_sqrt+0x62>
 80056c6:	0069      	lsls	r1, r5, #1
 80056c8:	0849      	lsrs	r1, r1, #1
 80056ca:	4321      	orrs	r1, r4
 80056cc:	d0f5      	beq.n	80056ba <__ieee754_sqrt+0x32>
 80056ce:	2000      	movs	r0, #0
 80056d0:	4285      	cmp	r5, r0
 80056d2:	d010      	beq.n	80056f6 <__ieee754_sqrt+0x6e>
 80056d4:	0022      	movs	r2, r4
 80056d6:	002b      	movs	r3, r5
 80056d8:	0020      	movs	r0, r4
 80056da:	0029      	movs	r1, r5
 80056dc:	f7fc f84e 	bl	800177c <__aeabi_dsub>
 80056e0:	0002      	movs	r2, r0
 80056e2:	000b      	movs	r3, r1
 80056e4:	f7fb f93e 	bl	8000964 <__aeabi_ddiv>
 80056e8:	e7e5      	b.n	80056b6 <__ieee754_sqrt+0x2e>
 80056ea:	1528      	asrs	r0, r5, #20
 80056ec:	d115      	bne.n	800571a <__ieee754_sqrt+0x92>
 80056ee:	2480      	movs	r4, #128	@ 0x80
 80056f0:	2100      	movs	r1, #0
 80056f2:	0364      	lsls	r4, r4, #13
 80056f4:	e007      	b.n	8005706 <__ieee754_sqrt+0x7e>
 80056f6:	0ada      	lsrs	r2, r3, #11
 80056f8:	3815      	subs	r0, #21
 80056fa:	055b      	lsls	r3, r3, #21
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	d0fa      	beq.n	80056f6 <__ieee754_sqrt+0x6e>
 8005700:	e7f5      	b.n	80056ee <__ieee754_sqrt+0x66>
 8005702:	0052      	lsls	r2, r2, #1
 8005704:	3101      	adds	r1, #1
 8005706:	4222      	tst	r2, r4
 8005708:	d0fb      	beq.n	8005702 <__ieee754_sqrt+0x7a>
 800570a:	1e4c      	subs	r4, r1, #1
 800570c:	1b00      	subs	r0, r0, r4
 800570e:	2420      	movs	r4, #32
 8005710:	001d      	movs	r5, r3
 8005712:	1a64      	subs	r4, r4, r1
 8005714:	40e5      	lsrs	r5, r4
 8005716:	408b      	lsls	r3, r1
 8005718:	432a      	orrs	r2, r5
 800571a:	494b      	ldr	r1, [pc, #300]	@ (8005848 <__ieee754_sqrt+0x1c0>)
 800571c:	0312      	lsls	r2, r2, #12
 800571e:	1844      	adds	r4, r0, r1
 8005720:	2180      	movs	r1, #128	@ 0x80
 8005722:	0b12      	lsrs	r2, r2, #12
 8005724:	0349      	lsls	r1, r1, #13
 8005726:	4311      	orrs	r1, r2
 8005728:	07c0      	lsls	r0, r0, #31
 800572a:	d403      	bmi.n	8005734 <__ieee754_sqrt+0xac>
 800572c:	0fda      	lsrs	r2, r3, #31
 800572e:	0049      	lsls	r1, r1, #1
 8005730:	1851      	adds	r1, r2, r1
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	2500      	movs	r5, #0
 8005736:	1062      	asrs	r2, r4, #1
 8005738:	0049      	lsls	r1, r1, #1
 800573a:	2480      	movs	r4, #128	@ 0x80
 800573c:	9205      	str	r2, [sp, #20]
 800573e:	0fda      	lsrs	r2, r3, #31
 8005740:	1852      	adds	r2, r2, r1
 8005742:	2016      	movs	r0, #22
 8005744:	0029      	movs	r1, r5
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	03a4      	lsls	r4, r4, #14
 800574a:	190e      	adds	r6, r1, r4
 800574c:	4296      	cmp	r6, r2
 800574e:	dc02      	bgt.n	8005756 <__ieee754_sqrt+0xce>
 8005750:	1931      	adds	r1, r6, r4
 8005752:	1b92      	subs	r2, r2, r6
 8005754:	192d      	adds	r5, r5, r4
 8005756:	0fde      	lsrs	r6, r3, #31
 8005758:	0052      	lsls	r2, r2, #1
 800575a:	3801      	subs	r0, #1
 800575c:	1992      	adds	r2, r2, r6
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	0864      	lsrs	r4, r4, #1
 8005762:	2800      	cmp	r0, #0
 8005764:	d1f1      	bne.n	800574a <__ieee754_sqrt+0xc2>
 8005766:	2620      	movs	r6, #32
 8005768:	2780      	movs	r7, #128	@ 0x80
 800576a:	0004      	movs	r4, r0
 800576c:	9604      	str	r6, [sp, #16]
 800576e:	063f      	lsls	r7, r7, #24
 8005770:	19c6      	adds	r6, r0, r7
 8005772:	46b4      	mov	ip, r6
 8005774:	4291      	cmp	r1, r2
 8005776:	db02      	blt.n	800577e <__ieee754_sqrt+0xf6>
 8005778:	d114      	bne.n	80057a4 <__ieee754_sqrt+0x11c>
 800577a:	429e      	cmp	r6, r3
 800577c:	d812      	bhi.n	80057a4 <__ieee754_sqrt+0x11c>
 800577e:	4660      	mov	r0, ip
 8005780:	4666      	mov	r6, ip
 8005782:	19c0      	adds	r0, r0, r7
 8005784:	9100      	str	r1, [sp, #0]
 8005786:	2e00      	cmp	r6, #0
 8005788:	da03      	bge.n	8005792 <__ieee754_sqrt+0x10a>
 800578a:	43c6      	mvns	r6, r0
 800578c:	0ff6      	lsrs	r6, r6, #31
 800578e:	198e      	adds	r6, r1, r6
 8005790:	9600      	str	r6, [sp, #0]
 8005792:	1a52      	subs	r2, r2, r1
 8005794:	4563      	cmp	r3, ip
 8005796:	4189      	sbcs	r1, r1
 8005798:	4249      	negs	r1, r1
 800579a:	1a52      	subs	r2, r2, r1
 800579c:	4661      	mov	r1, ip
 800579e:	1a5b      	subs	r3, r3, r1
 80057a0:	9900      	ldr	r1, [sp, #0]
 80057a2:	19e4      	adds	r4, r4, r7
 80057a4:	0fde      	lsrs	r6, r3, #31
 80057a6:	0052      	lsls	r2, r2, #1
 80057a8:	1992      	adds	r2, r2, r6
 80057aa:	9e04      	ldr	r6, [sp, #16]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	3e01      	subs	r6, #1
 80057b0:	087f      	lsrs	r7, r7, #1
 80057b2:	9604      	str	r6, [sp, #16]
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	d1db      	bne.n	8005770 <__ieee754_sqrt+0xe8>
 80057b8:	431a      	orrs	r2, r3
 80057ba:	d01f      	beq.n	80057fc <__ieee754_sqrt+0x174>
 80057bc:	4e23      	ldr	r6, [pc, #140]	@ (800584c <__ieee754_sqrt+0x1c4>)
 80057be:	4f24      	ldr	r7, [pc, #144]	@ (8005850 <__ieee754_sqrt+0x1c8>)
 80057c0:	6830      	ldr	r0, [r6, #0]
 80057c2:	6871      	ldr	r1, [r6, #4]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	9200      	str	r2, [sp, #0]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	6873      	ldr	r3, [r6, #4]
 80057d0:	9202      	str	r2, [sp, #8]
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	9a00      	ldr	r2, [sp, #0]
 80057d6:	9b01      	ldr	r3, [sp, #4]
 80057d8:	f7fb ffd0 	bl	800177c <__aeabi_dsub>
 80057dc:	0002      	movs	r2, r0
 80057de:	000b      	movs	r3, r1
 80057e0:	9802      	ldr	r0, [sp, #8]
 80057e2:	9903      	ldr	r1, [sp, #12]
 80057e4:	f7fa fd3c 	bl	8000260 <__aeabi_dcmple>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d007      	beq.n	80057fc <__ieee754_sqrt+0x174>
 80057ec:	6830      	ldr	r0, [r6, #0]
 80057ee:	6871      	ldr	r1, [r6, #4]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1c67      	adds	r7, r4, #1
 80057f6:	d10f      	bne.n	8005818 <__ieee754_sqrt+0x190>
 80057f8:	9c04      	ldr	r4, [sp, #16]
 80057fa:	3501      	adds	r5, #1
 80057fc:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <__ieee754_sqrt+0x1cc>)
 80057fe:	106a      	asrs	r2, r5, #1
 8005800:	18d2      	adds	r2, r2, r3
 8005802:	0863      	lsrs	r3, r4, #1
 8005804:	07ed      	lsls	r5, r5, #31
 8005806:	d502      	bpl.n	800580e <__ieee754_sqrt+0x186>
 8005808:	2180      	movs	r1, #128	@ 0x80
 800580a:	0609      	lsls	r1, r1, #24
 800580c:	430b      	orrs	r3, r1
 800580e:	9905      	ldr	r1, [sp, #20]
 8005810:	001c      	movs	r4, r3
 8005812:	0509      	lsls	r1, r1, #20
 8005814:	188d      	adds	r5, r1, r2
 8005816:	e750      	b.n	80056ba <__ieee754_sqrt+0x32>
 8005818:	f7fa fd40 	bl	800029c <__aeabi_dadd>
 800581c:	6877      	ldr	r7, [r6, #4]
 800581e:	6836      	ldr	r6, [r6, #0]
 8005820:	0002      	movs	r2, r0
 8005822:	000b      	movs	r3, r1
 8005824:	0030      	movs	r0, r6
 8005826:	0039      	movs	r1, r7
 8005828:	f7fa fd10 	bl	800024c <__aeabi_dcmplt>
 800582c:	2800      	cmp	r0, #0
 800582e:	d004      	beq.n	800583a <__ieee754_sqrt+0x1b2>
 8005830:	3402      	adds	r4, #2
 8005832:	4263      	negs	r3, r4
 8005834:	4163      	adcs	r3, r4
 8005836:	18ed      	adds	r5, r5, r3
 8005838:	e7e0      	b.n	80057fc <__ieee754_sqrt+0x174>
 800583a:	2301      	movs	r3, #1
 800583c:	3401      	adds	r4, #1
 800583e:	439c      	bics	r4, r3
 8005840:	e7dc      	b.n	80057fc <__ieee754_sqrt+0x174>
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	7ff00000 	.word	0x7ff00000
 8005848:	fffffc01 	.word	0xfffffc01
 800584c:	20000090 	.word	0x20000090
 8005850:	20000088 	.word	0x20000088
 8005854:	3fe00000 	.word	0x3fe00000

08005858 <_init>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr

08005864 <_fini>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr
