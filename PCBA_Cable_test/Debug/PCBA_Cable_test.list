
PCBA_Cable_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080029bc  080029bc  000039bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  00004030  2**0
                  CONTENTS
  4 .ARM          00000000  080029f4  080029f4  00004030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f4  080029f4  00004030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f4  080029f4  000039f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029f8  080029f8  000039f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080029fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000030  08002a2c  00004030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002a2c  0000413c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2d5  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e1  00000000  00000000  0000e32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c7  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef19  00000000  00000000  00010a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c357  00000000  00000000  0001f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a252  00000000  00000000  0002bcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00085f41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e48  00000000  00000000  00085f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00087dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029a4 	.word	0x080029a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	080029a4 	.word	0x080029a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <power>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int power(int base, int exponent) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    int result = 1;
 800022a:	2301      	movs	r3, #1
 800022c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < exponent; i++) {
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	e006      	b.n	8000242 <power+0x22>
        result *= base;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	4353      	muls	r3, r2
 800023a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < exponent; i++) {
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	3301      	adds	r3, #1
 8000240:	60bb      	str	r3, [r7, #8]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	dbf4      	blt.n	8000234 <power+0x14>
    }
    return result;
 800024a:	68fb      	ldr	r3, [r7, #12]
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b004      	add	sp, #16
 8000252:	bd80      	pop	{r7, pc}

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025a:	f000 fb45 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025e:	f000 f8c5 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000262:	f000 f995 	bl	8000590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000266:	f000 f963 	bl	8000530 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800026a:	f000 f921 	bl	80004b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &init, 7, 100);
 800026e:	4a55      	ldr	r2, [pc, #340]	@ (80003c4 <main+0x170>)
 8000270:	4855      	ldr	r0, [pc, #340]	@ (80003c8 <main+0x174>)
 8000272:	2364      	movs	r3, #100	@ 0x64
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2307      	movs	r3, #7
 8000278:	217c      	movs	r1, #124	@ 0x7c
 800027a:	f000 feb1 	bl	8000fe0 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &pin, 6, 100);
 800027e:	4a53      	ldr	r2, [pc, #332]	@ (80003cc <main+0x178>)
 8000280:	4851      	ldr	r0, [pc, #324]	@ (80003c8 <main+0x174>)
 8000282:	2364      	movs	r3, #100	@ 0x64
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2306      	movs	r3, #6
 8000288:	217c      	movs	r1, #124	@ 0x7c
 800028a:	f000 fea9 	bl	8000fe0 <HAL_I2C_Master_Transmit>
	    //HAL_Delay(200);




    for (int count = 0; count <= 15; count++) {
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	e092      	b.n	80003ba <main+0x166>
//adresowanie multiplekserów od 0 to 15

        int temp = count;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	60bb      	str	r3, [r7, #8]

		} //else
*/
		{
				//for (int i = size - 1; i >= 0; i--)
				for (int i = 0; i < size; i++)
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	e03e      	b.n	800031c <main+0xc8>
				{

					n = power (2, i);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	0019      	movs	r1, r3
 80002a2:	2002      	movs	r0, #2
 80002a4:	f7ff ffbc 	bl	8000220 <power>
 80002a8:	0003      	movs	r3, r0
 80002aa:	603b      	str	r3, [r7, #0]
					binary_array[i] = temp % 2;
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	4a48      	ldr	r2, [pc, #288]	@ (80003d0 <main+0x17c>)
 80002b0:	4013      	ands	r3, r2
 80002b2:	d504      	bpl.n	80002be <main+0x6a>
 80002b4:	3b01      	subs	r3, #1
 80002b6:	2202      	movs	r2, #2
 80002b8:	4252      	negs	r2, r2
 80002ba:	4313      	orrs	r3, r2
 80002bc:	3301      	adds	r3, #1
 80002be:	0019      	movs	r1, r3
 80002c0:	4b44      	ldr	r3, [pc, #272]	@ (80003d4 <main+0x180>)
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	0092      	lsls	r2, r2, #2
 80002c6:	50d1      	str	r1, [r2, r3]
					if (binary_array[i] == 1)
 80002c8:	4b42      	ldr	r3, [pc, #264]	@ (80003d4 <main+0x180>)
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	58d3      	ldr	r3, [r2, r3]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d10a      	bne.n	80002ea <main+0x96>
						{
							HAL_GPIO_WritePin(GPIOC, n, GPIO_PIN_SET);
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	483f      	ldr	r0, [pc, #252]	@ (80003d8 <main+0x184>)
 80002da:	2201      	movs	r2, #1
 80002dc:	0019      	movs	r1, r3
 80002de:	f000 fdcc 	bl	8000e7a <HAL_GPIO_WritePin>
							HAL_Delay(20);
 80002e2:	2014      	movs	r0, #20
 80002e4:	f000 fb64 	bl	80009b0 <HAL_Delay>
 80002e8:	e00f      	b.n	800030a <main+0xb6>
						}
					else if(binary_array[i] == 0)
 80002ea:	4b3a      	ldr	r3, [pc, #232]	@ (80003d4 <main+0x180>)
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	58d3      	ldr	r3, [r2, r3]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d109      	bne.n	800030a <main+0xb6>
						{
							HAL_GPIO_WritePin(GPIOC, n, GPIO_PIN_RESET);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	4837      	ldr	r0, [pc, #220]	@ (80003d8 <main+0x184>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	0019      	movs	r1, r3
 8000300:	f000 fdbb 	bl	8000e7a <HAL_GPIO_WritePin>
							HAL_Delay(20);
 8000304:	2014      	movs	r0, #20
 8000306:	f000 fb53 	bl	80009b0 <HAL_Delay>
						}

					temp /= 2;
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	2b00      	cmp	r3, #0
 800030e:	da00      	bge.n	8000312 <main+0xbe>
 8000310:	3301      	adds	r3, #1
 8000312:	105b      	asrs	r3, r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
				for (int i = 0; i < size; i++)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	2204      	movs	r2, #4
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4293      	cmp	r3, r2
 8000322:	dbbc      	blt.n	800029e <main+0x4a>
//					HAL_Delay(50);

				}

				if (HAL_GPIO_ReadPin(GPIOA, Input1_Pin)==GPIO_PIN_SET)
 8000324:	2390      	movs	r3, #144	@ 0x90
 8000326:	05db      	lsls	r3, r3, #23
 8000328:	2101      	movs	r1, #1
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fd88 	bl	8000e40 <HAL_GPIO_ReadPin>
 8000330:	0003      	movs	r3, r0
 8000332:	2b01      	cmp	r3, #1
 8000334:	d125      	bne.n	8000382 <main+0x12e>

					{
						if (count <=9)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	2b09      	cmp	r3, #9
 800033a:	dc09      	bgt.n	8000350 <main+0xfc>
						{
							S_1[1] = 48 + count;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	3330      	adds	r3, #48	@ 0x30
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4b25      	ldr	r3, [pc, #148]	@ (80003dc <main+0x188>)
 8000346:	705a      	strb	r2, [r3, #1]
							S_1[2] = 32;
 8000348:	4b24      	ldr	r3, [pc, #144]	@ (80003dc <main+0x188>)
 800034a:	2220      	movs	r2, #32
 800034c:	709a      	strb	r2, [r3, #2]
 800034e:	e008      	b.n	8000362 <main+0x10e>
						}
							else
						{
							S_1[1] = 49;
 8000350:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <main+0x188>)
 8000352:	2231      	movs	r2, #49	@ 0x31
 8000354:	705a      	strb	r2, [r3, #1]
							S_1[2] = 48 + count-10;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	3326      	adds	r3, #38	@ 0x26
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <main+0x188>)
 8000360:	709a      	strb	r2, [r3, #2]
						}
						HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_0, 2, 100); // zmień linię na 2
 8000362:	4a1f      	ldr	r2, [pc, #124]	@ (80003e0 <main+0x18c>)
 8000364:	4818      	ldr	r0, [pc, #96]	@ (80003c8 <main+0x174>)
 8000366:	2364      	movs	r3, #100	@ 0x64
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2302      	movs	r3, #2
 800036c:	217c      	movs	r1, #124	@ 0x7c
 800036e:	f000 fe37 	bl	8000fe0 <HAL_I2C_Master_Transmit>
						HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &S_1, 3, 100);  // pin 1
 8000372:	4a1a      	ldr	r2, [pc, #104]	@ (80003dc <main+0x188>)
 8000374:	4814      	ldr	r0, [pc, #80]	@ (80003c8 <main+0x174>)
 8000376:	2364      	movs	r3, #100	@ 0x64
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2303      	movs	r3, #3
 800037c:	217c      	movs	r1, #124	@ 0x7c
 800037e:	f000 fe2f 	bl	8000fe0 <HAL_I2C_Master_Transmit>
//						HAL_Delay(150);
					}

				if (HAL_GPIO_ReadPin(GPIOA, Input2_Pin)==GPIO_PIN_SET)
 8000382:	2390      	movs	r3, #144	@ 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	2102      	movs	r1, #2
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fd59 	bl	8000e40 <HAL_GPIO_ReadPin>
 800038e:	0003      	movs	r3, r0
 8000390:	2b01      	cmp	r3, #1
 8000392:	d10f      	bne.n	80003b4 <main+0x160>
					{
					  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &linetwo_3, 2, 100); // zmień linię na 2
 8000394:	4a13      	ldr	r2, [pc, #76]	@ (80003e4 <main+0x190>)
 8000396:	480c      	ldr	r0, [pc, #48]	@ (80003c8 <main+0x174>)
 8000398:	2364      	movs	r3, #100	@ 0x64
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2302      	movs	r3, #2
 800039e:	217c      	movs	r1, #124	@ 0x7c
 80003a0:	f000 fe1e 	bl	8000fe0 <HAL_I2C_Master_Transmit>
					  HAL_I2C_Master_Transmit(&hi2c1, 0x7C, &S_17, 3, 100);  // pin 1
 80003a4:	4a10      	ldr	r2, [pc, #64]	@ (80003e8 <main+0x194>)
 80003a6:	4808      	ldr	r0, [pc, #32]	@ (80003c8 <main+0x174>)
 80003a8:	2364      	movs	r3, #100	@ 0x64
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2303      	movs	r3, #3
 80003ae:	217c      	movs	r1, #124	@ 0x7c
 80003b0:	f000 fe16 	bl	8000fe0 <HAL_I2C_Master_Transmit>
    for (int count = 0; count <= 15; count++) {
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	3301      	adds	r3, #1
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	2b0f      	cmp	r3, #15
 80003be:	dc00      	bgt.n	80003c2 <main+0x16e>
 80003c0:	e768      	b.n	8000294 <main+0x40>
 80003c2:	e764      	b.n	800028e <main+0x3a>
 80003c4:	20000000 	.word	0x20000000
 80003c8:	2000004c 	.word	0x2000004c
 80003cc:	2000000c 	.word	0x2000000c
 80003d0:	80000001 	.word	0x80000001
 80003d4:	20000128 	.word	0x20000128
 80003d8:	48000800 	.word	0x48000800
 80003dc:	2000001c 	.word	0x2000001c
 80003e0:	20000014 	.word	0x20000014
 80003e4:	20000018 	.word	0x20000018
 80003e8:	20000020 	.word	0x20000020

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b095      	sub	sp, #84	@ 0x54
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	2420      	movs	r4, #32
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2330      	movs	r3, #48	@ 0x30
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f002 faa5 	bl	800294c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000402:	2310      	movs	r3, #16
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	0018      	movs	r0, r3
 8000408:	2310      	movs	r3, #16
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f002 fa9d 	bl	800294c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000412:	003b      	movs	r3, r7
 8000414:	0018      	movs	r0, r3
 8000416:	2310      	movs	r3, #16
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f002 fa96 	bl	800294c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000420:	0021      	movs	r1, r4
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2202      	movs	r2, #2
 8000426:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2201      	movs	r2, #1
 800042c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2210      	movs	r2, #16
 8000432:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2202      	movs	r2, #2
 8000438:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	22a0      	movs	r2, #160	@ 0xa0
 8000444:	0392      	lsls	r2, r2, #14
 8000446:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	187b      	adds	r3, r7, r1
 8000450:	0018      	movs	r0, r3
 8000452:	f001 f991 	bl	8001778 <HAL_RCC_OscConfig>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800045a:	f000 f939 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	2110      	movs	r1, #16
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2207      	movs	r2, #7
 8000464:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2202      	movs	r2, #2
 800046a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2101      	movs	r1, #1
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fc95 	bl	8001dac <HAL_RCC_ClockConfig>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000486:	f000 f923 	bl	80006d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800048a:	003b      	movs	r3, r7
 800048c:	2220      	movs	r2, #32
 800048e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000490:	003b      	movs	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000496:	003b      	movs	r3, r7
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fdcb 	bl	8002034 <HAL_RCCEx_PeriphCLKConfig>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004a2:	f000 f915 	bl	80006d0 <Error_Handler>
  }
}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b015      	add	sp, #84	@ 0x54
 80004ac:	bd90      	pop	{r4, r7, pc}
	...

080004b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000528 <MX_I2C1_Init+0x78>)
 80004b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x200009FE;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004bc:	4a1b      	ldr	r2, [pc, #108]	@ (800052c <MX_I2C1_Init+0x7c>)
 80004be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004c0:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c6:	4b17      	ldr	r3, [pc, #92]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004d2:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004d8:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fce1 	bl	8000eb4 <HAL_I2C_Init>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004f6:	f000 f8eb 	bl	80006d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <MX_I2C1_Init+0x74>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f8a2 	bl	8001648 <HAL_I2CEx_ConfigAnalogFilter>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000508:	f000 f8e2 	bl	80006d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <MX_I2C1_Init+0x74>)
 800050e:	2100      	movs	r1, #0
 8000510:	0018      	movs	r0, r3
 8000512:	f001 f8e5 	bl	80016e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800051a:	f000 f8d9 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000004c 	.word	0x2000004c
 8000528:	40005400 	.word	0x40005400
 800052c:	200009fe 	.word	0x200009fe

08000530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000534:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <MX_USART2_UART_Init+0x5c>)
 8000538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800053a:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 800053c:	2296      	movs	r2, #150	@ 0x96
 800053e:	0212      	lsls	r2, r2, #8
 8000540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000572:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <MX_USART2_UART_Init+0x58>)
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fe2b 	bl	80021d0 <HAL_UART_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057e:	f000 f8a7 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000a0 	.word	0x200000a0
 800058c:	40004400 	.word	0x40004400

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b08b      	sub	sp, #44	@ 0x2c
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	2414      	movs	r4, #20
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 f9d3 	bl	800294c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b48      	ldr	r3, [pc, #288]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b47      	ldr	r3, [pc, #284]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	0309      	lsls	r1, r1, #12
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b44      	ldr	r3, [pc, #272]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	031b      	lsls	r3, r3, #12
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b41      	ldr	r3, [pc, #260]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b40      	ldr	r3, [pc, #256]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	03c9      	lsls	r1, r1, #15
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b3d      	ldr	r3, [pc, #244]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	03db      	lsls	r3, r3, #15
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b3a      	ldr	r3, [pc, #232]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b39      	ldr	r3, [pc, #228]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	0289      	lsls	r1, r1, #10
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b36      	ldr	r3, [pc, #216]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	029b      	lsls	r3, r3, #10
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	@ (80006c8 <MX_GPIO_Init+0x138>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_GPIO_Init+0x138>)
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	02c9      	lsls	r1, r1, #11
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <MX_GPIO_Init+0x138>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	@ 0x80
 800060e:	02db      	lsls	r3, r3, #11
 8000610:	4013      	ands	r3, r2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin, GPIO_PIN_RESET);
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <MX_GPIO_Init+0x13c>)
 8000618:	2200      	movs	r2, #0
 800061a:	210f      	movs	r1, #15
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fc2c 	bl	8000e7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000622:	2390      	movs	r3, #144	@ 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fc25 	bl	8000e7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	0192      	lsls	r2, r2, #6
 8000636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2284      	movs	r2, #132	@ 0x84
 800063c:	0392      	lsls	r2, r2, #14
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	193b      	adds	r3, r7, r4
 8000648:	4a20      	ldr	r2, [pc, #128]	@ (80006cc <MX_GPIO_Init+0x13c>)
 800064a:	0019      	movs	r1, r3
 800064c:	0010      	movs	r0, r2
 800064e:	f000 fa87 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR0_Pin ADDR1_Pin ADDR2_Pin ADDR3_Pin */
  GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|ADDR2_Pin|ADDR3_Pin;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	220f      	movs	r2, #15
 8000656:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2201      	movs	r2, #1
 800065c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	193b      	adds	r3, r7, r4
 800066c:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <MX_GPIO_Init+0x13c>)
 800066e:	0019      	movs	r1, r3
 8000670:	0010      	movs	r0, r2
 8000672:	f000 fa75 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input1_Pin Input2_Pin */
  GPIO_InitStruct.Pin = Input1_Pin|Input2_Pin;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2203      	movs	r2, #3
 800067a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2202      	movs	r2, #2
 8000686:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	193a      	adds	r2, r7, r4
 800068a:	2390      	movs	r3, #144	@ 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fa65 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2220      	movs	r2, #32
 800069c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2201      	movs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	187a      	adds	r2, r7, r1
 80006b2:	2390      	movs	r3, #144	@ 0x90
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fa51 	bl	8000b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b00b      	add	sp, #44	@ 0x2c
 80006c4:	bd90      	pop	{r4, r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	e7fd      	b.n	80006d8 <Error_Handler+0x8>

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <HAL_MspInit+0x44>)
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <HAL_MspInit+0x44>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	430a      	orrs	r2, r1
 80006ec:	619a      	str	r2, [r3, #24]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <HAL_MspInit+0x44>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <HAL_MspInit+0x44>)
 80006fc:	69da      	ldr	r2, [r3, #28]
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <HAL_MspInit+0x44>)
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	0549      	lsls	r1, r1, #21
 8000704:	430a      	orrs	r2, r1
 8000706:	61da      	str	r2, [r3, #28]
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_MspInit+0x44>)
 800070a:	69da      	ldr	r2, [r3, #28]
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	055b      	lsls	r3, r3, #21
 8000710:	4013      	ands	r3, r2
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b08b      	sub	sp, #44	@ 0x2c
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	2414      	movs	r4, #20
 800072e:	193b      	adds	r3, r7, r4
 8000730:	0018      	movs	r0, r3
 8000732:	2314      	movs	r3, #20
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f002 f908 	bl	800294c <memset>
  if(hi2c->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <HAL_I2C_MspInit+0x90>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d131      	bne.n	80007aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	02c9      	lsls	r1, r1, #11
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	@ 0x80
 800075a:	02db      	lsls	r3, r3, #11
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22c0      	movs	r2, #192	@ 0xc0
 8000768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2212      	movs	r2, #18
 800076e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	187b      	adds	r3, r7, r1
 8000784:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <HAL_I2C_MspInit+0x98>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f000 f9e9 	bl	8000b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000790:	69da      	ldr	r2, [r3, #28]
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	0389      	lsls	r1, r1, #14
 8000798:	430a      	orrs	r2, r1
 800079a:	61da      	str	r2, [r3, #28]
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 800079e:	69da      	ldr	r2, [r3, #28]
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	039b      	lsls	r3, r3, #14
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b00b      	add	sp, #44	@ 0x2c
 80007b0:	bd90      	pop	{r4, r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	@ 0x2c
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	2414      	movs	r4, #20
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 f8ba 	bl	800294c <memset>
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <HAL_UART_MspInit+0x90>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d132      	bne.n	8000848 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <HAL_UART_MspInit+0x94>)
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_UART_MspInit+0x94>)
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	0289      	lsls	r1, r1, #10
 80007ec:	430a      	orrs	r2, r1
 80007ee:	61da      	str	r2, [r3, #28]
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_UART_MspInit+0x94>)
 80007f2:	69da      	ldr	r2, [r3, #28]
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	029b      	lsls	r3, r3, #10
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_UART_MspInit+0x94>)
 8000800:	695a      	ldr	r2, [r3, #20]
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <HAL_UART_MspInit+0x94>)
 8000804:	2180      	movs	r1, #128	@ 0x80
 8000806:	0289      	lsls	r1, r1, #10
 8000808:	430a      	orrs	r2, r1
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_UART_MspInit+0x94>)
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	029b      	lsls	r3, r3, #10
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081a:	0021      	movs	r1, r4
 800081c:	187b      	adds	r3, r7, r1
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2202      	movs	r2, #2
 8000826:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2201      	movs	r2, #1
 8000838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	187a      	adds	r2, r7, r1
 800083c:	2390      	movs	r3, #144	@ 0x90
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f98c 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b00b      	add	sp, #44	@ 0x2c
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	e7fd      	b.n	800085c <NMI_Handler+0x4>

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	e7fd      	b.n	8000864 <HardFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f87a 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000894:	480d      	ldr	r0, [pc, #52]	@ (80008cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000896:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000898:	f7ff fff7 	bl	800088a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	@ (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	@ (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008c2:	f002 f84b 	bl	800295c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c6:	f7ff fcc5 	bl	8000254 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   r0, =_estack
 80008cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80008d8:	080029fc 	.word	0x080029fc
  ldr r2, =_sbss
 80008dc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80008e0:	2000013c 	.word	0x2000013c

080008e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_IRQHandler>
	...

080008e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <HAL_Init+0x24>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_Init+0x24>)
 80008f2:	2110      	movs	r1, #16
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 f809 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fe:	f7ff feed 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <HAL_InitTick+0x5c>)
 800091a:	681c      	ldr	r4, [r3, #0]
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	0019      	movs	r1, r3
 8000922:	23fa      	movs	r3, #250	@ 0xfa
 8000924:	0098      	lsls	r0, r3, #2
 8000926:	f7ff fbef 	bl	8000108 <__udivsi3>
 800092a:	0003      	movs	r3, r0
 800092c:	0019      	movs	r1, r3
 800092e:	0020      	movs	r0, r4
 8000930:	f7ff fbea 	bl	8000108 <__udivsi3>
 8000934:	0003      	movs	r3, r0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 f905 	bl	8000b46 <HAL_SYSTICK_Config>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e00f      	b.n	8000964 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d80b      	bhi.n	8000962 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	2301      	movs	r3, #1
 800094e:	425b      	negs	r3, r3
 8000950:	2200      	movs	r2, #0
 8000952:	0018      	movs	r0, r3
 8000954:	f000 f8e2 	bl	8000b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_InitTick+0x64>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b003      	add	sp, #12
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	20000024 	.word	0x20000024
 8000970:	2000002c 	.word	0x2000002c
 8000974:	20000028 	.word	0x20000028

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001a      	movs	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	18d2      	adds	r2, r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <HAL_IncTick+0x20>)
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	2000002c 	.word	0x2000002c
 8000998:	20000138 	.word	0x20000138

0800099c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	@ (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	20000138 	.word	0x20000138

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff0 	bl	800099c <HAL_GetTick>
 80009bc:	0003      	movs	r3, r0
 80009be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_Delay+0x44>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	189b      	adds	r3, r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	f7ff ffe0 	bl	800099c <HAL_GetTick>
 80009dc:	0002      	movs	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b004      	add	sp, #16
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	2000002c 	.word	0x2000002c

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	0002      	movs	r2, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a0c:	d828      	bhi.n	8000a60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000acc <__NVIC_SetPriority+0xd4>)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	33c0      	adds	r3, #192	@ 0xc0
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	589b      	ldr	r3, [r3, r2]
 8000a1e:	1dfa      	adds	r2, r7, #7
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	0011      	movs	r1, r2
 8000a24:	2203      	movs	r2, #3
 8000a26:	400a      	ands	r2, r1
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	21ff      	movs	r1, #255	@ 0xff
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	000a      	movs	r2, r1
 8000a30:	43d2      	mvns	r2, r2
 8000a32:	401a      	ands	r2, r3
 8000a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	22ff      	movs	r2, #255	@ 0xff
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	0018      	movs	r0, r3
 8000a44:	2303      	movs	r3, #3
 8000a46:	4003      	ands	r3, r0
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4c:	481f      	ldr	r0, [pc, #124]	@ (8000acc <__NVIC_SetPriority+0xd4>)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	430a      	orrs	r2, r1
 8000a58:	33c0      	adds	r3, #192	@ 0xc0
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a5e:	e031      	b.n	8000ac4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <__NVIC_SetPriority+0xd8>)
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0019      	movs	r1, r3
 8000a68:	230f      	movs	r3, #15
 8000a6a:	400b      	ands	r3, r1
 8000a6c:	3b08      	subs	r3, #8
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	3306      	adds	r3, #6
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	3304      	adds	r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	1dfa      	adds	r2, r7, #7
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	0011      	movs	r1, r2
 8000a80:	2203      	movs	r2, #3
 8000a82:	400a      	ands	r2, r1
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	21ff      	movs	r1, #255	@ 0xff
 8000a88:	4091      	lsls	r1, r2
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	401a      	ands	r2, r3
 8000a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	019b      	lsls	r3, r3, #6
 8000a96:	22ff      	movs	r2, #255	@ 0xff
 8000a98:	401a      	ands	r2, r3
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	4003      	ands	r3, r0
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <__NVIC_SetPriority+0xd8>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	001c      	movs	r4, r3
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	4023      	ands	r3, r4
 8000ab4:	3b08      	subs	r3, #8
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	3306      	adds	r3, #6
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	18c3      	adds	r3, r0, r3
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	2380      	movs	r3, #128	@ 0x80
 8000ae2:	045b      	lsls	r3, r3, #17
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d301      	bcc.n	8000aec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e010      	b.n	8000b0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <SysTick_Config+0x44>)
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	3a01      	subs	r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af4:	2301      	movs	r3, #1
 8000af6:	425b      	negs	r3, r3
 8000af8:	2103      	movs	r1, #3
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff ff7c 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <SysTick_Config+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <SysTick_Config+0x44>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	210f      	movs	r1, #15
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	1c02      	adds	r2, r0, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ffbf 	bl	8000ad4 <SysTick_Config>
 8000b56:	0003      	movs	r3, r0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e14f      	b.n	8000e10 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <HAL_GPIO_Init+0x28>
 8000b86:	e140      	b.n	8000e0a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	409a      	lsls	r2, r3
 8000bae:	0013      	movs	r3, r2
 8000bb0:	43da      	mvns	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	2201      	movs	r2, #1
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2203      	movs	r2, #3
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d017      	beq.n	8000c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2203      	movs	r2, #3
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d123      	bne.n	8000c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	08da      	lsrs	r2, r3, #3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3208      	adds	r2, #8
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	58d3      	ldr	r3, [r2, r3]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	43da      	mvns	r2, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	691a      	ldr	r2, [r3, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2107      	movs	r1, #7
 8000c76:	400b      	ands	r3, r1
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	0092      	lsls	r2, r2, #2
 8000c8e:	6939      	ldr	r1, [r7, #16]
 8000c90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	0013      	movs	r3, r2
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	23c0      	movs	r3, #192	@ 0xc0
 8000ccc:	029b      	lsls	r3, r3, #10
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d100      	bne.n	8000cd4 <HAL_GPIO_Init+0x174>
 8000cd2:	e09a      	b.n	8000e0a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	4b54      	ldr	r3, [pc, #336]	@ (8000e28 <HAL_GPIO_Init+0x2c8>)
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	4b53      	ldr	r3, [pc, #332]	@ (8000e28 <HAL_GPIO_Init+0x2c8>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	619a      	str	r2, [r3, #24]
 8000ce0:	4b51      	ldr	r3, [pc, #324]	@ (8000e28 <HAL_GPIO_Init+0x2c8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cec:	4a4f      	ldr	r2, [pc, #316]	@ (8000e2c <HAL_GPIO_Init+0x2cc>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	589b      	ldr	r3, [r3, r2]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	2390      	movs	r3, #144	@ 0x90
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d013      	beq.n	8000d42 <HAL_GPIO_Init+0x1e2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a44      	ldr	r2, [pc, #272]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00d      	beq.n	8000d3e <HAL_GPIO_Init+0x1de>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a43      	ldr	r2, [pc, #268]	@ (8000e34 <HAL_GPIO_Init+0x2d4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d007      	beq.n	8000d3a <HAL_GPIO_Init+0x1da>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a42      	ldr	r2, [pc, #264]	@ (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_GPIO_Init+0x1d6>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d42:	2300      	movs	r3, #0
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	2103      	movs	r1, #3
 8000d48:	400a      	ands	r2, r1
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d54:	4935      	ldr	r1, [pc, #212]	@ (8000e2c <HAL_GPIO_Init+0x2cc>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d62:	4b36      	ldr	r3, [pc, #216]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	2380      	movs	r3, #128	@ 0x80
 8000d78:	035b      	lsls	r3, r3, #13
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d86:	4b2d      	ldr	r3, [pc, #180]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	039b      	lsls	r3, r3, #14
 8000da4:	4013      	ands	r3, r2
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	2380      	movs	r3, #128	@ 0x80
 8000dcc:	029b      	lsls	r3, r3, #10
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	40da      	lsrs	r2, r3
 8000e18:	1e13      	subs	r3, r2, #0
 8000e1a:	d000      	beq.n	8000e1e <HAL_GPIO_Init+0x2be>
 8000e1c:	e6a8      	b.n	8000b70 <HAL_GPIO_Init+0x10>
  } 
}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b006      	add	sp, #24
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	48000800 	.word	0x48000800
 8000e38:	48000c00 	.word	0x48000c00
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	000a      	movs	r2, r1
 8000e4a:	1cbb      	adds	r3, r7, #2
 8000e4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	1cba      	adds	r2, r7, #2
 8000e54:	8812      	ldrh	r2, [r2, #0]
 8000e56:	4013      	ands	r3, r2
 8000e58:	d004      	beq.n	8000e64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e003      	b.n	8000e6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	781b      	ldrb	r3, [r3, #0]
  }
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	0008      	movs	r0, r1
 8000e84:	0011      	movs	r1, r2
 8000e86:	1cbb      	adds	r3, r7, #2
 8000e88:	1c02      	adds	r2, r0, #0
 8000e8a:	801a      	strh	r2, [r3, #0]
 8000e8c:	1c7b      	adds	r3, r7, #1
 8000e8e:	1c0a      	adds	r2, r1, #0
 8000e90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e92:	1c7b      	adds	r3, r7, #1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e9a:	1cbb      	adds	r3, r7, #2
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ea2:	e003      	b.n	8000eac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ea4:	1cbb      	adds	r3, r7, #2
 8000ea6:	881a      	ldrh	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e082      	b.n	8000fcc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2241      	movs	r2, #65	@ 0x41
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d107      	bne.n	8000ee2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2240      	movs	r2, #64	@ 0x40
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff fc21 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2241      	movs	r2, #65	@ 0x41
 8000ee6:	2124      	movs	r1, #36	@ 0x24
 8000ee8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	438a      	bics	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4934      	ldr	r1, [pc, #208]	@ (8000fd4 <HAL_I2C_Init+0x120>)
 8000f04:	400a      	ands	r2, r1
 8000f06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4931      	ldr	r1, [pc, #196]	@ (8000fd8 <HAL_I2C_Init+0x124>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d108      	bne.n	8000f32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2180      	movs	r1, #128	@ 0x80
 8000f2a:	0209      	lsls	r1, r1, #8
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	e007      	b.n	8000f42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2184      	movs	r1, #132	@ 0x84
 8000f3c:	0209      	lsls	r1, r1, #8
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d104      	bne.n	8000f54 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2280      	movs	r2, #128	@ 0x80
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	491f      	ldr	r1, [pc, #124]	@ (8000fdc <HAL_I2C_Init+0x128>)
 8000f60:	430a      	orrs	r2, r1
 8000f62:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	491a      	ldr	r1, [pc, #104]	@ (8000fd8 <HAL_I2C_Init+0x124>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69d9      	ldr	r1, [r3, #28]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2241      	movs	r2, #65	@ 0x41
 8000fb8:	2120      	movs	r1, #32
 8000fba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2242      	movs	r2, #66	@ 0x42
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f0ffffff 	.word	0xf0ffffff
 8000fd8:	ffff7fff 	.word	0xffff7fff
 8000fdc:	02008000 	.word	0x02008000

08000fe0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	0008      	movs	r0, r1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	0019      	movs	r1, r3
 8000fee:	230a      	movs	r3, #10
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	1c02      	adds	r2, r0, #0
 8000ff4:	801a      	strh	r2, [r3, #0]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	1c0a      	adds	r2, r1, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2241      	movs	r2, #65	@ 0x41
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b20      	cmp	r3, #32
 8001008:	d000      	beq.n	800100c <HAL_I2C_Master_Transmit+0x2c>
 800100a:	e0e7      	b.n	80011dc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2240      	movs	r2, #64	@ 0x40
 8001010:	5c9b      	ldrb	r3, [r3, r2]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_I2C_Master_Transmit+0x3a>
 8001016:	2302      	movs	r3, #2
 8001018:	e0e1      	b.n	80011de <HAL_I2C_Master_Transmit+0x1fe>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	2101      	movs	r1, #1
 8001020:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001022:	f7ff fcbb 	bl	800099c <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	0219      	lsls	r1, r3, #8
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2319      	movs	r3, #25
 8001036:	2201      	movs	r2, #1
 8001038:	f000 f8fc 	bl	8001234 <I2C_WaitOnFlagUntilTimeout>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0cc      	b.n	80011de <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2241      	movs	r2, #65	@ 0x41
 8001048:	2121      	movs	r1, #33	@ 0x21
 800104a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2242      	movs	r2, #66	@ 0x42
 8001050:	2110      	movs	r1, #16
 8001052:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2208      	movs	r2, #8
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	8812      	ldrh	r2, [r2, #0]
 8001068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001074:	b29b      	uxth	r3, r3
 8001076:	2bff      	cmp	r3, #255	@ 0xff
 8001078:	d911      	bls.n	800109e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	22ff      	movs	r2, #255	@ 0xff
 800107e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001084:	b2da      	uxtb	r2, r3
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	045c      	lsls	r4, r3, #17
 800108a:	230a      	movs	r3, #10
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	8819      	ldrh	r1, [r3, #0]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	4b55      	ldr	r3, [pc, #340]	@ (80011e8 <HAL_I2C_Master_Transmit+0x208>)
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	0023      	movs	r3, r4
 8001098:	f000 fa9c 	bl	80015d4 <I2C_TransferConfig>
 800109c:	e075      	b.n	800118a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	2380      	movs	r3, #128	@ 0x80
 80010b0:	049c      	lsls	r4, r3, #18
 80010b2:	230a      	movs	r3, #10
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	8819      	ldrh	r1, [r3, #0]
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	4b4b      	ldr	r3, [pc, #300]	@ (80011e8 <HAL_I2C_Master_Transmit+0x208>)
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	0023      	movs	r3, r4
 80010c0:	f000 fa88 	bl	80015d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010c4:	e061      	b.n	800118a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 f8ff 	bl	80012d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e081      	b.n	80011de <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001102:	3b01      	subs	r3, #1
 8001104:	b29a      	uxth	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800110e:	b29b      	uxth	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d03a      	beq.n	800118a <HAL_I2C_Master_Transmit+0x1aa>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001118:	2b00      	cmp	r3, #0
 800111a:	d136      	bne.n	800118a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800111c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	0013      	movs	r3, r2
 8001126:	2200      	movs	r2, #0
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	f000 f883 	bl	8001234 <I2C_WaitOnFlagUntilTimeout>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e053      	b.n	80011de <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800113a:	b29b      	uxth	r3, r3
 800113c:	2bff      	cmp	r3, #255	@ 0xff
 800113e:	d911      	bls.n	8001164 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	22ff      	movs	r2, #255	@ 0xff
 8001144:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800114a:	b2da      	uxtb	r2, r3
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	045c      	lsls	r4, r3, #17
 8001150:	230a      	movs	r3, #10
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	8819      	ldrh	r1, [r3, #0]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	0023      	movs	r3, r4
 800115e:	f000 fa39 	bl	80015d4 <I2C_TransferConfig>
 8001162:	e012      	b.n	800118a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001168:	b29a      	uxth	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001172:	b2da      	uxtb	r2, r3
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	049c      	lsls	r4, r3, #18
 8001178:	230a      	movs	r3, #10
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	8819      	ldrh	r1, [r3, #0]
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	2300      	movs	r3, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	0023      	movs	r3, r4
 8001186:	f000 fa25 	bl	80015d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800118e:	b29b      	uxth	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d198      	bne.n	80010c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f8de 	bl	800135c <I2C_WaitOnSTOPFlagUntilTimeout>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e01a      	b.n	80011de <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2220      	movs	r2, #32
 80011ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	490c      	ldr	r1, [pc, #48]	@ (80011ec <HAL_I2C_Master_Transmit+0x20c>)
 80011bc:	400a      	ands	r2, r1
 80011be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2241      	movs	r2, #65	@ 0x41
 80011c4:	2120      	movs	r1, #32
 80011c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2242      	movs	r2, #66	@ 0x42
 80011cc:	2100      	movs	r1, #0
 80011ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2240      	movs	r2, #64	@ 0x40
 80011d4:	2100      	movs	r1, #0
 80011d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	e000      	b.n	80011de <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80011dc:	2302      	movs	r3, #2
  }
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b007      	add	sp, #28
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	80002000 	.word	0x80002000
 80011ec:	fe00e800 	.word	0xfe00e800

080011f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2202      	movs	r2, #2
 8001200:	4013      	ands	r3, r2
 8001202:	2b02      	cmp	r3, #2
 8001204:	d103      	bne.n	800120e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d007      	beq.n	800122c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	619a      	str	r2, [r3, #24]
  }
}
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001244:	e030      	b.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	d02d      	beq.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800124c:	f7ff fba6 	bl	800099c <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d302      	bcc.n	8001262 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d122      	bne.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	4013      	ands	r3, r2
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	425a      	negs	r2, r3
 8001272:	4153      	adcs	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	001a      	movs	r2, r3
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d113      	bne.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	2220      	movs	r2, #32
 8001286:	431a      	orrs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2241      	movs	r2, #65	@ 0x41
 8001290:	2120      	movs	r1, #32
 8001292:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2242      	movs	r2, #66	@ 0x42
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2240      	movs	r2, #64	@ 0x40
 80012a0:	2100      	movs	r1, #0
 80012a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e00f      	b.n	80012c8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	4013      	ands	r3, r2
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	425a      	negs	r2, r3
 80012b8:	4153      	adcs	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	001a      	movs	r2, r3
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d0bf      	beq.n	8001246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b004      	add	sp, #16
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012dc:	e032      	b.n	8001344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 f87d 	bl	80013e4 <I2C_IsErrorOccurred>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d001      	beq.n	80012f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e030      	b.n	8001354 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3301      	adds	r3, #1
 80012f6:	d025      	beq.n	8001344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012f8:	f7ff fb50 	bl	800099c <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	429a      	cmp	r2, r3
 8001306:	d302      	bcc.n	800130e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d11a      	bne.n	8001344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	2b02      	cmp	r3, #2
 800131a:	d013      	beq.n	8001344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001320:	2220      	movs	r2, #32
 8001322:	431a      	orrs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2241      	movs	r2, #65	@ 0x41
 800132c:	2120      	movs	r1, #32
 800132e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2242      	movs	r2, #66	@ 0x42
 8001334:	2100      	movs	r1, #0
 8001336:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2240      	movs	r2, #64	@ 0x40
 800133c:	2100      	movs	r1, #0
 800133e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e007      	b.n	8001354 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d1c5      	bne.n	80012de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b004      	add	sp, #16
 800135a:	bd80      	pop	{r7, pc}

0800135c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001368:	e02f      	b.n	80013ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	0018      	movs	r0, r3
 8001372:	f000 f837 	bl	80013e4 <I2C_IsErrorOccurred>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e02d      	b.n	80013da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800137e:	f7ff fb0d 	bl	800099c <HAL_GetTick>
 8001382:	0002      	movs	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d302      	bcc.n	8001394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d11a      	bne.n	80013ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2220      	movs	r2, #32
 800139c:	4013      	ands	r3, r2
 800139e:	2b20      	cmp	r3, #32
 80013a0:	d013      	beq.n	80013ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	2220      	movs	r2, #32
 80013a8:	431a      	orrs	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2241      	movs	r2, #65	@ 0x41
 80013b2:	2120      	movs	r1, #32
 80013b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2242      	movs	r2, #66	@ 0x42
 80013ba:	2100      	movs	r1, #0
 80013bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2240      	movs	r2, #64	@ 0x40
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e007      	b.n	80013da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2220      	movs	r2, #32
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d1c8      	bne.n	800136a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b004      	add	sp, #16
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f0:	2327      	movs	r3, #39	@ 0x27
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2210      	movs	r2, #16
 800140c:	4013      	ands	r3, r2
 800140e:	d100      	bne.n	8001412 <I2C_IsErrorOccurred+0x2e>
 8001410:	e079      	b.n	8001506 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2210      	movs	r2, #16
 8001418:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800141a:	e057      	b.n	80014cc <I2C_IsErrorOccurred+0xe8>
 800141c:	2227      	movs	r2, #39	@ 0x27
 800141e:	18bb      	adds	r3, r7, r2
 8001420:	18ba      	adds	r2, r7, r2
 8001422:	7812      	ldrb	r2, [r2, #0]
 8001424:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3301      	adds	r3, #1
 800142a:	d04f      	beq.n	80014cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800142c:	f7ff fab6 	bl	800099c <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	d302      	bcc.n	8001442 <I2C_IsErrorOccurred+0x5e>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d144      	bne.n	80014cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	4013      	ands	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001450:	2013      	movs	r0, #19
 8001452:	183b      	adds	r3, r7, r0
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	2142      	movs	r1, #66	@ 0x42
 8001458:	5c52      	ldrb	r2, [r2, r1]
 800145a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	2380      	movs	r3, #128	@ 0x80
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	401a      	ands	r2, r3
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	429a      	cmp	r2, r3
 800146e:	d126      	bne.n	80014be <I2C_IsErrorOccurred+0xda>
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	01db      	lsls	r3, r3, #7
 8001476:	429a      	cmp	r2, r3
 8001478:	d021      	beq.n	80014be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800147a:	183b      	adds	r3, r7, r0
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b20      	cmp	r3, #32
 8001480:	d01d      	beq.n	80014be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2180      	movs	r1, #128	@ 0x80
 800148e:	01c9      	lsls	r1, r1, #7
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001494:	f7ff fa82 	bl	800099c <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800149c:	e00f      	b.n	80014be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800149e:	f7ff fa7d 	bl	800099c <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b19      	cmp	r3, #25
 80014aa:	d908      	bls.n	80014be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	2220      	movs	r2, #32
 80014b0:	4313      	orrs	r3, r2
 80014b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80014b4:	2327      	movs	r3, #39	@ 0x27
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]

              break;
 80014bc:	e006      	b.n	80014cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2220      	movs	r2, #32
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	d1e8      	bne.n	800149e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2220      	movs	r2, #32
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d004      	beq.n	80014e4 <I2C_IsErrorOccurred+0x100>
 80014da:	2327      	movs	r3, #39	@ 0x27
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d09b      	beq.n	800141c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80014e4:	2327      	movs	r3, #39	@ 0x27
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2220      	movs	r2, #32
 80014f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	2204      	movs	r2, #4
 80014fa:	4313      	orrs	r3, r2
 80014fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80014fe:	2327      	movs	r3, #39	@ 0x27
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4013      	ands	r3, r2
 8001516:	d00c      	beq.n	8001532 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	2201      	movs	r2, #1
 800151c:	4313      	orrs	r3, r2
 800151e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2280      	movs	r2, #128	@ 0x80
 8001526:	0052      	lsls	r2, r2, #1
 8001528:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800152a:	2327      	movs	r3, #39	@ 0x27
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4013      	ands	r3, r2
 800153a:	d00c      	beq.n	8001556 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2208      	movs	r2, #8
 8001540:	4313      	orrs	r3, r2
 8001542:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2280      	movs	r2, #128	@ 0x80
 800154a:	00d2      	lsls	r2, r2, #3
 800154c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800154e:	2327      	movs	r3, #39	@ 0x27
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d00c      	beq.n	800157a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	2202      	movs	r2, #2
 8001564:	4313      	orrs	r3, r2
 8001566:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001572:	2327      	movs	r3, #39	@ 0x27
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800157a:	2327      	movs	r3, #39	@ 0x27
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01d      	beq.n	80015c0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff fe32 	bl	80011f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	490e      	ldr	r1, [pc, #56]	@ (80015d0 <I2C_IsErrorOccurred+0x1ec>)
 8001598:	400a      	ands	r2, r1
 800159a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2241      	movs	r2, #65	@ 0x41
 80015ac:	2120      	movs	r1, #32
 80015ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2242      	movs	r2, #66	@ 0x42
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	2100      	movs	r1, #0
 80015be:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80015c0:	2327      	movs	r3, #39	@ 0x27
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	781b      	ldrb	r3, [r3, #0]
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b00a      	add	sp, #40	@ 0x28
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	fe00e800 	.word	0xfe00e800

080015d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	0008      	movs	r0, r1
 80015de:	0011      	movs	r1, r2
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	240a      	movs	r4, #10
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	1c02      	adds	r2, r0, #0
 80015e8:	801a      	strh	r2, [r3, #0]
 80015ea:	2009      	movs	r0, #9
 80015ec:	183b      	adds	r3, r7, r0
 80015ee:	1c0a      	adds	r2, r1, #0
 80015f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	059b      	lsls	r3, r3, #22
 80015f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015fa:	183b      	adds	r3, r7, r0
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	0419      	lsls	r1, r3, #16
 8001600:	23ff      	movs	r3, #255	@ 0xff
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001606:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800160c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160e:	4313      	orrs	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800161e:	0d51      	lsrs	r1, r2, #21
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	00d2      	lsls	r2, r2, #3
 8001624:	400a      	ands	r2, r1
 8001626:	4907      	ldr	r1, [pc, #28]	@ (8001644 <I2C_TransferConfig+0x70>)
 8001628:	430a      	orrs	r2, r1
 800162a:	43d2      	mvns	r2, r2
 800162c:	401a      	ands	r2, r3
 800162e:	0011      	movs	r1, r2
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b007      	add	sp, #28
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	03ff63ff 	.word	0x03ff63ff

08001648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2241      	movs	r2, #65	@ 0x41
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b20      	cmp	r3, #32
 800165c:	d138      	bne.n	80016d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2240      	movs	r2, #64	@ 0x40
 8001662:	5c9b      	ldrb	r3, [r3, r2]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001668:	2302      	movs	r3, #2
 800166a:	e032      	b.n	80016d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2240      	movs	r2, #64	@ 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2241      	movs	r2, #65	@ 0x41
 8001678:	2124      	movs	r1, #36	@ 0x24
 800167a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4911      	ldr	r1, [pc, #68]	@ (80016dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2241      	movs	r2, #65	@ 0x41
 80016c0:	2120      	movs	r1, #32
 80016c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2240      	movs	r2, #64	@ 0x40
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
  }
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	ffffefff 	.word	0xffffefff

080016e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2241      	movs	r2, #65	@ 0x41
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d139      	bne.n	800176a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2240      	movs	r2, #64	@ 0x40
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001700:	2302      	movs	r3, #2
 8001702:	e033      	b.n	800176c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2240      	movs	r2, #64	@ 0x40
 8001708:	2101      	movs	r1, #1
 800170a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2241      	movs	r2, #65	@ 0x41
 8001710:	2124      	movs	r1, #36	@ 0x24
 8001712:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	438a      	bics	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4a11      	ldr	r2, [pc, #68]	@ (8001774 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2241      	movs	r2, #65	@ 0x41
 800175a:	2120      	movs	r1, #32
 800175c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2240      	movs	r2, #64	@ 0x40
 8001762:	2100      	movs	r1, #0
 8001764:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
  }
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}
 8001774:	fffff0ff 	.word	0xfffff0ff

08001778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e301      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2201      	movs	r2, #1
 8001790:	4013      	ands	r3, r2
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x1e>
 8001794:	e08d      	b.n	80018b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001796:	4bc3      	ldr	r3, [pc, #780]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	220c      	movs	r2, #12
 800179c:	4013      	ands	r3, r2
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d00e      	beq.n	80017c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a2:	4bc0      	ldr	r3, [pc, #768]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	220c      	movs	r2, #12
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d116      	bne.n	80017dc <HAL_RCC_OscConfig+0x64>
 80017ae:	4bbd      	ldr	r3, [pc, #756]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	401a      	ands	r2, r3
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	429a      	cmp	r2, r3
 80017be:	d10d      	bne.n	80017dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	4bb8      	ldr	r3, [pc, #736]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	029b      	lsls	r3, r3, #10
 80017c8:	4013      	ands	r3, r2
 80017ca:	d100      	bne.n	80017ce <HAL_RCC_OscConfig+0x56>
 80017cc:	e070      	b.n	80018b0 <HAL_RCC_OscConfig+0x138>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d000      	beq.n	80017d8 <HAL_RCC_OscConfig+0x60>
 80017d6:	e06b      	b.n	80018b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e2d8      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x7c>
 80017e4:	4baf      	ldr	r3, [pc, #700]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4bae      	ldr	r3, [pc, #696]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	2180      	movs	r1, #128	@ 0x80
 80017ec:	0249      	lsls	r1, r1, #9
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e02f      	b.n	8001854 <HAL_RCC_OscConfig+0xdc>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x9e>
 80017fc:	4ba9      	ldr	r3, [pc, #676]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4ba8      	ldr	r3, [pc, #672]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001802:	49a9      	ldr	r1, [pc, #676]	@ (8001aa8 <HAL_RCC_OscConfig+0x330>)
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4ba6      	ldr	r3, [pc, #664]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4ba5      	ldr	r3, [pc, #660]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800180e:	49a7      	ldr	r1, [pc, #668]	@ (8001aac <HAL_RCC_OscConfig+0x334>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e01e      	b.n	8001854 <HAL_RCC_OscConfig+0xdc>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b05      	cmp	r3, #5
 800181c:	d10e      	bne.n	800183c <HAL_RCC_OscConfig+0xc4>
 800181e:	4ba1      	ldr	r3, [pc, #644]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4ba0      	ldr	r3, [pc, #640]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001824:	2180      	movs	r1, #128	@ 0x80
 8001826:	02c9      	lsls	r1, r1, #11
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	4b9d      	ldr	r3, [pc, #628]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b9c      	ldr	r3, [pc, #624]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	0249      	lsls	r1, r1, #9
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0xdc>
 800183c:	4b99      	ldr	r3, [pc, #612]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b98      	ldr	r3, [pc, #608]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001842:	4999      	ldr	r1, [pc, #612]	@ (8001aa8 <HAL_RCC_OscConfig+0x330>)
 8001844:	400a      	ands	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	4b96      	ldr	r3, [pc, #600]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b95      	ldr	r3, [pc, #596]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800184e:	4997      	ldr	r1, [pc, #604]	@ (8001aac <HAL_RCC_OscConfig+0x334>)
 8001850:	400a      	ands	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d014      	beq.n	8001886 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f89e 	bl	800099c <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001866:	f7ff f899 	bl	800099c <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	@ 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e28a      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001878:	4b8a      	ldr	r3, [pc, #552]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	029b      	lsls	r3, r3, #10
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0xee>
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff f889 	bl	800099c <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff f884 	bl	800099c <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e275      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	4b80      	ldr	r3, [pc, #512]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x118>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2202      	movs	r2, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d100      	bne.n	80018be <HAL_RCC_OscConfig+0x146>
 80018bc:	e069      	b.n	8001992 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018be:	4b79      	ldr	r3, [pc, #484]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	220c      	movs	r2, #12
 80018c4:	4013      	ands	r3, r2
 80018c6:	d00b      	beq.n	80018e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018c8:	4b76      	ldr	r3, [pc, #472]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	220c      	movs	r2, #12
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d11c      	bne.n	800190e <HAL_RCC_OscConfig+0x196>
 80018d4:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	4013      	ands	r3, r2
 80018de:	d116      	bne.n	800190e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e0:	4b70      	ldr	r3, [pc, #448]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x17e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e24b      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	22f8      	movs	r2, #248	@ 0xf8
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00da      	lsls	r2, r3, #3
 8001906:	4b67      	ldr	r3, [pc, #412]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190c:	e041      	b.n	8001992 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d024      	beq.n	8001960 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001916:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b62      	ldr	r3, [pc, #392]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f83b 	bl	800099c <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192c:	f7ff f836 	bl	800099c <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e227      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b59      	ldr	r3, [pc, #356]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0f1      	beq.n	800192c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b56      	ldr	r3, [pc, #344]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	22f8      	movs	r2, #248	@ 0xf8
 800194e:	4393      	bics	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00da      	lsls	r2, r3, #3
 8001958:	4b52      	ldr	r3, [pc, #328]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e018      	b.n	8001992 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001960:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001966:	2101      	movs	r1, #1
 8001968:	438a      	bics	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f816 	bl	800099c <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff f811 	bl	800099c <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e202      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001988:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d1f1      	bne.n	8001976 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2208      	movs	r2, #8
 8001998:	4013      	ands	r3, r2
 800199a:	d036      	beq.n	8001a0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d019      	beq.n	80019d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a4:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019a8:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7fe fff4 	bl	800099c <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ba:	f7fe ffef 	bl	800099c <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1e0      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d0f1      	beq.n	80019ba <HAL_RCC_OscConfig+0x242>
 80019d6:	e018      	b.n	8001a0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80019da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019dc:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 80019de:	2101      	movs	r1, #1
 80019e0:	438a      	bics	r2, r1
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7fe ffda 	bl	800099c <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7fe ffd5 	bl	800099c <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1c6      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	2202      	movs	r2, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1f1      	bne.n	80019ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4013      	ands	r3, r2
 8001a12:	d100      	bne.n	8001a16 <HAL_RCC_OscConfig+0x29e>
 8001a14:	e0b4      	b.n	8001b80 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	201f      	movs	r0, #31
 8001a18:	183b      	adds	r3, r7, r0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	055b      	lsls	r3, r3, #21
 8001a26:	4013      	ands	r3, r2
 8001a28:	d110      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	2180      	movs	r1, #128	@ 0x80
 8001a32:	0549      	lsls	r1, r1, #21
 8001a34:	430a      	orrs	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	055b      	lsls	r3, r3, #21
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d11a      	bne.n	8001a8e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	2180      	movs	r1, #128	@ 0x80
 8001a60:	0049      	lsls	r1, r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7fe ff99 	bl	800099c <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a70:	f7fe ff94 	bl	800099c <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	@ 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e185      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_OscConfig+0x338>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10e      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x33c>
 8001a96:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	4b02      	ldr	r3, [pc, #8]	@ (8001aa4 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	621a      	str	r2, [r3, #32]
 8001aa2:	e035      	b.n	8001b10 <HAL_RCC_OscConfig+0x398>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	fffeffff 	.word	0xfffeffff
 8001aac:	fffbffff 	.word	0xfffbffff
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x35e>
 8001abc:	4bb6      	ldr	r3, [pc, #728]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001abe:	6a1a      	ldr	r2, [r3, #32]
 8001ac0:	4bb5      	ldr	r3, [pc, #724]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	621a      	str	r2, [r3, #32]
 8001ac8:	4bb3      	ldr	r3, [pc, #716]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	4bb2      	ldr	r3, [pc, #712]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001ace:	2104      	movs	r1, #4
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	621a      	str	r2, [r3, #32]
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x398>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x380>
 8001ade:	4bae      	ldr	r3, [pc, #696]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	4bad      	ldr	r3, [pc, #692]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	621a      	str	r2, [r3, #32]
 8001aea:	4bab      	ldr	r3, [pc, #684]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	4baa      	ldr	r3, [pc, #680]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	621a      	str	r2, [r3, #32]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0x398>
 8001af8:	4ba7      	ldr	r3, [pc, #668]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001afa:	6a1a      	ldr	r2, [r3, #32]
 8001afc:	4ba6      	ldr	r3, [pc, #664]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	438a      	bics	r2, r1
 8001b02:	621a      	str	r2, [r3, #32]
 8001b04:	4ba4      	ldr	r3, [pc, #656]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b06:	6a1a      	ldr	r2, [r3, #32]
 8001b08:	4ba3      	ldr	r3, [pc, #652]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d014      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7fe ff40 	bl	800099c <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	e009      	b.n	8001b36 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe ff3b 	bl	800099c <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4a9b      	ldr	r2, [pc, #620]	@ (8001d9c <HAL_RCC_OscConfig+0x624>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e12b      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b36:	4b98      	ldr	r3, [pc, #608]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3aa>
 8001b40:	e013      	b.n	8001b6a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7fe ff2b 	bl	800099c <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	e009      	b.n	8001b60 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7fe ff26 	bl	800099c <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	4a91      	ldr	r2, [pc, #580]	@ (8001d9c <HAL_RCC_OscConfig+0x624>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e116      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b8d      	ldr	r3, [pc, #564]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b6a:	231f      	movs	r3, #31
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b88      	ldr	r3, [pc, #544]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	4b87      	ldr	r3, [pc, #540]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b7a:	4989      	ldr	r1, [pc, #548]	@ (8001da0 <HAL_RCC_OscConfig+0x628>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2210      	movs	r2, #16
 8001b86:	4013      	ands	r3, r2
 8001b88:	d063      	beq.n	8001c52 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d12a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b92:	4b81      	ldr	r3, [pc, #516]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b96:	4b80      	ldr	r3, [pc, #512]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001b98:	2104      	movs	r1, #4
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7fe fef7 	bl	800099c <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bb4:	f7fe fef2 	bl	800099c <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0e3      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bc6:	4b74      	ldr	r3, [pc, #464]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0f1      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bd0:	4b71      	ldr	r3, [pc, #452]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd4:	22f8      	movs	r2, #248	@ 0xf8
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	00da      	lsls	r2, r3, #3
 8001be0:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001be6:	e034      	b.n	8001c52 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	3305      	adds	r3, #5
 8001bee:	d111      	bne.n	8001c14 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bf0:	4b69      	ldr	r3, [pc, #420]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf4:	4b68      	ldr	r3, [pc, #416]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	22f8      	movs	r2, #248	@ 0xf8
 8001c02:	4393      	bics	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	00da      	lsls	r2, r3, #3
 8001c0c:	4b62      	ldr	r3, [pc, #392]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c12:	e01e      	b.n	8001c52 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c14:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c18:	4b5f      	ldr	r3, [pc, #380]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c20:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c24:	4b5c      	ldr	r3, [pc, #368]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	438a      	bics	r2, r1
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2c:	f7fe feb6 	bl	800099c <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c36:	f7fe feb1 	bl	800099c <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0a2      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c48:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d1f1      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d100      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4e4>
 8001c5a:	e097      	b.n	8001d8c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	220c      	movs	r2, #12
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d100      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4f2>
 8001c68:	e06b      	b.n	8001d42 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d14c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b49      	ldr	r3, [pc, #292]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c78:	494a      	ldr	r1, [pc, #296]	@ (8001da4 <HAL_RCC_OscConfig+0x62c>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7fe fe8d 	bl	800099c <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe fe88 	bl	800099c <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e079      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	049b      	lsls	r3, r3, #18
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	220f      	movs	r2, #15
 8001cac:	4393      	bics	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cb4:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cba:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8001da8 <HAL_RCC_OscConfig+0x630>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	4b32      	ldr	r3, [pc, #200]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b30      	ldr	r3, [pc, #192]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0449      	lsls	r1, r1, #17
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fe5b 	bl	800099c <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe fe56 	bl	800099c <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e047      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	049b      	lsls	r3, r3, #18
 8001d06:	4013      	ands	r3, r2
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x574>
 8001d0a:	e03f      	b.n	8001d8c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001d12:	4924      	ldr	r1, [pc, #144]	@ (8001da4 <HAL_RCC_OscConfig+0x62c>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fe40 	bl	800099c <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe fe3b 	bl	800099c <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e02c      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	049b      	lsls	r3, r3, #18
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5aa>
 8001d40:	e024      	b.n	8001d8c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e01f      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d54:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_RCC_OscConfig+0x620>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	401a      	ands	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d10e      	bne.n	8001d88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	23f0      	movs	r3, #240	@ 0xf0
 8001d7c:	039b      	lsls	r3, r3, #14
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b008      	add	sp, #32
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	00001388 	.word	0x00001388
 8001da0:	efffffff 	.word	0xefffffff
 8001da4:	feffffff 	.word	0xfeffffff
 8001da8:	ffc2ffff 	.word	0xffc2ffff

08001dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b3      	b.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d911      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b58      	ldr	r3, [pc, #352]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	4b55      	ldr	r3, [pc, #340]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e09a      	b.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2202      	movs	r2, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2204      	movs	r2, #4
 8001e02:	4013      	ands	r3, r2
 8001e04:	d006      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e06:	4b4b      	ldr	r3, [pc, #300]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e0c:	21e0      	movs	r1, #224	@ 0xe0
 8001e0e:	00c9      	lsls	r1, r1, #3
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b47      	ldr	r3, [pc, #284]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	22f0      	movs	r2, #240	@ 0xf0
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	4b44      	ldr	r3, [pc, #272]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d040      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	2380      	movs	r3, #128	@ 0x80
 8001e40:	029b      	lsls	r3, r3, #10
 8001e42:	4013      	ands	r3, r2
 8001e44:	d114      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06e      	b.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b38      	ldr	r3, [pc, #224]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d108      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e062      	b.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e05b      	b.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e70:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2203      	movs	r2, #3
 8001e76:	4393      	bics	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7fe fd8a 	bl	800099c <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8c:	e009      	b.n	8001ea2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7fe fd85 	bl	800099c <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_RCC_ClockConfig+0x18c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e042      	b.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1ec      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d211      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4393      	bics	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <HAL_RCC_ClockConfig+0x184>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e020      	b.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2204      	movs	r2, #4
 8001eec:	4013      	ands	r3, r2
 8001eee:	d009      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <HAL_RCC_ClockConfig+0x190>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f04:	f000 f820 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f08:	0001      	movs	r1, r0
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_RCC_ClockConfig+0x188>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	220f      	movs	r2, #15
 8001f12:	4013      	ands	r3, r2
 8001f14:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <HAL_RCC_ClockConfig+0x194>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	000a      	movs	r2, r1
 8001f1a:	40da      	lsrs	r2, r3
 8001f1c:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <HAL_RCC_ClockConfig+0x198>)
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7fe fcf5 	bl	8000910 <HAL_InitTick>
  
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	00001388 	.word	0x00001388
 8001f3c:	fffff8ff 	.word	0xfffff8ff
 8001f40:	080029bc 	.word	0x080029bc
 8001f44:	20000024 	.word	0x20000024

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x30>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x36>
 8001f76:	e02c      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	e02c      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	220f      	movs	r2, #15
 8001f84:	4013      	ands	r3, r2
 8001f86:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f8c:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	220f      	movs	r2, #15
 8001f92:	4013      	ands	r3, r2
 8001f94:	4a16      	ldr	r2, [pc, #88]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	4810      	ldr	r0, [pc, #64]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa8:	f7fe f8ae 	bl	8000108 <__udivsi3>
 8001fac:	0003      	movs	r3, r0
 8001fae:	001a      	movs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4353      	muls	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e009      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	000a      	movs	r2, r1
 8001fbc:	0152      	lsls	r2, r2, #5
 8001fbe:	1a52      	subs	r2, r2, r1
 8001fc0:	0193      	lsls	r3, r2, #6
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	185b      	adds	r3, r3, r1
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fd4:	613b      	str	r3, [r7, #16]
      break;
 8001fd6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fd8:	693b      	ldr	r3, [r7, #16]
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b006      	add	sp, #24
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	080029d4 	.word	0x080029d4
 8001ff0:	080029e4 	.word	0x080029e4

08001ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	@ (8002004 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	20000024 	.word	0x20000024

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800200c:	f7ff fff2 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002010:	0001      	movs	r1, r0
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	2207      	movs	r2, #7
 800201a:	4013      	ands	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	40d9      	lsrs	r1, r3
 8002022:	000b      	movs	r3, r1
}    
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	40021000 	.word	0x40021000
 8002030:	080029cc 	.word	0x080029cc

08002034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	4013      	ands	r3, r2
 800204e:	d100      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002050:	e08e      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2017      	movs	r0, #23
 8002054:	183b      	adds	r3, r7, r0
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b57      	ldr	r3, [pc, #348]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	055b      	lsls	r3, r3, #21
 8002062:	4013      	ands	r3, r2
 8002064:	d110      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b54      	ldr	r3, [pc, #336]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	4b53      	ldr	r3, [pc, #332]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800206c:	2180      	movs	r1, #128	@ 0x80
 800206e:	0549      	lsls	r1, r1, #21
 8002070:	430a      	orrs	r2, r1
 8002072:	61da      	str	r2, [r3, #28]
 8002074:	4b50      	ldr	r3, [pc, #320]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	055b      	lsls	r3, r3, #21
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	183b      	adds	r3, r7, r0
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4013      	ands	r3, r2
 8002092:	d11a      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002094:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b48      	ldr	r3, [pc, #288]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	0049      	lsls	r1, r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fc7b 	bl	800099c <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	e008      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fc76 	bl	800099c <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e077      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b3f      	ldr	r3, [pc, #252]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ca:	4b3b      	ldr	r3, [pc, #236]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	23c0      	movs	r3, #192	@ 0xc0
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d034      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	23c0      	movs	r3, #192	@ 0xc0
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d02c      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ec:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a33      	ldr	r2, [pc, #204]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f6:	4b30      	ldr	r3, [pc, #192]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0249      	lsls	r1, r1, #9
 8002100:	430a      	orrs	r2, r1
 8002102:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	4b2b      	ldr	r3, [pc, #172]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210a:	492e      	ldr	r1, [pc, #184]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800210c:	400a      	ands	r2, r1
 800210e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002110:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fc3d 	bl	800099c <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002126:	e009      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fc38 	bl	800099c <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	4a25      	ldr	r2, [pc, #148]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e038      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d0f0      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002146:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a1d      	ldr	r2, [pc, #116]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800214c:	4013      	ands	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002156:	430a      	orrs	r2, r1
 8002158:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800215a:	2317      	movs	r3, #23
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216a:	4918      	ldr	r1, [pc, #96]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800216c:	400a      	ands	r2, r1
 800216e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	2203      	movs	r2, #3
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800218a:	430a      	orrs	r2, r1
 800218c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2220      	movs	r2, #32
 8002194:	4013      	ands	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002198:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	2210      	movs	r2, #16
 800219e:	4393      	bics	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b006      	add	sp, #24
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40007000 	.word	0x40007000
 80021c0:	fffffcff 	.word	0xfffffcff
 80021c4:	fffeffff 	.word	0xfffeffff
 80021c8:	00001388 	.word	0x00001388
 80021cc:	efffffff 	.word	0xefffffff

080021d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e044      	b.n	800226c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2278      	movs	r2, #120	@ 0x78
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fe fae3 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2224      	movs	r2, #36	@ 0x24
 80021fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 f830 	bl	8002278 <UART_SetConfig>
 8002218:	0003      	movs	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e024      	b.n	800226c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f963 	bl	80024f8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	490d      	ldr	r1, [pc, #52]	@ (8002274 <HAL_UART_Init+0xa4>)
 800223e:	400a      	ands	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2108      	movs	r1, #8
 800224e:	438a      	bics	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f9fb 	bl	8002660 <UART_CheckIdleState>
 800226a:	0003      	movs	r3, r0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}
 8002274:	fffff7ff 	.word	0xfffff7ff

08002278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002280:	231e      	movs	r3, #30
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a8d      	ldr	r2, [pc, #564]	@ (80024dc <UART_SetConfig+0x264>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a88      	ldr	r2, [pc, #544]	@ (80024e0 <UART_SetConfig+0x268>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a7f      	ldr	r2, [pc, #508]	@ (80024e4 <UART_SetConfig+0x26c>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7b      	ldr	r2, [pc, #492]	@ (80024e8 <UART_SetConfig+0x270>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d127      	bne.n	800234e <UART_SetConfig+0xd6>
 80022fe:	4b7b      	ldr	r3, [pc, #492]	@ (80024ec <UART_SetConfig+0x274>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	2203      	movs	r2, #3
 8002304:	4013      	ands	r3, r2
 8002306:	2b03      	cmp	r3, #3
 8002308:	d00d      	beq.n	8002326 <UART_SetConfig+0xae>
 800230a:	d81b      	bhi.n	8002344 <UART_SetConfig+0xcc>
 800230c:	2b02      	cmp	r3, #2
 800230e:	d014      	beq.n	800233a <UART_SetConfig+0xc2>
 8002310:	d818      	bhi.n	8002344 <UART_SetConfig+0xcc>
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <UART_SetConfig+0xa4>
 8002316:	2b01      	cmp	r3, #1
 8002318:	d00a      	beq.n	8002330 <UART_SetConfig+0xb8>
 800231a:	e013      	b.n	8002344 <UART_SetConfig+0xcc>
 800231c:	231f      	movs	r3, #31
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e021      	b.n	800236a <UART_SetConfig+0xf2>
 8002326:	231f      	movs	r3, #31
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e01c      	b.n	800236a <UART_SetConfig+0xf2>
 8002330:	231f      	movs	r3, #31
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2204      	movs	r2, #4
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e017      	b.n	800236a <UART_SetConfig+0xf2>
 800233a:	231f      	movs	r3, #31
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2208      	movs	r2, #8
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e012      	b.n	800236a <UART_SetConfig+0xf2>
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2210      	movs	r2, #16
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e00d      	b.n	800236a <UART_SetConfig+0xf2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a67      	ldr	r2, [pc, #412]	@ (80024f0 <UART_SetConfig+0x278>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d104      	bne.n	8002362 <UART_SetConfig+0xea>
 8002358:	231f      	movs	r3, #31
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e003      	b.n	800236a <UART_SetConfig+0xf2>
 8002362:	231f      	movs	r3, #31
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2210      	movs	r2, #16
 8002368:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	429a      	cmp	r2, r3
 8002374:	d15c      	bne.n	8002430 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002376:	231f      	movs	r3, #31
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d015      	beq.n	80023ac <UART_SetConfig+0x134>
 8002380:	dc18      	bgt.n	80023b4 <UART_SetConfig+0x13c>
 8002382:	2b04      	cmp	r3, #4
 8002384:	d00d      	beq.n	80023a2 <UART_SetConfig+0x12a>
 8002386:	dc15      	bgt.n	80023b4 <UART_SetConfig+0x13c>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <UART_SetConfig+0x11a>
 800238c:	2b02      	cmp	r3, #2
 800238e:	d005      	beq.n	800239c <UART_SetConfig+0x124>
 8002390:	e010      	b.n	80023b4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002392:	f7ff fe39 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8002396:	0003      	movs	r3, r0
 8002398:	61bb      	str	r3, [r7, #24]
        break;
 800239a:	e012      	b.n	80023c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800239c:	4b55      	ldr	r3, [pc, #340]	@ (80024f4 <UART_SetConfig+0x27c>)
 800239e:	61bb      	str	r3, [r7, #24]
        break;
 80023a0:	e00f      	b.n	80023c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023a2:	f7ff fdd1 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 80023a6:	0003      	movs	r3, r0
 80023a8:	61bb      	str	r3, [r7, #24]
        break;
 80023aa:	e00a      	b.n	80023c2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	61bb      	str	r3, [r7, #24]
        break;
 80023b2:	e006      	b.n	80023c2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023b8:	231e      	movs	r3, #30
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
        break;
 80023c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d100      	bne.n	80023ca <UART_SetConfig+0x152>
 80023c8:	e07a      	b.n	80024c0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	005a      	lsls	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	18d2      	adds	r2, r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f7fd fe93 	bl	8000108 <__udivsi3>
 80023e2:	0003      	movs	r3, r0
 80023e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d91c      	bls.n	8002426 <UART_SetConfig+0x1ae>
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	025b      	lsls	r3, r3, #9
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d217      	bcs.n	8002426 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	200e      	movs	r0, #14
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	210f      	movs	r1, #15
 8002400:	438a      	bics	r2, r1
 8002402:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	b29b      	uxth	r3, r3
 800240a:	2207      	movs	r2, #7
 800240c:	4013      	ands	r3, r2
 800240e:	b299      	uxth	r1, r3
 8002410:	183b      	adds	r3, r7, r0
 8002412:	183a      	adds	r2, r7, r0
 8002414:	8812      	ldrh	r2, [r2, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	183a      	adds	r2, r7, r0
 8002420:	8812      	ldrh	r2, [r2, #0]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	e04c      	b.n	80024c0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002426:	231e      	movs	r3, #30
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e047      	b.n	80024c0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002430:	231f      	movs	r3, #31
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b08      	cmp	r3, #8
 8002438:	d015      	beq.n	8002466 <UART_SetConfig+0x1ee>
 800243a:	dc18      	bgt.n	800246e <UART_SetConfig+0x1f6>
 800243c:	2b04      	cmp	r3, #4
 800243e:	d00d      	beq.n	800245c <UART_SetConfig+0x1e4>
 8002440:	dc15      	bgt.n	800246e <UART_SetConfig+0x1f6>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <UART_SetConfig+0x1d4>
 8002446:	2b02      	cmp	r3, #2
 8002448:	d005      	beq.n	8002456 <UART_SetConfig+0x1de>
 800244a:	e010      	b.n	800246e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800244c:	f7ff fddc 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8002450:	0003      	movs	r3, r0
 8002452:	61bb      	str	r3, [r7, #24]
        break;
 8002454:	e012      	b.n	800247c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002456:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <UART_SetConfig+0x27c>)
 8002458:	61bb      	str	r3, [r7, #24]
        break;
 800245a:	e00f      	b.n	800247c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800245c:	f7ff fd74 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8002460:	0003      	movs	r3, r0
 8002462:	61bb      	str	r3, [r7, #24]
        break;
 8002464:	e00a      	b.n	800247c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	61bb      	str	r3, [r7, #24]
        break;
 800246c:	e006      	b.n	800247c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002472:	231e      	movs	r3, #30
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
        break;
 800247a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01e      	beq.n	80024c0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	085a      	lsrs	r2, r3, #1
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	18d2      	adds	r2, r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0019      	movs	r1, r3
 8002492:	0010      	movs	r0, r2
 8002494:	f7fd fe38 	bl	8000108 <__udivsi3>
 8002498:	0003      	movs	r3, r0
 800249a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	d90a      	bls.n	80024b8 <UART_SetConfig+0x240>
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d205      	bcs.n	80024b8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	e003      	b.n	80024c0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80024b8:	231e      	movs	r3, #30
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80024cc:	231e      	movs	r3, #30
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b008      	add	sp, #32
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	ffff69f3 	.word	0xffff69f3
 80024e0:	ffffcfff 	.word	0xffffcfff
 80024e4:	fffff4ff 	.word	0xfffff4ff
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40004400 	.word	0x40004400
 80024f4:	007a1200 	.word	0x007a1200

080024f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	d00b      	beq.n	8002522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a4a      	ldr	r2, [pc, #296]	@ (800263c <UART_AdvFeatureConfig+0x144>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	d00b      	beq.n	8002544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a43      	ldr	r2, [pc, #268]	@ (8002640 <UART_AdvFeatureConfig+0x148>)
 8002534:	4013      	ands	r3, r2
 8002536:	0019      	movs	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	2204      	movs	r2, #4
 800254a:	4013      	ands	r3, r2
 800254c:	d00b      	beq.n	8002566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a3b      	ldr	r2, [pc, #236]	@ (8002644 <UART_AdvFeatureConfig+0x14c>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	2208      	movs	r2, #8
 800256c:	4013      	ands	r3, r2
 800256e:	d00b      	beq.n	8002588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a34      	ldr	r2, [pc, #208]	@ (8002648 <UART_AdvFeatureConfig+0x150>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	2210      	movs	r2, #16
 800258e:	4013      	ands	r3, r2
 8002590:	d00b      	beq.n	80025aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a2c      	ldr	r2, [pc, #176]	@ (800264c <UART_AdvFeatureConfig+0x154>)
 800259a:	4013      	ands	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	2220      	movs	r2, #32
 80025b0:	4013      	ands	r3, r2
 80025b2:	d00b      	beq.n	80025cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4a25      	ldr	r2, [pc, #148]	@ (8002650 <UART_AdvFeatureConfig+0x158>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	2240      	movs	r2, #64	@ 0x40
 80025d2:	4013      	ands	r3, r2
 80025d4:	d01d      	beq.n	8002612 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <UART_AdvFeatureConfig+0x15c>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	035b      	lsls	r3, r3, #13
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d10b      	bne.n	8002612 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a15      	ldr	r2, [pc, #84]	@ (8002658 <UART_AdvFeatureConfig+0x160>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	2280      	movs	r2, #128	@ 0x80
 8002618:	4013      	ands	r3, r2
 800261a:	d00b      	beq.n	8002634 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a0e      	ldr	r2, [pc, #56]	@ (800265c <UART_AdvFeatureConfig+0x164>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]
  }
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}
 800263c:	fffdffff 	.word	0xfffdffff
 8002640:	fffeffff 	.word	0xfffeffff
 8002644:	fffbffff 	.word	0xfffbffff
 8002648:	ffff7fff 	.word	0xffff7fff
 800264c:	ffffefff 	.word	0xffffefff
 8002650:	ffffdfff 	.word	0xffffdfff
 8002654:	ffefffff 	.word	0xffefffff
 8002658:	ff9fffff 	.word	0xff9fffff
 800265c:	fff7ffff 	.word	0xfff7ffff

08002660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b092      	sub	sp, #72	@ 0x48
 8002664:	af02      	add	r7, sp, #8
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2284      	movs	r2, #132	@ 0x84
 800266c:	2100      	movs	r1, #0
 800266e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002670:	f7fe f994 	bl	800099c <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2208      	movs	r2, #8
 8002680:	4013      	ands	r3, r2
 8002682:	2b08      	cmp	r3, #8
 8002684:	d12c      	bne.n	80026e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002688:	2280      	movs	r2, #128	@ 0x80
 800268a:	0391      	lsls	r1, r2, #14
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4a46      	ldr	r2, [pc, #280]	@ (80027a8 <UART_CheckIdleState+0x148>)
 8002690:	9200      	str	r2, [sp, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	f000 f88c 	bl	80027b0 <UART_WaitOnFlagUntilTimeout>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d021      	beq.n	80026e0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269c:	f3ef 8310 	mrs	r3, PRIMASK
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80026a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026a6:	2301      	movs	r3, #1
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ac:	f383 8810 	msr	PRIMASK, r3
}
 80026b0:	46c0      	nop			@ (mov r8, r8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2180      	movs	r1, #128	@ 0x80
 80026be:	438a      	bics	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c8:	f383 8810 	msr	PRIMASK, r3
}
 80026cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2278      	movs	r2, #120	@ 0x78
 80026d8:	2100      	movs	r1, #0
 80026da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e05f      	b.n	80027a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2204      	movs	r2, #4
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d146      	bne.n	800277c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f0:	2280      	movs	r2, #128	@ 0x80
 80026f2:	03d1      	lsls	r1, r2, #15
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <UART_CheckIdleState+0x148>)
 80026f8:	9200      	str	r2, [sp, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f000 f858 	bl	80027b0 <UART_WaitOnFlagUntilTimeout>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d03b      	beq.n	800277c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002704:	f3ef 8310 	mrs	r3, PRIMASK
 8002708:	60fb      	str	r3, [r7, #12]
  return(result);
 800270a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
 800270e:	2301      	movs	r3, #1
 8002710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4921      	ldr	r1, [pc, #132]	@ (80027ac <UART_CheckIdleState+0x14c>)
 8002726:	400a      	ands	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f383 8810 	msr	PRIMASK, r3
}
 8002734:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002736:	f3ef 8310 	mrs	r3, PRIMASK
 800273a:	61bb      	str	r3, [r7, #24]
  return(result);
 800273c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002740:	2301      	movs	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f383 8810 	msr	PRIMASK, r3
}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	438a      	bics	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f383 8810 	msr	PRIMASK, r3
}
 8002766:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	2120      	movs	r1, #32
 800276e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2278      	movs	r2, #120	@ 0x78
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e011      	b.n	80027a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2280      	movs	r2, #128	@ 0x80
 8002786:	2120      	movs	r1, #32
 8002788:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2278      	movs	r2, #120	@ 0x78
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b010      	add	sp, #64	@ 0x40
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	01ffffff 	.word	0x01ffffff
 80027ac:	fffffedf 	.word	0xfffffedf

080027b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c0:	e04b      	b.n	800285a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3301      	adds	r3, #1
 80027c6:	d048      	beq.n	800285a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c8:	f7fe f8e8 	bl	800099c <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d302      	bcc.n	80027de <UART_WaitOnFlagUntilTimeout+0x2e>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e04b      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2204      	movs	r2, #4
 80027ea:	4013      	ands	r3, r2
 80027ec:	d035      	beq.n	800285a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d111      	bne.n	8002820 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2208      	movs	r2, #8
 8002802:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	0018      	movs	r0, r3
 8002808:	f000 f83c 	bl	8002884 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2284      	movs	r2, #132	@ 0x84
 8002810:	2108      	movs	r1, #8
 8002812:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2278      	movs	r2, #120	@ 0x78
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e02c      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	2380      	movs	r3, #128	@ 0x80
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	401a      	ands	r2, r3
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	429a      	cmp	r2, r3
 8002832:	d112      	bne.n	800285a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f81f 	bl	8002884 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2284      	movs	r2, #132	@ 0x84
 800284a:	2120      	movs	r1, #32
 800284c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2278      	movs	r2, #120	@ 0x78
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e00f      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	4013      	ands	r3, r2
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	425a      	negs	r2, r3
 800286a:	4153      	adcs	r3, r2
 800286c:	b2db      	uxtb	r3, r3
 800286e:	001a      	movs	r2, r3
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d0a4      	beq.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	@ 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8310 	mrs	r3, PRIMASK
 8002890:	617b      	str	r3, [r7, #20]
  return(result);
 8002892:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002894:	637b      	str	r3, [r7, #52]	@ 0x34
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4926      	ldr	r1, [pc, #152]	@ (8002948 <UART_EndRxTransfer+0xc4>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f383 8810 	msr	PRIMASK, r3
}
 80028bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	623b      	str	r3, [r7, #32]
  return(result);
 80028c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c8:	2301      	movs	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	f383 8810 	msr	PRIMASK, r3
}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d118      	bne.n	800292a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f8:	f3ef 8310 	mrs	r3, PRIMASK
 80028fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80028fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002902:	2301      	movs	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	46c0      	nop			@ (mov r8, r8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2110      	movs	r1, #16
 800291a:	438a      	bics	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	2120      	movs	r1, #32
 8002930:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b00e      	add	sp, #56	@ 0x38
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	fffffedf 	.word	0xfffffedf

0800294c <memset>:
 800294c:	0003      	movs	r3, r0
 800294e:	1882      	adds	r2, r0, r2
 8002950:	4293      	cmp	r3, r2
 8002952:	d100      	bne.n	8002956 <memset+0xa>
 8002954:	4770      	bx	lr
 8002956:	7019      	strb	r1, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	e7f9      	b.n	8002950 <memset+0x4>

0800295c <__libc_init_array>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	2600      	movs	r6, #0
 8002960:	4c0c      	ldr	r4, [pc, #48]	@ (8002994 <__libc_init_array+0x38>)
 8002962:	4d0d      	ldr	r5, [pc, #52]	@ (8002998 <__libc_init_array+0x3c>)
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	42a6      	cmp	r6, r4
 800296a:	d109      	bne.n	8002980 <__libc_init_array+0x24>
 800296c:	2600      	movs	r6, #0
 800296e:	f000 f819 	bl	80029a4 <_init>
 8002972:	4c0a      	ldr	r4, [pc, #40]	@ (800299c <__libc_init_array+0x40>)
 8002974:	4d0a      	ldr	r5, [pc, #40]	@ (80029a0 <__libc_init_array+0x44>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	42a6      	cmp	r6, r4
 800297c:	d105      	bne.n	800298a <__libc_init_array+0x2e>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	00b3      	lsls	r3, r6, #2
 8002982:	58eb      	ldr	r3, [r5, r3]
 8002984:	4798      	blx	r3
 8002986:	3601      	adds	r6, #1
 8002988:	e7ee      	b.n	8002968 <__libc_init_array+0xc>
 800298a:	00b3      	lsls	r3, r6, #2
 800298c:	58eb      	ldr	r3, [r5, r3]
 800298e:	4798      	blx	r3
 8002990:	3601      	adds	r6, #1
 8002992:	e7f2      	b.n	800297a <__libc_init_array+0x1e>
 8002994:	080029f4 	.word	0x080029f4
 8002998:	080029f4 	.word	0x080029f4
 800299c:	080029f8 	.word	0x080029f8
 80029a0:	080029f4 	.word	0x080029f4

080029a4 <_init>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr

080029b0 <_fini>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr
